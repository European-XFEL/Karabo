#!/usr/bin/env bash

set -e
set -o pipefail

__check_existence() {
    local status=$(curl --silent --head -r 0-0 "$1" | head -n 1)
    local fileNotFound=$(echo $status | grep 404)
    if [ -z "$fileNotFound" -a "$REL_TAG" != "Nightly" ]; then
        echo "That build exists already!"
        exit 1
    fi
}

__release_build() {
    case "$1" in
        debian*|ubuntu*|centos*|almalinux*|redhat*)
            export REL_OS_NAME=$LSB_RELEASE_DIST
            export REL_OS_VERS_LONG=$(echo $LSB_RELEASE_VERSION | sed -r "s/^([0-9]+).*/\1/")
            export REL_ARTIFACT_NAME=karabo-$REL_TAG-Release-$REL_OS_NAME-$REL_OS_VERS_LONG-x86_64.sh
            export REL_LATEST_NAME=karabo-$LATEST_TAG-Release-$REL_OS_NAME-$REL_OS_VERS_LONG-x86_64.sh
            export REL_ARTIFACT_DEST_PATH=$FRAMEWORK_DEST_DIR/$REL_ARTIFACT_NAME
            export REL_ARTIFACT_LATEST_PATH=$FRAMEWORK_LATEST_DIR/$REL_LATEST_NAME
            __check_existence $KARABO_UPLOAD_CURL_PREFIX/$FRAMEWORK_DEST_DIR/$REL_ARTIFACT_NAME
            bash ./auto_build_all.sh Release --bundle
            mv package/Release/$REL_OS_NAME/$REL_OS_VERS_LONG/x86_64/karabo-*.sh $REL_ARTIFACT_NAME
            # test that python is linked correctly in the archive
            # first relocate the extern dir to assure it is not picked up if we build in the same
            # job
            echo "Installing binary to perform final tests..."
            mv extern extern_will_not_link
            bash $REL_ARTIFACT_NAME --prefix=/tmp/
            source /tmp/karabo/activate
            # if any linker paths are off, the following commands will fail
            echo "Testing Python linking works by outputting version..."
            echo "python ..."
            python --version
            echo "python3 ..."
            python3 --version
            # echo "python3.8 ..."
            # python3.8 --version
            sshpass -p "$XKARABO_PWD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $KARABO_UPLOAD_HOST "mkdir -p $KARABO_UPLOAD_DIR/$FRAMEWORK_DEST_DIR"
            sshpass -p "$XKARABO_PWD" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $REL_ARTIFACT_NAME $SSH_PREFIX/$FRAMEWORK_DEST_DIR
            ;;
        *)
            echo "unknown target OS: $1"
            exit 1
            ;;
    esac

    if [ "$REL_TAG" != "$NIGHTLY_TAG" ]; then
        sshpass -p "$XKARABO_PWD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $KARABO_UPLOAD_HOST "ln -fs $KARABO_UPLOAD_DIR/$REL_ARTIFACT_DEST_PATH $KARABO_UPLOAD_DIR/$REL_ARTIFACT_LATEST_PATH"
    fi
}


echo "Start building job: {$1}"

JOB_SCOPE=$(echo $1 | cut -f1 -d' ')
JOB_TYPE=$(echo $1 | cut -f2 -d' ')
JOB_TYPE=${JOB_TYPE//:}
TARGET_OS=$(echo $1 | cut -f3 -d' ')
TARGET_OS=${TARGET_OS//[}
TARGET_OS=${TARGET_OS//]}

case "$JOB_SCOPE" in
    release) __release_build $TARGET_OS ;;
    prerelease) __release_build $TARGET_OS ;;
    nightly) __release_build $TARGET_OS ;;
    *) echo "unknown job scope: $JOB_SCOPE" ;;
esac
