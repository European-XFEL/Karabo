# -- variables definitions for cppcheck
CPPBASEOPTIONS="--error-exitcode=0 --inconclusive --enable=all --force"

# don't undef: -U_WIN32 -U__MACH__ -U__linux__
CPPUNDEFINES="-UKARABO_ENABLE_TRACE_LOG -UKARABO_IO_TRACE -UKARABO_USE_PROFILER_SCALARFILTERBUFFER1 "
CPPUNDEFINES+="-U_MSC_VER -U__DLL__ -U__CYGWIN__ -U__sun -Usun "
CPPUNDEFINES+="-U__DragonFly__ -U__FreeBSD__ -U__NetBSD__ -U__OpenBSD__ "
CPPUNDEFINES+="-U__MACOSX__ -UBSD -U__APPLE__ -U__unix -U__unix__ -Uunix "
CPPUNDEFINES+="-U__SO__ -U__sgi -Usgi -U__GNUC__ -U__GLIBC__ -U__linux -Ulinux "

# -- functions definitions

__run_lint_command() {
    command="time $1"
    echo $command
    eval $command
    local status=$?
    if [[ $status != 0 ]]; then
        echo "Exited with error:$status"
        exit $status
    fi
}

__lint_cpp_full() {
    CPPINCLUDES="-I$CI_PROJECT_DIR/src"

    CPPIGNOREDIRS="-i$CI_PROJECT_DIR/build -i$CI_PROJECT_DIR/ci -i$CI_PROJECT_DIR/doc "
    CPPIGNOREDIRS+="-i$CI_PROJECT_DIR/extern -i$CI_PROJECT_DIR/report "

    OUTPUT="--output-file=${FUNCNAME[0]}_report_$SCANNAME.txt"
    SCANNEDFOLDER="$CI_PROJECT_DIR/src/karabo"
    CPPCHECKOPTIONS="$CPPINCLUDES $CPPUNDEFINES $OUTPUT $CPPBASEOPTIONS $CPPIGNOREDIRS"

    __run_lint_command "cppcheck $CPPCHECKOPTIONS $SCANNEDFOLDER" # TODO fix c++ code quality checks
}

__lint_cpp_fast() {
    CPPDEFINES="-DKARABO_CLASSINFO -DKARABO_REGISTER_FOR_CONFIGURATION"

    OUTPUT="--output-file=${FUNCNAME[0]}_report_$SCANNAME.txt"
    SCANNEDFOLDER="$CI_PROJECT_DIR/src/karabo"
    CPPCHECKOPTIONS="$CPPUNDEFINES $CPPDEFINES $OUTPUT $CPPBASEOPTIONS "

    # TODO: set --error-exitcode=1 to make it blocking
    __run_lint_command "cppcheck $CPPCHECKOPTIONS $SCANNEDFOLDER"
}

__lint_flake8() {
    FLAKE8OPTIONS="--exclude=*tests* --tee"
    __run_lint_command "flake8 $FLAKE8OPTIONS $CI_PROJECT_DIR/src/pythonKarabo/karabo"
    __run_lint_command "flake8 $FLAKE8OPTIONS $CI_PROJECT_DIR/src/pythonGui/karabogui"
}

__lint_isort() {
    pushd $CI_PROJECT_DIR/src/pythonGui/
    __run_lint_command "isort . --check"
    popd
}

# -- main
# if not run in the gitlab CI environment, one must set this env. variable.
if [ "$CI_PROJECT_DIR" = "" ]; then
    export CI_PROJECT_DIR=$(echo $(git rev-parse --show-toplevel))
else
    # call manually if not CI:
    # if non-CI it causes a warning: Could not find conda environment
    source activate && conda activate
fi

# -- usage
# lint <SCANNAME>
# where <SCANNAME> is FULLCPPCHECK FASTCPPCHECK FLAKE8
# or a user-defined name.
# if no name provided, SCANNAME will be set to "DEFAULTSCAN"
# and default settings will be applied

SCANNAME=$1
# a variable is unset or set to the empty string
if [[ -z "${SCANNAME}" ]]; then
  SCANNAME="DEFAULTSCAN"
fi

case $SCANNAME in
    "FULLCPPCHECK")
        __lint_cpp_full
        ;;
    "FASTCPPCHECK")
        __lint_cpp_fast
        ;;
    "FLAKE8")
        __lint_flake8
        ;;
    "ISORT")
        __lint_isort
        ;;
    *)
        echo "Running a scan with default settings.."
        __lint_cpp_fast && \
        __lint_flake8 && \
        __lint_isort
        ;;
esac
echo "Linter scan complete"
