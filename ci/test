#!/usr/bin/env bash

__deps_build_tests() {
    export FORCED_DEPS_TAG=$CI_COMMIT_REF_SLUG
    bash ./auto_build_all.sh Debug --runTests --runIntegrationTests
}

__conda_tests() {
    . ci/utils/enable_internet.sh

    bash ./run_python_tests.sh --runCondaUnitTests --rootDir .

    . ci/utils/disable_internet.sh
}

__cmake_tests() {
    . ci/utils/enable_internet.sh
    conda activate || source activate || return 1
    # create the recipe (setting versions...)
    pushd conda-recipes/karabo-cpp
    python -m cogapp -o meta.yaml ./meta_base.yaml
    conda build .
    popd
    . ci/utils/disable_internet.sh
}

__unit_tests() {
    bash ./auto_build_all.sh Debug --runTests
}

__integration_tests() {
    bash ./auto_build_all.sh Debug --runIntegrationTests
}


echo "Start to testing job: {$1}"

JOB_SCOPE=$(echo $1 | cut -f1 -d' ')
JOB_TYPE=$(echo $1 | cut -f2 -d' ')
TARGET_OS=$(echo $1 | cut -f3 -d' ')

export KARABO_BROKER_TOPIC="gitlab_ci_$CI_JOB_ID"
export KARABO_PROJECT_DB=existdb_host
export KARABO_PROJECT_DB_PORT=8080
export KARABO_TEST_PROJECT_DB=existdb_host
export KARABO_TEST_PROJECT_DB_PORT=8080
export KARABO_TEST_INFLUXDB_HOST=influxdb_host
export KARABO_TEST_INFLUXDB_PORT=8086
export KARABO_TEST_INFLUXDB_DB=$INFLUXDB_DB

export KARABO_INFLUXDB_DBNAME=$INFLUXDB_DB
# this is for the influxDb /query and /ping endpoint
export KARABO_INFLUXDB_QUERY_USER=$INFLUXDB_USER
export KARABO_INFLUXDB_QUERY_PASSWORD=$INFLUXDB_USER_PASSWORD
export KARABO_INFLUXDB_QUERY_URL=tcp://$KARABO_TEST_INFLUXDB_HOST:$KARABO_TEST_INFLUXDB_PORT
# this is for the influxDb /write endpoint
export KARABO_INFLUXDB_WRITE_USER=$INFLUXDB_ADMIN_USER
export KARABO_INFLUXDB_WRITE_PASSWORD=$INFLUXDB_ADMIN_PASSWORD
export KARABO_INFLUXDB_WRITE_URL=tcp://$KARABO_TEST_INFLUXDB_HOST:$KARABO_TEST_INFLUXDB_PORT

# todo refactor
export KARABO_TEST_INFLUXDB_USER=$INFLUXDB_USER
export KARABO_TEST_INFLUXDB_PASSWORD=$INFLUXDB_USER_PASSWORD
export KARABO_TEST_INFLUXDB_ADMUSER=$INFLUXDB_ADMIN_USER
export KARABO_TEST_INFLUXDB_ADMUSER_PASSWORD=$INFLUXDB_ADMIN_PASSWORD

if [ "$TARGET_OS" = "miniconda" ]; then
    __conda_tests
elif [ "$TARGET_OS" = "miniconda-cmake" ]; then
    __cmake_tests
else
    case "$JOB_SCOPE" in
        deps) __deps_build_tests ;;
        unit) __unit_tests ;;
        integration) __integration_tests ;;
        *) echo "unknown job scope: $JOB_SCOPE" ;;
    esac
fi
