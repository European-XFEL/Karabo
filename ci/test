#!/usr/bin/env bash

__git_diff() {
    python ci/miniconda/git_diff.py $1
    return $?
}

__deps_build_tests() {
    export FORCED_DEPS_TAG=$CI_COMMIT_REF_SLUG
    bash ./auto_build_all.sh Debug --runTests --runIntegrationTests
}

__cmake_tests() {
    . ci/utils/enable_internet.sh
    source build_conda_env.sh clean install karabo-cpp
    . ci/utils/disable_internet.sh
}

__unit_tests() {
    if [[ "$TARGET_OS" = "miniconda-cmake" ]] ; then
        __git_diff karabo && __cmake_tests
    else
        # compile the build options depending on the git diff
        OPT=""
        # the --runTests option executes unit tests for the src/pythonKarabo and src/karabo directories
        ( __git_diff karabo || __git_diff pythonKarabo ) && OPT="${OPT} --runTests"
        __git_diff cppLongTests && OPT="${OPT} --runLongTests"
        __git_diff integrationTests && OPT="${OPT} --runIntegrationTests"
        # NOTE: pythonGui tests are not executed by this file, but by ci/miniconda/build.py
        # NOTE2: to trigger test execution manually, set the OPT variable in a temporary commit.
        #        for example:
        # OPT="--runIntegrationTests"
        # OPT="--runTests --runIntegrationTests"
        # OPT="--runLongTests"
        if [[ -n "$OPT" ]] ; then
            echo "running build script with options:${OPT}"
            bash ./auto_build_all.sh Debug ${OPT}
        else
            echo "nothinig to do: skipping tests"
        fi
    fi
}

__integration_tests() {
    bash ./auto_build_all.sh Debug --runIntegrationTests
}

__long_tests() {
    if [[ "$SCHEDULED_JOB" != "long-tests" ]]; then
        # another scheduled job was triggered
        echo "Not a 'long-tests' job. Skipping."
        exit 0
    fi
    bash ./auto_build_all.sh Debug --runLongTests
}

__coverage_tests() {
    if [[ "$SCHEDULED_JOB" != "coverage-tests" ]]; then
        # another scheduled job was triggered
        echo "Not a 'coverage-tests' job. Skipping."
        exit 0
    fi
    bash ./auto_build_all.sh CodeCoverage
}

echo "Start to testing job: {$1}"

JOB_SCOPE=$(echo $1 | cut -f1 -d' ')
JOB_TYPE=$(echo $1 | cut -f2 -d' ')
TARGET_OS=$(echo $1 | cut -f3 -d' ')

export KARABO_CI_TEST_PLATFORM=$TARGET_OS
export KARABO_BROKER_TOPIC="gitlab_ci_$CI_JOB_ID"
export KARABO_PROJECT_DB=existdb_host
export KARABO_PROJECT_DB_PORT=8080
export KARABO_TEST_PROJECT_DB=existdb_host
export KARABO_TEST_PROJECT_DB_PORT=8080
export KARABO_TEST_INFLUXDB_HOST=influxdb_host
export KARABO_TEST_INFLUXDB_PORT=8086
export KARABO_TEST_INFLUXDB_DB=$INFLUXDB_DB

export KARABO_INFLUXDB_DBNAME=$INFLUXDB_DB
# this is for the influxDb /query and /ping endpoint
export KARABO_INFLUXDB_QUERY_USER=$INFLUXDB_USER
export KARABO_INFLUXDB_QUERY_PASSWORD=$INFLUXDB_USER_PASSWORD
export KARABO_INFLUXDB_QUERY_URL=tcp://$KARABO_TEST_INFLUXDB_HOST:$KARABO_TEST_INFLUXDB_PORT
# this is for the influxDb /write endpoint
export KARABO_INFLUXDB_WRITE_USER=$INFLUXDB_ADMIN_USER
export KARABO_INFLUXDB_WRITE_PASSWORD=$INFLUXDB_ADMIN_PASSWORD
export KARABO_INFLUXDB_WRITE_URL=tcp://$KARABO_TEST_INFLUXDB_HOST:$KARABO_TEST_INFLUXDB_PORT

# todo refactor
export KARABO_TEST_INFLUXDB_USER=$INFLUXDB_USER
export KARABO_TEST_INFLUXDB_PASSWORD=$INFLUXDB_USER_PASSWORD
export KARABO_TEST_INFLUXDB_ADMUSER=$INFLUXDB_ADMIN_USER
export KARABO_TEST_INFLUXDB_ADMUSER_PASSWORD=$INFLUXDB_ADMIN_PASSWORD

case "$JOB_SCOPE" in
    deps) __deps_build_tests ;;
    unit) __unit_tests ;;
    integration) __integration_tests ;;
    long) __long_tests ;;
    coverage) __coverage_tests ;;
    *)
        echo "unknown job scope: $JOB_SCOPE"
        exit 1
        ;;
esac
