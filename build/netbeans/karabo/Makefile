#
#  There exist several targets which are by default empty and which can be 
#  used for execution of your targets. These targets are usually executed 
#  before and after some main targets. They are: 
#
#     .build-pre:              called before 'build' target
#     .build-post:             called after 'build' target
#     .clean-pre:              called before 'clean' target
#     .clean-post:             called after 'clean' target
#     .clobber-pre:            called before 'clobber' target
#     .clobber-post:           called after 'clobber' target
#     .all-pre:                called before 'all' target
#     .all-post:               called after 'all' target
#     .help-pre:               called before 'help' target
#     .help-post:              called after 'help' target
#
#  Targets beginning with '.' are not intended to be called on their own.
#
#  Main targets can be executed directly, and they are:
#  
#     build                    build a specific configuration
#     clean                    remove built files from a configuration
#     clobber                  remove all built files
#     all                      build all configurations
#     help                     print help mesage
#	
#  Targets .build-impl, .clean-impl, .clobber-impl, .all-impl, and
#  .help-impl are implemented in nbproject/makefile-impl.mk.
#
#  Available make variables:
#
#     CND_BASEDIR                base directory for relative paths
#     CND_DISTDIR                default top distribution directory (build artifacts)
#     CND_BUILDDIR               default top build directory (object files, ...)
#     CONF                       name of current configuration
#     CND_PLATFORM_${CONF}       platform name (current configuration)
#     CND_ARTIFACT_DIR_${CONF}   directory of build artifact (current configuration)
#     CND_ARTIFACT_NAME_${CONF}  name of build artifact (current configuration)
#     CND_ARTIFACT_PATH_${CONF}  path to build artifact (current configuration)
#     CND_PACKAGE_DIR_${CONF}    directory of package (current configuration)
#     CND_PACKAGE_NAME_${CONF}   name of package (current configuration)
#     CND_PACKAGE_PATH_${CONF}   path to package (current configuration)
#
# NOCDDL

# Environment 
MKDIR=mkdir
CP=cp
CCADMIN=CCadmin
CURRENT_PLATFORM=$(shell uname -s)
EXTERN_WHAT ?= ALL
CONF ?= Debug
PYOPT ?= wheel

# Custom Karabo variables
KARABO = $(CND_BASEDIR)/$(CND_DISTDIR)/$(CONF)/$(CND_PLATFORM_$(CONF))
EXTERN_DIR ?= $(CND_BASEDIR)/../../../extern
EXTERN_INSTALL_DIR = $(CND_PLATFORM_$(CONF))
EXTERN_DISTDIR = $(EXTERN_DIR)/$(EXTERN_INSTALL_DIR)
EXTERN_BUNDLE_VERSION ?= 0
EXTERN_BUNDLE_NAME ?= $(EXTERN_INSTALL_DIR)
export PKG_CONFIG_PATH=.

# Sphinx documentation related
#SPHINXOPTS    =
#SPHINXBUILD   = ../extern/GNU-Linux-x86/bin/sphinx-build
#PAPER         =
#BUILDDIR      = .build

# build
build: .build-post

.build-pre:
# Add your pre 'build' code here...

# Make sure the KARABO folder always exists
	@if test ! -d $(KARABO)/bin;     then $(MKDIR) -p $(KARABO)/bin; fi
	@if test ! -d $(KARABO)/include; then $(MKDIR) -p $(KARABO)/include; fi
	@if test ! -d $(KARABO)/lib;     then $(MKDIR) -p $(KARABO)/lib; fi

# Check whether external dependencies are installed, if not build them
# Update: Check performed directly in file: $(EXTERN_DIR)/build.sh
	@$(EXTERN_DIR)/build.sh $(EXTERN_DISTDIR) $(EXTERN_WHAT) || (echo "### Failed to build Extern dependencies... will exit now ###"; exit 1)
	if [ ! -h ${KARABO}/extern ]; then cd $(KARABO); ln -sf ../../../../../../extern/$(EXTERN_INSTALL_DIR) extern; cd -; fi

.build-post: .build-impl
# Create platform-specific copies of the current makefiles generated by NetBeans.
# Option -p relevant: Do not make the copies appear newer than the originals
# since then even a NetBeans build might copy them back (see below).
	$(CP) -fp $(CND_BASEDIR)/nbproject/Makefile-variables.mk $(CND_BASEDIR)/nbproject/Karabo-variables-$(CURRENT_PLATFORM).mk
	$(CP) -fp $(CND_BASEDIR)/nbproject/Makefile-impl.mk $(CND_BASEDIR)/nbproject/Karabo-impl-$(CURRENT_PLATFORM).mk
	$(CP) -fp $(CND_BASEDIR)/nbproject/Makefile-$(CONF).mk $(CND_BASEDIR)/nbproject/Karabo-$(CONF)-$(CURRENT_PLATFORM).mk

# Add your post 'build' code here...
	@if test ! -d $(KARABO)/include/karabo/util;    then $(MKDIR) -p  $(KARABO)/include/karabo/util; fi
	@if test ! -d $(KARABO)/include/karabo/log;     then $(MKDIR) -p  $(KARABO)/include/karabo/log; fi
	@if test ! -d $(KARABO)/include/karabo/pugiXml;     then $(MKDIR) -p  $(KARABO)/include/karabo/pugiXml; fi
	@if test ! -d $(KARABO)/include/karabo/io/h5; then $(MKDIR) -p  $(KARABO)/include/karabo/io/h5; fi
	@if test ! -d $(KARABO)/include/karabo/net;     then $(MKDIR) -p  $(KARABO)/include/karabo/net; fi
	@if test ! -d $(KARABO)/include/karabo/xms;     then $(MKDIR) -p  $(KARABO)/include/karabo/xms; fi
	@if test ! -d $(KARABO)/include/karabo/core;    then $(MKDIR) -p  $(KARABO)/include/karabo/core; fi
	@if test ! -d $(KARABO)/include/karabo/devices;     then $(MKDIR) -p  $(KARABO)/include/karabo/devices; fi
	@$(CP) $(CND_BASEDIR)/../../../src/karabo/util/*.h* $(KARABO)/include/karabo/util
	@$(CP) $(CND_BASEDIR)/../../../src/karabo/log/*.h* $(KARABO)/include/karabo/log
	@$(CP) $(CND_BASEDIR)/../../../src/karabo/pugiXml/*.h* $(KARABO)/include/karabo/pugiXml
	@$(CP) $(CND_BASEDIR)/../../../src/karabo/io/*.h* $(KARABO)/include/karabo/io
	@$(CP) $(CND_BASEDIR)/../../../src/karabo/io/h5/*.h* $(KARABO)/include/karabo/io/h5
	@$(CP) $(CND_BASEDIR)/../../../src/karabo/net/*.h* $(KARABO)/include/karabo/net
	@$(CP) $(CND_BASEDIR)/../../../src/karabo/xms/*.h* $(KARABO)/include/karabo/xms
	@$(CP) $(CND_BASEDIR)/../../../src/karabo/core/*.h* $(KARABO)/include/karabo/core
	@$(CP) $(CND_BASEDIR)/../../../src/karabo/devices/*.h* $(KARABO)/include/karabo/devices
	@$(CP) $(CND_BASEDIR)/../../../src/karabo/*.hpp $(KARABO)/include/karabo
	@echo "### Done building Karabo. ###"

# Force extern re-build
.PHONY: extern clean-extern bundle package install bundle-package bundle-install bundle-clean clean
extern:
	@mkdir -p $(KARABO)
	@$(EXTERN_DIR)/build.sh $(EXTERN_DISTDIR) $(EXTERN_WHAT)
clean-extern:
	rm -rf $(EXTERN_DISTDIR)
	git clean -ffxd $(EXTERN_DIR)/resources
package-extern: extern
	cd $(EXTERN_DIR); tar -zcf $(EXTERN_BUNDLE_NAME)-$(EXTERN_BUNDLE_VERSION).tar.gz $(EXTERN_INSTALL_DIR)

bundle: build
	cd ../karathon; $(MAKE) CONF=$(CONF)
	cd ../deviceServer; $(MAKE) CONF=$(CONF)
	cd ../brokerMessageLogger; $(MAKE) CONF=$(CONF)
	cd ../tools/brokerRates; $(MAKE) CONF=$(CONF)
	cd ../tools/dataLoggerIndex/idxview; $(MAKE) CONF=$(CONF)
	cd ../tools/dataLoggerIndex/idxbuild; $(MAKE) CONF=$(CONF)

# DEPRECATE!
package: bundle-package
	@./.bundle.sh $(CND_DISTDIR) $(CONF) $(CND_PLATFORM_$(CONF)) package $(PYOPT)

# DEPRECATE!
install: bundle-install
	@./.bundle.sh $(CND_DISTDIR) $(CONF) $(CND_PLATFORM_$(CONF)) install $(PYOPT)

bundle-package: bundle
	@./.bundle.sh $(CND_DISTDIR) $(CONF) $(CND_PLATFORM_$(CONF)) package $(PYOPT)

bundle-install: bundle
	@./.bundle.sh $(CND_DISTDIR) $(CONF) $(CND_PLATFORM_$(CONF)) install $(PYOPT)

bundle-clean: clean
	cd ../karathon; $(MAKE) clean CONF=$(CONF)
	cd ../deviceServer; $(MAKE) clean CONF=$(CONF)
	cd ../integrationTests; $(MAKE) clean CONF=$(CONF)
	cd ../cppLongTests; $(MAKE) clean CONF=$(CONF)
	cd ../brokerMessageLogger; $(MAKE) clean CONF=$(CONF)
	cd ../tools/brokerRates; $(MAKE) clean CONF=$(CONF)
	cd ../tools/dataLoggerIndex/idxview; $(MAKE) clean CONF=$(CONF)
	cd ../tools/dataLoggerIndex/idxbuild; $(MAKE) clean CONF=$(CONF)

# clean
clean: .clean-post

.clean-pre:
# Add your pre 'clean' code here...

.clean-post: .clean-impl
# Add your post 'clean' code here...


# clobber
clobber: .clobber-post

.clobber-pre:
# Add your pre 'clobber' code here...

.clobber-post: .clobber-impl
# Add your post 'clobber' code here...


# all
all: .all-post

.all-pre:
# Add your pre 'all' code here...

.all-post: .all-impl
# Add your post 'all' code here...


# build tests
build-tests: .build-tests-post

.build-tests-pre:
# Add your pre 'build-tests' code here...

.build-tests-post: .build-tests-impl
# Add your post 'build-tests' code here...


# run tests
test: .test-post

.test-pre:
# Add your pre 'test' code here...
	@if test ! -d testresults;    then $(MKDIR) -p  testresults; fi

.test-post: .test-impl
# Add your post 'test' code here...


# help
help: .help-post

.help-pre:
# Add your pre 'help' code here...

.help-post: .help-impl
# Add your post 'help' code here...

# The following three targets are created by NetBeans. If we build using the
# command line, we copy back the platform-specific copies generated by the
# latest NetBeans build on this platform, otherwise they exist already.
# Copy option -p is relevant, otherwise the copies might look newer than a
# changed Karabo-*-$(CURRENT_PLATFORM), received from git update.
nbproject/Makefile-impl.mk: nbproject/Karabo-impl-$(CURRENT_PLATFORM).mk
	$(CP) -fp nbproject/Karabo-impl-$(CURRENT_PLATFORM).mk nbproject/Makefile-impl.mk

nbproject/Makefile-variables.mk: nbproject/Karabo-variables-$(CURRENT_PLATFORM).mk
	$(CP) -fp nbproject/Karabo-variables-$(CURRENT_PLATFORM).mk nbproject/Makefile-variables.mk

nbproject/Makefile-$(CONF).mk: nbproject/Karabo-$(CONF)-$(CURRENT_PLATFORM).mk
	$(CP) -fp nbproject/Karabo-$(CONF)-$(CURRENT_PLATFORM).mk nbproject/Makefile-$(CONF).mk

# The following two includes lead to warnings from make ("No such file or
# directory") when compiling the first time after a fresh checkout
# (see https://www.gnu.org/software/make/manual/html_node/Include.html).
# But then it will create the files according to the above rules. In fact, even
# if the files were not missing, they might need to be recreated before used!

# include project implementation makefile
include nbproject/Makefile-impl.mk

# include project make variables
include nbproject/Makefile-variables.mk

# nbproject/Makefile-$(CONF).mk is not included here, but is used in all
# the .*-impl targets used above (and defined in Makefile-impl.mk).
# To take care that it exists before the .validate-impl target in
# Makefile-impl.mk checks that, we add it here as a prerequisite.
# Since this target is really internal to the NetBeans generated
# Makefile-impl.mk, this should be considered a HACK around the fact that there
# the *-pre targets appear as prerequisites in parallel with .validate.impl,
# i.e. we cannot simply make the .*-pre targets depend on Makefile-$(CONF).mk
# here. That is because then the check might still be executed before the
# .*-pre target that leads to the creation of Makefile-$(CONF).mk.
# Hope that people reading this could follow...
.validate-impl: nbproject/Makefile-$(CONF).mk
