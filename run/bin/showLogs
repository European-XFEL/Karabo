#! /bin/bash
####################################################################################
# author: GF Jul 21st, 2015

logfile=device-server.log
# Look for options:
if [ ${#@} -gt 0 ]; then
    # print help message if first argument asks for help
    if [ $1 == "-h" ] || [ $1 == "-help" ] || [ $1 == "--help" ]; then
	echo
	echo "$0 - show logs of servers"
	echo
	echo "  $0 [-h|-help|--help] [arguments]"
	echo
	echo "If any of the help options is given, print this help."
	echo
	echo "Otherwise open xterms to show the files '${logfile}' in the"
	echo "directories '\$KARABO_SERVERS/*', scrolled to their ends."
        echo "\$KARABO_SERVERS has to be defined in the allInfo file."
	echo
	echo "Without arguments, show all these files. With arguments, show"
	echo "only those files whose names contain one of the arguments."
	echo
	echo "EXAMPLES:"
        echo "(1) Show all logs:"
	echo "$0"
        echo
        echo "(2) Show only GUI and project server logs:"
	echo "$0 guiServ projectSer"
	echo
	exit 0
    fi
fi


# Make sure the script runs in this directory
scriptDir=$(dirname `[[ $0 = /* ]] && echo "$0" || echo "$PWD/${0#./}"`)
cd ${scriptDir}
if [ $? -ne 0 ]; then
    echo "ERROR Could not change directory to ${scriptDir}"
    exit 1;
fi

if [ ! -e "allInfo" ]; then
    cp allInfo.orig allInfo
fi

# required allInfo file
foo=allInfo
test -r $foo || { echo "ERROR cannot read definitions file $foo";  exit 1;}

# required environmental
source allInfo
test -n "$KARABO_SERVERS" || { echo "ERROR KARABO_SERVERS variable does not exist"; exit 3;}

declare -i count=0
for log in $KARABO_SERVERS/*/$logfile
do
    showThis=0
    if [ ${#@} -eq 0 ]; then
	# no argument: show all logs
	showThis=1
    else
        # there are arguments: loop and show if at least one is matching
        for arg in $@; do
	    if [[ $log =~ $arg ]]; then
                # i.e. log contains argument
		showThis=1
		break
	    fi
	done
    fi
    if [ $showThis -eq 1 ]; then
	# less +G  => directly scroll to the end
	xterm -T "${HOSTNAME}: less ${log}" -e bash -c "less +G $log" &
	count+=1
    fi
done

if [ $count -eq 0 ]; then
    echo "No logs matching any of the patterns '$@'."
fi

exit 0
