#! /bin/bash
####################################################################################
# allStart starts the applications defined in ALLINFO in separate xterms
# additional information (including arguements) are described in ./allInfo
# author: CY 18.12.2012

# Make sure the script runs in this directory
scriptDir=$(dirname `[[ $0 = /* ]] && echo "$0" || echo "$PWD/${0#./}"`)
cd ${scriptDir}
if [ $? -ne 0 ]; then
    echo "ERROR Could not change directory to ${scriptDir}"
    exit 1;
fi

# Create a copy of the original if not done yet
if [ ! -e "allInfo" ]; then
    cp allInfo.orig allInfo
fi


# check startup
./allCheck
check=$?

if [ -n "$RESTART" ] && [ "$check" = "13" ]; then
    echo
    echo "INFO restarting any missing processes"
elif  [ -n "$RESTART" ] && [ "$check" = "0" ]; then
    echo
    echo "INFO restart all processes"    
    # Clean old pid file
    mv .allStart.pid .allStart.pid.last 2> /dev/null
elif [ "$check" != "0" ]; then 
    echo
    echo "ERROR xterms running cannot allStart"
    echo
    exit 1;
else
    # Clean old pid file
    mv .allStart.pid .allStart.pid.last 2> /dev/null
fi


# ALLINFO content checking is done in allCheck 
source ./allInfo

# store args for possible restart
if [ "$check" = "0" ]; then
    echo "args: $0 $@" >> .allInfo 
fi

for key in "${!ALLINFO[@]}"
do
    value=${ALLINFO[$key]}
    source ./.allParse

    # the match is too indescriminant and fails to identify all cases! Correct solution use pid chain?
    job=$(ps -u $USER -o  pid,ppid,pgrp,user,cmd | grep -v grep | grep $exe | awk '{print $1}')

    if [ -n "$job" ]; then	
        echo "INFO $exe running, not restarting"
    else 
        target=$exe
        title=$exe
        options="-T $title -sb -rightbar -sl $scroll"
	display=""
	if [ -n "$XUSE" ] && [ "$xuse" = "yes" ]; then
	    display="-display $XUSE"
	fi
        if [ "$1" = "-nox" ]; then
            # No xterms should be used
	    echo "INFO Starting: $target $params 2>&1 > /dev/null &"
	    $target $params 2>&1 > /dev/null &
	else
            echo "INFO Starting: xterm $options $display -e $target $params $redirect &"
	    xterm $options $display -e "$target $params $redirect" &
        fi
	# store name and pid of started process
        bg=$!
	# Give the xterm processes time to start and set up their pids
	sleep 0.5 
        echo "key: $exe $!" >> .allInfo 
	echo "$bg" >> .allStart.pid
	cpid=`pgrep -P $bg`
	while [ -n "$cpid" ]; do
	    echo "$cpid" >> .allStart.pid
	    cpid=`pgrep -P $cpid`
	done
	# Sleep as defined in allInfo
	sleep $wait
    fi    
done

exit 0
