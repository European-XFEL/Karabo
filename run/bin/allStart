#! /bin/bash
####################################################################################
# author: CY 18.12.2012

# print help message if first argument asks for help
nox="false"  #  i.e. _do_ use separate xterms
if [ ${#@} -gt 0 ]; then
    if [ $1 == "-h" ] || [ $1 == "-help" ] || [ $1 == "--help" ]; then
        echo
        echo "allStart - start applications as defined in allInfo file"
        echo
        echo "  allStart [-h|-help|--help|-nox|--nox]"
        echo
        echo "If any of the help options is given, print this help."
        echo
        echo "The applications to be started are defined in the file 'allInfo'"
        echo "that lies in the same directory as the allStart script."
        echo "If no allInfo file is there, one is created as a copy of"
        echo "allInfo.org. See the comments in there for more details."
        echo
        echo "By default, all applications are started in their own xterm"
        echo "windows that display their outputs."
        echo "If any of the 'no X' options (-nox|--nox) is given, all"
        echo "applications are started within the calling shell and their"
        echo "output is swallowed."
        echo "Using the 'showLogs' script, server log files can nevertheless"
        echo "be investigated."
        echo
        exit 0
    elif [ $1 == "-nox" ] || [ $1 == "--nox" ]; then
        nox="true"
        # shift  # must not remove from argument list to keep it in .allInfo
    else
        echo "Unknown option '$1', please consult help: $0 --help"
        exit 1
    fi
fi

# Make sure the script runs in this directory
scriptDir=$(dirname `[[ $0 = /* ]] && echo "$0" || echo "$PWD/${0#./}"`)
cd ${scriptDir}
if [ $? -ne 0 ]; then
    echo "ERROR Could not change directory to ${scriptDir}"
    exit 1;
fi

# Create a copy of the original if not done yet
if [ ! -e "allInfo" ]; then
    cp allInfo.orig allInfo
fi


# check startup
./allCheck
check=$?

if [ -n "$RESTART" ] && [ "$check" = "13" ]; then
    echo
    echo "INFO restarting any missing processes"
elif  [ -n "$RESTART" ] && [ "$check" = "0" ]; then
    echo
    echo "INFO restart all processes"    
    # Clean old pid file
    mv .allStart.pid .allStart.pid.last 2> /dev/null
elif [ "$check" != "0" ]; then 
    echo
    echo "ERROR processes are running, cannot allStart"
    echo
    exit 1;
else
    # Clean old pid file
    mv .allStart.pid .allStart.pid.last 2> /dev/null
fi


# ALLINFO content checking is done in allCheck 
source ./allInfo

# store args for possible restart
if [ "$check" = "0" ]; then
    echo "args: $0 $@" >> .allInfo 
fi

for key in "${!ALLINFO[@]}"
do
    value=${ALLINFO[$key]}
    source ./.allParse

    # the match is too indescriminant and fails to identify all cases! Correct solution use pid chain?
    job=$(ps -u $USER -o  pid,ppid,pgrp,user,cmd | grep -v grep | grep $exe | awk '{print $1}')

    if [ -n "$job" ]; then	
        echo "INFO $exe running, not restarting"
    else 
        target=$exe
        # on CentOS, HOSTNAME contains domain => strip off from 1st dot
        #title="\"${HOSTNAME%%.*}: $exe\""
        title="${HOSTNAME%%.*}:$exe"
        options="-T $title -sb -rightbar -sl $scroll -hold"
	display=""
	if [ -n "$XUSE" ] && [ "$xuse" = "yes" ]; then
	    display="-display $XUSE"
	fi
        if [ "$nox" == "true" ]; then
            # No xterms should be used, disregard stdout and stderr
            echo "INFO Starting: $target $params > /dev/null 2>&1 &"
            $target $params > /dev/null 2>&1 &
        else
            echo "INFO Starting: xterm $options $display -e bash -c \"$target $params\" &"
            xterm $options $display -e bash -c "$target $params" &
        fi
	# store name and pid of started process
        bg=$!
	# Give the xterm processes time to start and set up their pids
	sleep 0.5 
        echo "key: $exe $!" >> .allInfo 
	# put pid and its child pids in one line of file
	echo -n "$bg " >> .allStart.pid
	cpid=`pgrep -P $bg`
	while [ -n "$cpid" ]; do
	    echo -n "$cpid " >> .allStart.pid
	    cpid=`pgrep -P $cpid`
	done
        # now add newline
        echo >> .allStart.pid
        # Sleep as defined in allInfo
        sleep $wait
    fi    
done

exit 0
