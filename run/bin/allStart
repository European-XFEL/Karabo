#! /bin/bash
####################################################################################
# allStart starts the applications defined in ALLINFO in separate xterms
# additional information (including arguements) are described in ./allInfo
# author: CY 18.12.2012

# check startup
./allCheck
check=$?

if [ -n "$RESTART" ] && [ "$check" = "13" ]; then
    echo "INFO restart any missing xterms"
elif  [ -n "$RESTART" ] && [ "$check" = "0" ]; then
    echo "INFO restart all xterms"
elif [ "$check" != "0" ]; then 
    echo "ERROR xterms running cannot allStart"
    exit 1;
fi;

# cleanup old xml files
./allClean

# ALLINFO content checking is done in allCheck 
source ./allInfo

# store args for possible restart
if [ "$check" = "0" ]; then
    echo "args: $0 $@" >> .allInfo 
fi

for key in "${!ALLINFO[@]}"
do
    value=${ALLINFO[$key]}
    source ./.allParse

# the match is too indescriminant and fails to identify all cases! Correct solution use pid chain?
    job=$(ps -u $USER -o  pid,ppid,pgrp,user,cmd | grep -v grep | grep $match | awk '{print $1}')

    if [ -n "$job" ]; then
        echo "INFO key $key running, not restarting"
    elif [ "$name" = "gui" ] && [ "$NOGUI" = "true" ]; then
        echo "INFO NOGUI environmental is 'true', gui not started"
    else 
        target=$dir/$exe
        title=${dir##[./]*/}/$exe
        options="-T $title -sb -rightbar -sl $scroll"
	display=""
	if [ -n "$XUSE" ] && [ "$xuse" = "yes" ]; then
	    display="-display $XUSE"
	fi
        if [ -n "$1" ]; then
            arg=$1
            stem=$name
            if [ "${arg:0:1}" = "-" ]; then
                foo=$stem$key$arg
            elif [ "${arg#${arg%?}}" = "-" ]; then
	        foo=$arg$stem$key
            else
                foo=$stem$key"-"$arg
            fi
            if [ -w $foo ]; then
                append="-a" 
                echo "#!#! allStart $(date +%Y%m%d.%H%M%S)" >> $foo 
            fi
            redirect="2>&1 | tee $append $foo"
        fi
        echo "INFO starting: xterm $options $display -e $target $params $redirect &"
# start xterm and store name and pid of started xterm
        xterm $options $display -e "$target $params $redirect" &
        bg=$!
        echo "key: $name $!" >> .allInfo 
# wait before starting next xterm
        sleep $wait 
    fi
done
exit 0
