#
# Copyright (C) European XFEL GmbH Hamburg. All rights reserved.
# 

This README file gives instructions on how to build the karabo framework.

--------------------------------------------------------------------------------------------------------------------------------
(1) Important
--------------------------------------------------------------------------------------------------------------------------------

The ultimate reference for anything related to Karabo is the Alfresco site under:

https://docs.xfel.eu/share/page/site/KaraboFramework/dashboard

The supported OS are: 
    SL 6
    Fedora 16/17
    Ubuntu 10.04 LTS
    Ubuntu 11.x
    Ubuntu 12.04 LTS
    MacOS 10.6 (Snow Leopard)
    MacOS 10.7 (

Other distributions like Fedora or Suse may still work.

---------------------------------------------------------------------------------------------------------------------------------
(2) Building
---------------------------------------------------------------------------------------------------------------------------------

    ### Building from command-line ###

    The quickest way to build the Karabo framework is by using the auto_build_all.sh script. Simply execute:
    
    ./auto_build_all.sh

    and get informed how to use this script.

---------------------------------------------------------------------------------------------------------------------------------
(3) Structure of files and sources
---------------------------------------------------------------------------------------------------------------------------------

    src/
    
        In this directory you will find all Karabo sources. They are cleanly split from any build instructions.
        The next hierarchy level reflects the individual projects which are part of the KaraboFramework.

        brokerMessageLogger/
    
            Contains sources in C++ and reflects an application that allows investigating all messages that are crossing the broker.

        deviceServer/
    
            Contains C++ sources, and builds the generic DeviceServer application, which can load Device plugins into the distributed system. 

        karabo/

            The central project, Karabo's backbone in C++. Its directory structure is reflected into the namespaces and include hierarchy.

        karathon/

            C++ binding layer to make karabo available to the Python programming language.

        karathonTest/

            The name says it all.

        pythonCli/

            Native python code depending on karathon which implements the command line interface for Karabo.

        pythonGui/

            Native python code using PyQt4 and karathon to implement the graphical user interface of Karabo.

        pythonKarabo/

            Native python code for some core elements of Karabo which deserve a native python re-write instead of a C++ binding.

	serverControl/

	    Tool to configure and manage karabo (install, upgrade, ...) installation

    build/
    
        Contains all build instructions and tools to generate libraries/executables and software bundles.
        The three targeted architectures (Linux, MacOS and Windows) are separated into two radically different build systems.

        netbeans/
                
            The inherent (makefile-based) build system of the NetBeans IDE is used for Linux and MacOS platforms.

            <projects>/                

                Each directory reflects a regular NetBeans project and can be operated directly via NetBeans. The projects reflect
                those mentioned in the src/ directory (see above) one-to-one. NetBeans build system was extended to support also
                builds from commandline. Simply type:
    
                    make CONF=Debug 
                or 
                    make CONF=Release 

                for debug or release configuration, respectively.
                HINT: Append the "-j" option to either build command for high-speed parallel build

                The (central) karabo makefile supports some extra targets to trigger creation of a software bundle,
                which is the way we distribute Karabo. A self-extracting install-script for Karabo can for example be created by:

                    make CONF=Debug bundle-package
                or 
                    make CONF=Release bundle-package


		If you are going to work at the same time on the Karabo framework and some packages (plugins) for Karabo you should
		finalize your framework codings with a:
		
		    make bundle-install

	        Which creates a ready to use bundle under 
		
		    package/<Configuration>/<OS>/<Version>/<Arch>/karabo
		    
		and also updates the $HOME/.karabo/karaboFramework file pointing to this "local" bundle.
		

        visualStudio/
            
            The inherent (makefile-based) build system of the MS VisualStudio IDE is used for Windows platforms.

                    <<<< The windows port is not yet finished, please come back later! >>>>
            
        extern/
            
            Any third-party sources which are compiled and added to the software bundle are here.
    
            resources/

                Contains the sources or tarballs of the different dependencies
        
            <platform>/
                
                Organized collection of the installed dependencies (acts as INSTALL_PREFIX)


---------------------------------------------------------------------------------------------------------------------------------
(4) Thank you for using Karabo!
---------------------------------------------------------------------------------------------------------------------------------
