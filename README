#
# Copyright (C) European XFEL GmbH Hamburg. All rights reserved.
# 

This README file gives instructions on how to build the karabo framework.

--------------------------------------------------------------------------------------------------------------------------------
(1) Important
--------------------------------------------------------------------------------------------------------------------------------

The ultimate reference for anything related to Karabo is the Alfresco site under:

https://docs.xfel.eu/share/page/site/KaraboFramework/dashboard

The supported OS are: 
    SL 6
    Fedora 16/17
    Ubuntu 10.04 LTS
    Ubuntu 11.x
    Ubuntu 12.04 LTS
    MacOS 10.6 (Snow Leopard)
    MacOS 10.7 (

Other distributions like Fedora or Suse may still work.

---------------------------------------------------------------------------------------------------------------------------------
(2) Building
---------------------------------------------------------------------------------------------------------------------------------

    ### Building from command-line ###

    The quickest way to build the Karabo framework is by using the auto_build_all.sh script. Simply execute:
    
    ./auto_build_all.sh

    and get informed how to use this script.

---------------------------------------------------------------------------------------------------------------------------------
(3) Structure of files and sources
---------------------------------------------------------------------------------------------------------------------------------
    
    All Karabo sources are split from the building tools. You find all sources under the src directory.

    The build information of Karabo and its subprojects are located in the build folder. Under any Linux or MacOS platform navigate to:

        cd build/netbeans

    you will find the (central) karabo project and its side-projects (c++ and python based) in this folder. You can build any project via commandline
    or using NetBeans (our standard IDE). On the commandline you will find regular makefiles, which you can use for example like this:

        make CONF=Debug

    or 

        make CONF=Release 


    for debug of release configuration, respectively.
    HINT: Append the "-j" option to either build command for high-speed parallel build
    NOTE: Under MacOSX use the variables Debug-MacOSX or Release-MacOSX, respectively

    The (central) karabo makefile supports some extra targets to trigger creation of a software bundle which is the way we distribute Karabo.

    A self-extracting install-script for Karabo can for example be created by:

        make CONF=Debug bundle-package

    or 
    
        make CONF=Release bundle-package
    