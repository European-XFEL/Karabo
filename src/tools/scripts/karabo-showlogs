#! /bin/bash
####################################################################################
# author: GF Jul 21st, 2015

logFilePattern="device-*.log"

# Look for options:
if [ ${#@} -gt 0 ]; then
    # print help message if first argument asks for help
    if [ $1 == "-h" ] || [ $1 == "--help" ]; then
    echo
    echo "$0 - show logs of servers and (bound Python) devices"
    echo
    echo "  $0 [-h|--help|-a|--all] [arguments]"
    echo
    echo "If any of the help options is given, print this help."
    echo
    echo "Otherwise open one xterm per log file. The xterm will show the newest of the rolling"
    echo "log files '${logFilePattern}' in the directory, scrolled to its end."
    echo "\$KARABO_SERVERS has to be defined in the config file."
    echo "Note that for C++ servers there is one log file only whereas for bound"
    echo "Python servers there is one for the server and one for each device"
    echo "started by the server."
    echo "If one of the -a|--all options is given, do not only show the"
    echo "most recent log file, but also older ones kept as backup."
    echo
    echo "With arguments, show only logs of server directories whose names"
    echo "contain one of the arguments."
    echo
    echo "EXAMPLES:"
    echo "(1) Show all logs:"
    echo "$0"
    echo
    echo "(2) Show only GUI and cpp server logs, but include the old ones:"
    echo "$0 -a guiServ cpp"
    echo
    exit 0
    elif [ $1 == "-a" ] || [ $1 == "--all" ]; then
        logFilePattern="$logFilePattern*"
        shift  # remove from  argument list
    fi
fi

# Make sure Karabo is installed
if [ -z $KARABO ]; then
  echo
  echo "\$KARABO is not defined. Make sure you have sourced the activate script for the Karabo Framework which you would like to use."
  exit 1
fi

cd $KARABO/var/log
if [ $? -ne 0 ]; then
    exit 1
fi

files=''
if [ ${#@} -eq 0 ]; then
    files=$(find . -name $logFilePattern) 
else
    for arg in $@; do
        if [ $regex ]; then
            regex=${regex}'\|'${arg}
        else
            regex=$arg
        fi
    done
    files=$(find . -name $logFilePattern | grep $regex)
fi

declare -i count=0
for log in $files; do
    # less +G  => directly scroll to the end,
    # e.g. on CentOS7, HOSTNAME contains domain => strip off from 1st dot
    xterm -T "${HOSTNAME%%.*} - ${log#*./}" -e bash -c "less +G $log" &
    count+=1
done

if [ $count -eq 0 ]; then
    echo "No server directories matching any of the patterns '$@'"
    echo "or no logs in them."
fi

exit 0
