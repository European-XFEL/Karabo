#! /bin/bash
####################################################################################
# author: GF Jul 21st, 2015

logFilePattern="device-*.log"
logFilePatternWithOld="$logFilePattern*"

all=
# Look for options:
if [ ${#@} -gt 0 ]; then
    # print help message if first argument asks for help
    if [ $1 == "-h" ] || [ $1 == "-help" ] || [ $1 == "--help" ]; then
	echo
	echo "$0 - show logs of servers and (bound Python) devices"
	echo
	echo "  $0 [-h|-help|--help|-a|-all|--all] [arguments]"
	echo
	echo "If any of the help options is given, print this help."
	echo
	echo "Otherwise open one xterm per log file in the directories matching"
	echo "'\$KARABO_SERVERS/*'. The xterm will show the newest of the rolling"
	echo "log files '${logFilePattern}' in the directory, scrolled to its end."
        echo "\$KARABO_SERVERS has to be defined in the allInfo file."
        echo "Note that for C++ servers there is one log file only whereas for bound"
        echo "Python servers there is one for the server and one for each device"
        echo "started by the server."
	echo "If one of the -a|-all|--all options is given, do not only show the"
	echo "most recent log file, but also older ones kept as backup."
	echo
	echo "With arguments, show only logs of server directories whose names"
	echo "contain one of the arguments."
	echo
	echo "EXAMPLES:"
        echo "(1) Show all logs:"
	echo "$0"
        echo
        echo "(2) Show only GUI and project server logs, but include the old ones:"
        echo "$0 -a guiServ projectSer"
	echo
	exit 0
    elif [ $1 == "-a" ] || [ $1 == "-all" ] || [ $1 == "--all" ]; then
	all="true"
        shift  # remove from  argument list
    fi
fi


# Make sure the script runs in this directory
scriptDir=$(dirname `[[ $0 = /* ]] && echo "$0" || echo "$PWD/${0#./}"`)
cd ${scriptDir}
if [ $? -ne 0 ]; then
    echo "ERROR Could not change directory to ${scriptDir}"
    exit 1;
fi

if [ ! -e "allInfo" ]; then
    cp allInfo.orig allInfo
fi

# required allInfo file
foo=allInfo
test -r $foo || { echo "ERROR cannot read definitions file $foo";  exit 1;}

# required environmental
source allInfo
test -n "$KARABO_SERVERS" || { echo "ERROR KARABO_SERVERS variable does not exist"; exit 3;}

declare -i count=0
for serverDir in $KARABO_SERVERS/*; do
    showThis=0
    if [ ${#@} -eq 0 ]; then
        # no argument: show logs of all servers
        showThis=1
    else
        # there are arguments: loop and show if at least one is matching
        for arg in $@; do
            if [[ $serverDir =~ $arg ]]; then
                # i.e. log contains argument
                showThis=1
                break
            fi
        done
    fi
    if [ $showThis -eq 1 ]; then
	if [ $all ]; then
            pattern=$serverDir/$logFilePatternWithOld
        else
            # This pattern concerns always the newest log files.
            pattern=$serverDir/$logFilePattern
        fi
	for log in $pattern; do
            # less +G  => directly scroll to the end,
            # e.g. on CentOS7, HOSTNAME contains domain => strip off from 1st dot
	    xterm -T "${HOSTNAME%%.*}: less ${log}" -e bash -c "less +G $log" &
	    count+=1
	done
    fi
done

if [ $count -eq 0 ]; then
    echo "No server directories matching any of the patterns '$@'"
    echo "or no logs in them."
fi

exit 0
