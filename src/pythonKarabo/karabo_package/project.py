
#############################################################################
# Author: <kerstin.weger@xfel.eu>
# Created on September 10, 2014
# Copyright (C) European XFEL GmbH Hamburg. All rights reserved.
#############################################################################


"""
This module contains a class which represents project related datastructures.
"""

__all__ = ["Project", "ProjectConfiguration"]


from karabo.hash import XMLParser, XMLWriter
from karabo.hashtypes import StringList

import hashlib
import os.path
import urllib.request, urllib.error, urllib.parse
import urllib.parse
from zipfile import ZipFile, ZIP_DEFLATED


class Project(object):

    DEVICES_LABEL = "Devices"
    SCENES_LABEL = "Scenes"
    MACROS_LABEL = "Macros"
    MONITORS_LABEL = "Monitors"
    RESOURCES_LABEL = "Resources"
    CONFIGURATIONS_LABEL = "Configurations"

    PROJECT_KEY = "project"
    DEVICES_KEY = "devices"
    SCENES_KEY = "scenes"
    MACROS_KEY = "macros"
    MONITORS_KEY = "monitors"
    RESOURCES_KEY = "resources"
    CONFIGURATIONS_KEY = "configurations"
    
    PROJECT_SUFFIX = "krb"


    def __init__(self, filename):
        super(Project, self).__init__()

        self.version = 1
        self.filename = filename

        # List of devices
        self.devices = []
        # Map for {deviceId, [ProjectConfiguration]}
        self.configurations = dict()
        self.macros = []
        self.resources = { }
        self.monitors = []


    @property
    def name(self):
        r = os.path.basename(self.filename)
        if r.endswith(".krb"):
            return r[:-4]
        else:
            return r


    def addDevice(self, device):
        self.devices.append(device)
        device.project = self


    def insertDevice(self, index, device):
        self.devices.insert(index, device)
        device.project = self


    def addConfiguration(self, deviceId, configuration):
        if deviceId in self.configurations:
            self.configurations[deviceId].append(configuration)
        else:
            self.configurations[deviceId] = [configuration]


    def addResource(self, category, data):
        """add the data into the resources of given category

        this returns a URL under which the resource can be opened again"""
        with ZipFile(self.filename, mode="a", compression=ZIP_DEFLATED) as zf:
            digest = hashlib.sha1(data).hexdigest()
            zf.writestr("resources/{}/{}".format(category, digest), data)
        self.resources.setdefault(category, StringList()).append(digest)
        return "project:resources/{}/{}".format(category, digest)


    def getURL(self, url):
        """retrieve the URL and return its content

        This method retrieves the content for the URL, where the URL might
        have been generated by addResource, or point to a local file or some
        HTTP site."""
        u = urllib.parse.urlparse(url)
        if u.scheme == "project":
            with ZipFile(self.filename, mode="r") as zf:
                return zf.read(u.path)
        else:
            return urllib.request.urlopen(url).read()


    def getDevices(self, deviceIds):
        """
        This function returns a list of all associated devices for the given
        \deviceIds.
        """
        devices = []
        for d in self.devices:
            if d.deviceId in deviceIds:
                devices.append(d)
        return devices


    def remove(self, object):
        """
        The \object should be removed from this project.
        
        Returns \index of the object in the list.
        """
        raise NotImplementedError("Project.remove")


    def unzip(self):
        """read the zip file zf. The file must already be open for reading."""
        with ZipFile(self.filename, "r") as zf:
            data = zf.read("{}.xml".format(self.PROJECT_KEY))
            projectConfig = XMLParser().read(data)

            self.version = projectConfig[self.PROJECT_KEY, "version"]

            self.parse(projectConfig[self.PROJECT_KEY], zf)


    def parse(self, projectConfig, zf):
        for d in projectConfig[self.DEVICES_KEY]:
            serverId = d.get("serverId")

            filename = d.get("filename")
            data = zf.read("{}/{}".format(self.DEVICES_KEY, filename))
            assert filename.endswith(".xml")
            filename = filename[:-4]

            for classId, config in XMLParser().read(data).items():
                device = self.Device(serverId, classId, filename,
                                     d.get("ifexists"))
                device.initConfig = config
                break # there better be only one!
            self.addDevice(device)
        for deviceId, configList in projectConfig[
                            self.CONFIGURATIONS_KEY].items():
            # Vector of hashes
            for c in configList:
                filename = c.get("filename")
                configuration = ProjectConfiguration(self, filename)
                data = zf.read("{}/{}".format(self.CONFIGURATIONS_KEY,
                                              filename))
                configuration.fromXml(data)
                self.addConfiguration(deviceId, configuration)
        self.resources = {k: v for k, v in
                          projectConfig["resources"].items()}


    def instantiate(self, deviceIds):
        """
        This function instantiates the list of \devices.
        """
        raise NotImplementedError("Project.instantiate")


    def instantiateAll(self):
        """
        This function instantiates all project devices.
        """
        raise NotImplementedError("Project.instantiateAll")


    def shutdown(self, deviceIds):
        """
        This function shuts down the list of \devices.
        """
        raise NotImplementedError("Project.shutdown")


    def shutdownAll(self):
        """
        This function shuts down all project devices.
        """
        raise NotImplementedError("Project.shutdownAll")


class ProjectConfiguration(object):

    def __init__(self, project, name, hash=None):
        super(ProjectConfiguration, self).__init__()
        
        # Reference to the project this configuration belongs to
        self.project = project

        if name.endswith(".xml"):
            self.filename = name
        else:
            self.filename = "{}.xml".format(name)
        
        self.hash = hash


    def fromXml(self, xmlString):
        """
        This function loads the corresponding XML file of this configuration.
        """
        self.hash = XMLParser().read(xmlString)


    def toXml(self):
        """
        This function returns the configurations' XML file as a string.
        """
        return XMLWriter().write(self.hash)


class BaseDevice(object):


    def __init__(self, serverId, classId, deviceId, ifexists):
        self.serverId = serverId
        self.classId = classId

        self.filename = "{}.xml".format(deviceId)
        self.ifexists = ifexists
        
        self.project = None

