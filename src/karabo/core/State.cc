#include "State.hh"

namespace karabo {
    namespace core {
        
#define KARABO_INIT_BASE_STATE(X) const State  State::X(#X, NULL);
        
        KARABO_INIT_BASE_STATE(UNKNOWN)
        KARABO_INIT_BASE_STATE(KNOWN)
        KARABO_INIT_BASE_STATE(INIT)

#undef KARABO_INIT_BASE_STATE                    
                    
#define KARABO_INIT_FIXED_STATE(X,Y) const State State::X(#X, &Y);
                    
        KARABO_INIT_FIXED_STATE(DISABLED, KNOWN)

        KARABO_INIT_FIXED_STATE(ERROR, KNOWN)

        KARABO_INIT_FIXED_STATE(NORMAL, KNOWN)

        KARABO_INIT_FIXED_STATE(STATIC, NORMAL)

        KARABO_INIT_FIXED_STATE(CHANGING, NORMAL)

        KARABO_INIT_FIXED_STATE(PASSIVE, STATIC)

        KARABO_INIT_FIXED_STATE(ACTIVE, STATIC)

        KARABO_INIT_FIXED_STATE(DECREASING, CHANGING)

        KARABO_INIT_FIXED_STATE(INCREASING, CHANGING)

        /**
         *
         */

        KARABO_INIT_FIXED_STATE(INTERLOCKED, DISABLED)

        KARABO_INIT_FIXED_STATE(COOLED, ACTIVE)

        KARABO_INIT_FIXED_STATE(HEATED, ACTIVE)

        KARABO_INIT_FIXED_STATE(EVACUATED, ACTIVE)

        KARABO_INIT_FIXED_STATE(CLOSED, ACTIVE)

        KARABO_INIT_FIXED_STATE(ON, ACTIVE)

        KARABO_INIT_FIXED_STATE(EXTRACTED, ACTIVE)

        KARABO_INIT_FIXED_STATE(STARTED, ACTIVE)

        KARABO_INIT_FIXED_STATE(LOCKED, ACTIVE)

        KARABO_INIT_FIXED_STATE(ENGAGED, ACTIVE)


        KARABO_INIT_FIXED_STATE(WARM, PASSIVE)

        KARABO_INIT_FIXED_STATE(COLD, PASSIVE)

        KARABO_INIT_FIXED_STATE(PRESSURIZED, PASSIVE)

        KARABO_INIT_FIXED_STATE(OPENED, PASSIVE)

        KARABO_INIT_FIXED_STATE(OFF, PASSIVE)

        KARABO_INIT_FIXED_STATE(INSERTED, PASSIVE)

        KARABO_INIT_FIXED_STATE(STOPPED, PASSIVE)

        KARABO_INIT_FIXED_STATE(UNLOCKED, PASSIVE)

        KARABO_INIT_FIXED_STATE(DISENGAGED, PASSIVE)


        KARABO_INIT_FIXED_STATE(ROTATING, CHANGING)

        KARABO_INIT_FIXED_STATE(MOVING, CHANGING)

        KARABO_INIT_FIXED_STATE(SWITCHING, CHANGING)


        KARABO_INIT_FIXED_STATE(HEATING, INCREASING)

        KARABO_INIT_FIXED_STATE(MOVING_RIGHT, INCREASING)

        KARABO_INIT_FIXED_STATE(MOVING_UP, INCREASING)

        KARABO_INIT_FIXED_STATE(MOVING_FORWARD, INCREASING)

        KARABO_INIT_FIXED_STATE(ROTATING_CLK, INCREASING)

        KARABO_INIT_FIXED_STATE(RAMPING_UP, INCREASING)

        KARABO_INIT_FIXED_STATE(INSERTING, INCREASING)

        KARABO_INIT_FIXED_STATE(STARTING, INCREASING)

        KARABO_INIT_FIXED_STATE(FILLING, INCREASING)

        KARABO_INIT_FIXED_STATE(ENGAGING, INCREASING)

        KARABO_INIT_FIXED_STATE(SWITCHING_ON, INCREASING)


        KARABO_INIT_FIXED_STATE(COOLING, DECREASING)

        KARABO_INIT_FIXED_STATE(MOVING_LEFT, DECREASING)

        KARABO_INIT_FIXED_STATE(MOVING_DOWN, DECREASING)

        KARABO_INIT_FIXED_STATE(MOVING_BACK, DECREASING)

        KARABO_INIT_FIXED_STATE(ROTATING_CNTCLK, DECREASING)

        KARABO_INIT_FIXED_STATE(RAMPING_DOWN, DECREASING)

        KARABO_INIT_FIXED_STATE(EXTRACTING, DECREASING)

        KARABO_INIT_FIXED_STATE(STOPPING, DECREASING)

        KARABO_INIT_FIXED_STATE(EMPTYING, DECREASING)

        KARABO_INIT_FIXED_STATE(DISENGAGING, DECREASING)

        KARABO_INIT_FIXED_STATE(SWITCHING_OFF, DECREASING)

#undef KARABO_INIT_FIXED_STATE
        
        State::State(const std::string& name, const State* parent) : m_stateName(name), m_parent(parent) {
        }
        
        bool State::isCompatible(const State& s) const {
            if (m_stateName == s.m_stateName) return true;
            if (m_parent && m_parent->isCompatible(s)) return true;
            if (s.m_parent && this->isCompatible(*(s.m_parent))) return true;
            return false;
        }
        
    }
}
