--- src/karabo/core/DeviceServer.cc
+++ src/karabo/core/DeviceServer.cc
@@ -465,11 +465,10 @@ namespace karabo {
         void DeviceServer::slotStartDevice(const karabo::util::Hash& configuration) {
 
             // Just register an asynchronous reply and put on the "stack".
-
-            const std::string replyId(registerAsyncReply());
+            const SignalSlotable::AsyncReply reply(this);
 
             boost::mutex::scoped_lock lock(m_pendingInstantiationsMutex);
-            m_pendingInstantiations.push_back(std::make_pair(configuration, replyId));
+            m_pendingInstantiations.push_back(std::make_pair(configuration, reply));
         }
 
 
@@ -477,18 +476,22 @@ namespace karabo {
             if (ec) return;
 
             // Copy the current list of pending instantiations
-            std::vector<std::pair<karabo::util::Hash, std::string> > pendingInstantiations;
+            typedef std::pair<karabo::util::Hash, SignalSlotable::AsyncReply> ConfigReplyPair;
+            std::vector<ConfigReplyPair> pendingInstantiations;
             {
                 boost::mutex::scoped_lock lock(m_pendingInstantiationsMutex);
                 m_pendingInstantiations.swap(pendingInstantiations);
             }
 
+            if (!pendingInstantiations.empty()) {
+                KARABO_LOG_FRAMEWORK_INFO << "Begin working on " << pendingInstantiations.size() << " instantiations.";
+            }
             // Now go through them
-            for (const auto& cfgReplyid : pendingInstantiations) {
+            for (const ConfigReplyPair& cfgAndReply : pendingInstantiations) {
                 if (m_stopInstantiate) return;
 
-                const Hash& configuration = cfgReplyid.first;
-                const std::string& replyId = cfgReplyid.second;
+                const Hash& configuration = cfgAndReply.first;
+                const SignalSlotable::AsyncReply& reply = cfgAndReply.second;
 
                 const boost::tuple<std::string, std::string, util::Hash>& idClassIdConfig
                         = this->prepareInstantiate(configuration);
@@ -499,7 +502,7 @@ namespace karabo {
                         << "' with deviceId '" << deviceId << "'...";
                 KARABO_LOG_FRAMEWORK_DEBUG << "...with the following configuration:\n" << configuration;
 
-                this->instantiate(deviceId, classId, idClassIdConfig.get<2>(), replyId);
+                this->instantiate(deviceId, classId, idClassIdConfig.get<2>(), reply);
             }
 
             if (m_stopInstantiate) return;
@@ -565,7 +568,7 @@ namespace karabo {
 
 
         void DeviceServer::instantiate(const std::string& deviceId, const std::string& classId,
-                                       const util::Hash& config, const std::string &asyncReplyId) {
+                                       const util::Hash& config, const xms::SignalSlotable::AsyncReply& asyncReply) {
             try {
 
                 BaseDevice::Pointer device = BaseDevice::create(classId, config);
@@ -580,12 +583,12 @@ namespace karabo {
                 }
 
                 // Answer initiation of device (KARABO_LOG_* is done by device)
-                asyncReply(asyncReplyId, true, deviceId); // TODO think about
+                asyncReply(true, deviceId); // TODO think about
 
             } catch (const std::exception& se) {
                 const std::string message("Device of class " + classId + " could not be started because: ");
                 KARABO_LOG_ERROR << message << se.what();
-                asyncReply(asyncReplyId, false, message + se.what());
+                asyncReply(false, message + se.what());
             }
         }
 
