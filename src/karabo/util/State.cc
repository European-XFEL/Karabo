/*
 * This file is part of Karabo.
 *
 * http://www.karabo.eu
 *
 * Copyright (C) European XFEL GmbH Schenefeld. All rights reserved.
 *
 * Karabo is free software: you can redistribute it and/or modify it under
 * the terms of the MPL-2 Mozilla Public License.
 *
 * You should have received a copy of the MPL-2 Public License along with
 * Karabo. If not, see <https://www.mozilla.org/en-US/MPL/2.0/>.
 *
 * Karabo is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 */
#include "State.hh"

#include <boost/smart_ptr/make_shared.hpp>

namespace karabo {
    namespace util {

#define KARABO_INIT_BASE_STATE(X) const State State::X(#X, NULL);


        KARABO_INIT_BASE_STATE(UNKNOWN)
        KARABO_INIT_BASE_STATE(KNOWN)
        KARABO_INIT_BASE_STATE(INIT)

#undef KARABO_INIT_BASE_STATE


#define KARABO_INIT_FIXED_STATE(X, Y) const State State::X(#X, &Y);

        KARABO_INIT_FIXED_STATE(DISABLED, KNOWN)

        KARABO_INIT_FIXED_STATE(ERROR, KNOWN)

        KARABO_INIT_FIXED_STATE(NORMAL, KNOWN)

        KARABO_INIT_FIXED_STATE(PAUSED, DISABLED)

        KARABO_INIT_FIXED_STATE(RUNNING, NORMAL)

        KARABO_INIT_FIXED_STATE(STATIC, NORMAL)

        KARABO_INIT_FIXED_STATE(CHANGING, NORMAL)

        KARABO_INIT_FIXED_STATE(PASSIVE, STATIC)

        KARABO_INIT_FIXED_STATE(ACTIVE, STATIC)

        KARABO_INIT_FIXED_STATE(DECREASING, CHANGING)

        KARABO_INIT_FIXED_STATE(INCREASING, CHANGING)

        /**
         *
         */

        KARABO_INIT_FIXED_STATE(INTERLOCKED, DISABLED)

        KARABO_INIT_FIXED_STATE(COOLED, ACTIVE)

        KARABO_INIT_FIXED_STATE(HEATED, ACTIVE)

        KARABO_INIT_FIXED_STATE(EVACUATED, ACTIVE)

        KARABO_INIT_FIXED_STATE(CLOSED, ACTIVE)

        KARABO_INIT_FIXED_STATE(ON, ACTIVE)

        KARABO_INIT_FIXED_STATE(EXTRACTED, ACTIVE)

        KARABO_INIT_FIXED_STATE(STARTED, ACTIVE)

        KARABO_INIT_FIXED_STATE(LOCKED, ACTIVE)

        KARABO_INIT_FIXED_STATE(ENGAGED, ACTIVE)

        KARABO_INIT_FIXED_STATE(MONITORING, ACTIVE)


        KARABO_INIT_FIXED_STATE(WARM, PASSIVE)

        KARABO_INIT_FIXED_STATE(COLD, PASSIVE)

        KARABO_INIT_FIXED_STATE(PRESSURIZED, PASSIVE)

        KARABO_INIT_FIXED_STATE(OPENED, PASSIVE)

        KARABO_INIT_FIXED_STATE(OFF, PASSIVE)

        KARABO_INIT_FIXED_STATE(INSERTED, PASSIVE)

        KARABO_INIT_FIXED_STATE(STOPPED, PASSIVE)

        KARABO_INIT_FIXED_STATE(UNLOCKED, PASSIVE)

        KARABO_INIT_FIXED_STATE(DISENGAGED, PASSIVE)

        KARABO_INIT_FIXED_STATE(IGNORING, PASSIVE)


        KARABO_INIT_FIXED_STATE(ACQUIRING, RUNNING)

        KARABO_INIT_FIXED_STATE(PROCESSING, RUNNING)


        KARABO_INIT_FIXED_STATE(HOMING, CHANGING)

        KARABO_INIT_FIXED_STATE(ROTATING, CHANGING)

        KARABO_INIT_FIXED_STATE(MOVING, CHANGING)

        KARABO_INIT_FIXED_STATE(SWITCHING, CHANGING)

        KARABO_INIT_FIXED_STATE(OPENING, CHANGING)

        KARABO_INIT_FIXED_STATE(CLOSING, CHANGING)

        KARABO_INIT_FIXED_STATE(SEARCHING, CHANGING)


        KARABO_INIT_FIXED_STATE(HEATING, INCREASING)

        KARABO_INIT_FIXED_STATE(MOVING_RIGHT, INCREASING)

        KARABO_INIT_FIXED_STATE(MOVING_UP, INCREASING)

        KARABO_INIT_FIXED_STATE(MOVING_FORWARD, INCREASING)

        KARABO_INIT_FIXED_STATE(ROTATING_CLK, INCREASING)

        KARABO_INIT_FIXED_STATE(RAMPING_UP, INCREASING)

        KARABO_INIT_FIXED_STATE(INSERTING, INCREASING)

        KARABO_INIT_FIXED_STATE(STARTING, INCREASING)

        KARABO_INIT_FIXED_STATE(FILLING, INCREASING)

        KARABO_INIT_FIXED_STATE(ENGAGING, INCREASING)

        KARABO_INIT_FIXED_STATE(SWITCHING_ON, INCREASING)


        KARABO_INIT_FIXED_STATE(COOLING, DECREASING)

        KARABO_INIT_FIXED_STATE(MOVING_LEFT, DECREASING)

        KARABO_INIT_FIXED_STATE(MOVING_DOWN, DECREASING)

        KARABO_INIT_FIXED_STATE(MOVING_BACK, DECREASING)

        KARABO_INIT_FIXED_STATE(ROTATING_CNTCLK, DECREASING)

        KARABO_INIT_FIXED_STATE(RAMPING_DOWN, DECREASING)

        KARABO_INIT_FIXED_STATE(EXTRACTING, DECREASING)

        KARABO_INIT_FIXED_STATE(STOPPING, DECREASING)

        KARABO_INIT_FIXED_STATE(EMPTYING, DECREASING)

        KARABO_INIT_FIXED_STATE(DISENGAGING, DECREASING)

        KARABO_INIT_FIXED_STATE(SWITCHING_OFF, DECREASING)


        KARABO_INIT_FIXED_STATE(INTERLOCK_BROKEN, DISABLED)

        KARABO_INIT_FIXED_STATE(INTERLOCK_OK, STATIC)


#undef KARABO_INIT_FIXED_STATE

        State::State(const std::string& name, const State* parent) : m_stateName(name), m_parent(parent) {}


        bool State::isDerivedFrom(const State& s) const {
            if (m_stateName == s.m_stateName) return true;
            if (m_parent && m_parent->isDerivedFrom(s)) return true;
            return false;
        }

        std::once_flag State::m_initFromStringFlag;
        std::unordered_map<std::string, const State&> State::m_stateFactory;

        void State::initFromString() {
#define KARABO_INSERT_STATE_TO_FACTORY(state) \
    m_stateFactory.insert(std::pair<std::string, const State&>(std::string(#state), State::state));

            KARABO_INSERT_STATE_TO_FACTORY(UNKNOWN)
            KARABO_INSERT_STATE_TO_FACTORY(KNOWN)
            KARABO_INSERT_STATE_TO_FACTORY(INIT)

            KARABO_INSERT_STATE_TO_FACTORY(DISABLED)
            KARABO_INSERT_STATE_TO_FACTORY(ERROR)
            KARABO_INSERT_STATE_TO_FACTORY(NORMAL)
            KARABO_INSERT_STATE_TO_FACTORY(PAUSED)
            KARABO_INSERT_STATE_TO_FACTORY(STATIC)
            KARABO_INSERT_STATE_TO_FACTORY(CHANGING)
            KARABO_INSERT_STATE_TO_FACTORY(RUNNING)
            KARABO_INSERT_STATE_TO_FACTORY(PASSIVE)
            KARABO_INSERT_STATE_TO_FACTORY(ACTIVE)
            KARABO_INSERT_STATE_TO_FACTORY(DECREASING)
            KARABO_INSERT_STATE_TO_FACTORY(INCREASING)
            KARABO_INSERT_STATE_TO_FACTORY(ACQUIRING)
            KARABO_INSERT_STATE_TO_FACTORY(PROCESSING)

            KARABO_INSERT_STATE_TO_FACTORY(INTERLOCKED)
            KARABO_INSERT_STATE_TO_FACTORY(COOLED)
            KARABO_INSERT_STATE_TO_FACTORY(HEATED)
            KARABO_INSERT_STATE_TO_FACTORY(EVACUATED)
            KARABO_INSERT_STATE_TO_FACTORY(CLOSED)
            KARABO_INSERT_STATE_TO_FACTORY(ON)
            KARABO_INSERT_STATE_TO_FACTORY(EXTRACTED)
            KARABO_INSERT_STATE_TO_FACTORY(STARTED)
            KARABO_INSERT_STATE_TO_FACTORY(LOCKED)
            KARABO_INSERT_STATE_TO_FACTORY(ENGAGED)

            KARABO_INSERT_STATE_TO_FACTORY(WARM)
            KARABO_INSERT_STATE_TO_FACTORY(COLD)
            KARABO_INSERT_STATE_TO_FACTORY(PRESSURIZED)
            KARABO_INSERT_STATE_TO_FACTORY(OPENED)
            KARABO_INSERT_STATE_TO_FACTORY(OFF)
            KARABO_INSERT_STATE_TO_FACTORY(INSERTED)
            KARABO_INSERT_STATE_TO_FACTORY(STOPPED)
            KARABO_INSERT_STATE_TO_FACTORY(UNLOCKED)
            KARABO_INSERT_STATE_TO_FACTORY(DISENGAGED)

            KARABO_INSERT_STATE_TO_FACTORY(ROTATING)
            KARABO_INSERT_STATE_TO_FACTORY(MOVING)
            KARABO_INSERT_STATE_TO_FACTORY(SWITCHING)
            KARABO_INSERT_STATE_TO_FACTORY(OPENING)
            KARABO_INSERT_STATE_TO_FACTORY(CLOSING)

            KARABO_INSERT_STATE_TO_FACTORY(HEATING)
            KARABO_INSERT_STATE_TO_FACTORY(MOVING_RIGHT)
            KARABO_INSERT_STATE_TO_FACTORY(MOVING_UP)
            KARABO_INSERT_STATE_TO_FACTORY(MOVING_FORWARD)
            KARABO_INSERT_STATE_TO_FACTORY(ROTATING_CLK)
            KARABO_INSERT_STATE_TO_FACTORY(RAMPING_UP)
            KARABO_INSERT_STATE_TO_FACTORY(INSERTING)
            KARABO_INSERT_STATE_TO_FACTORY(STARTING)
            KARABO_INSERT_STATE_TO_FACTORY(FILLING)
            KARABO_INSERT_STATE_TO_FACTORY(ENGAGING)
            KARABO_INSERT_STATE_TO_FACTORY(SWITCHING_ON)

            KARABO_INSERT_STATE_TO_FACTORY(COOLING)
            KARABO_INSERT_STATE_TO_FACTORY(MOVING_LEFT)
            KARABO_INSERT_STATE_TO_FACTORY(MOVING_DOWN)
            KARABO_INSERT_STATE_TO_FACTORY(MOVING_BACK)
            KARABO_INSERT_STATE_TO_FACTORY(ROTATING_CNTCLK)
            KARABO_INSERT_STATE_TO_FACTORY(RAMPING_DOWN)
            KARABO_INSERT_STATE_TO_FACTORY(EXTRACTING)
            KARABO_INSERT_STATE_TO_FACTORY(STOPPING)
            KARABO_INSERT_STATE_TO_FACTORY(EMPTYING)
            KARABO_INSERT_STATE_TO_FACTORY(DISENGAGING)
            KARABO_INSERT_STATE_TO_FACTORY(SWITCHING_OFF)

            KARABO_INSERT_STATE_TO_FACTORY(HOMING)
            KARABO_INSERT_STATE_TO_FACTORY(MONITORING)
            KARABO_INSERT_STATE_TO_FACTORY(IGNORING)

            KARABO_INSERT_STATE_TO_FACTORY(INTERLOCK_BROKEN)
            KARABO_INSERT_STATE_TO_FACTORY(INTERLOCK_OK)
            KARABO_INSERT_STATE_TO_FACTORY(INTERLOCKED)

#undef KARABO_INSERT_STATE_TO_FACTORY
        }


        const State& State::fromString(const std::string& state) {
            std::call_once(m_initFromStringFlag, &State::initFromString);

            auto iter = m_stateFactory.find(state);
            if (iter == m_stateFactory.end()) {
                throw KARABO_LOGIC_EXCEPTION("State '" + state + "' does not exist!");
            } else {
                return iter->second;
            }
        }


        std::ostream& operator<<(std::ostream& out, const State& state) {
            return out << state.name();
        }


    } // namespace util
} // namespace karabo
