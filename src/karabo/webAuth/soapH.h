/* soapH.h
   Generated by gSOAP 2.8.14 from ClientAuthentication.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
 */

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
    #endif
    SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

    #ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
    #endif
    SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
    SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

    #ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_begin(soap), soap_serialize_byte(soap, data), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_begin(soap), soap_serialize_int(soap, data), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_begin(soap), soap_serialize_LONG64(soap, data), soap_begin_send(soap) || soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_begin(soap), soap_serialize_bool(soap, data), soap_begin_send(soap) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_begin(soap), soap_serialize_std__string(soap, data), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) {
    return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(struct soap *soap) {
    std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default_std__string(soap, _p);
    }
    return _p;
}

inline std::string * soap_new_set_std__string(struct soap *soap) {
    std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default_std__string(soap, _p);
    }
    return _p;
}

inline void soap_delete_std__string(struct soap *soap, std::string *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__UnsupportedEncodingException
#define SOAP_TYPE_ns1__UnsupportedEncodingException (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UnsupportedEncodingException(struct soap*, const char*, int, const ns1__UnsupportedEncodingException *, const char*);
SOAP_FMAC3 ns1__UnsupportedEncodingException * SOAP_FMAC4 soap_in_ns1__UnsupportedEncodingException(struct soap*, const char*, ns1__UnsupportedEncodingException *, const char*);

#ifndef soap_write_ns1__UnsupportedEncodingException
#define soap_write_ns1__UnsupportedEncodingException(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:UnsupportedEncodingException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__UnsupportedEncodingException * SOAP_FMAC4 soap_get_ns1__UnsupportedEncodingException(struct soap*, ns1__UnsupportedEncodingException *, const char*, const char*);

#ifndef soap_read_ns1__UnsupportedEncodingException
#define soap_read_ns1__UnsupportedEncodingException(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__UnsupportedEncodingException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__UnsupportedEncodingException * SOAP_FMAC2 soap_instantiate_ns1__UnsupportedEncodingException(struct soap*, int, const char*, const char*, size_t*);

inline ns1__UnsupportedEncodingException * soap_new_ns1__UnsupportedEncodingException(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__UnsupportedEncodingException(soap, n, NULL, NULL, NULL);
}

inline ns1__UnsupportedEncodingException * soap_new_req_ns1__UnsupportedEncodingException(struct soap *soap) {
    ns1__UnsupportedEncodingException *_p = soap_instantiate_ns1__UnsupportedEncodingException(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__UnsupportedEncodingException * soap_new_set_ns1__UnsupportedEncodingException(struct soap *soap, std::string *message) {
    ns1__UnsupportedEncodingException *_p = soap_instantiate_ns1__UnsupportedEncodingException(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__UnsupportedEncodingException::message = message;
    }
    return _p;
}

inline void soap_delete_ns1__UnsupportedEncodingException(struct soap *soap, ns1__UnsupportedEncodingException *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__UnsupportedEncodingException(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__DecoderException
#define SOAP_TYPE_ns1__DecoderException (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DecoderException(struct soap*, const char*, int, const ns1__DecoderException *, const char*);
SOAP_FMAC3 ns1__DecoderException * SOAP_FMAC4 soap_in_ns1__DecoderException(struct soap*, const char*, ns1__DecoderException *, const char*);

#ifndef soap_write_ns1__DecoderException
#define soap_write_ns1__DecoderException(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:DecoderException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__DecoderException * SOAP_FMAC4 soap_get_ns1__DecoderException(struct soap*, ns1__DecoderException *, const char*, const char*);

#ifndef soap_read_ns1__DecoderException
#define soap_read_ns1__DecoderException(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__DecoderException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__DecoderException * SOAP_FMAC2 soap_instantiate_ns1__DecoderException(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DecoderException * soap_new_ns1__DecoderException(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__DecoderException(soap, n, NULL, NULL, NULL);
}

inline ns1__DecoderException * soap_new_req_ns1__DecoderException(struct soap *soap) {
    ns1__DecoderException *_p = soap_instantiate_ns1__DecoderException(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__DecoderException * soap_new_set_ns1__DecoderException(struct soap *soap, std::string *message) {
    ns1__DecoderException *_p = soap_instantiate_ns1__DecoderException(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__DecoderException::message = message;
    }
    return _p;
}

inline void soap_delete_ns1__DecoderException(struct soap *soap, ns1__DecoderException *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DecoderException(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__loginResponse
#define SOAP_TYPE_ns1__loginResponse (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__loginResponse(struct soap*, const char*, int, const ns1__loginResponse *, const char*);
SOAP_FMAC3 ns1__loginResponse * SOAP_FMAC4 soap_in_ns1__loginResponse(struct soap*, const char*, ns1__loginResponse *, const char*);

#ifndef soap_write_ns1__loginResponse
#define soap_write_ns1__loginResponse(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:loginResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__loginResponse * SOAP_FMAC4 soap_get_ns1__loginResponse(struct soap*, ns1__loginResponse *, const char*, const char*);

#ifndef soap_read_ns1__loginResponse
#define soap_read_ns1__loginResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__loginResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__loginResponse * SOAP_FMAC2 soap_instantiate_ns1__loginResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__loginResponse * soap_new_ns1__loginResponse(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__loginResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__loginResponse * soap_new_req_ns1__loginResponse(struct soap *soap) {
    ns1__loginResponse *_p = soap_instantiate_ns1__loginResponse(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__loginResponse * soap_new_set_ns1__loginResponse(struct soap *soap, ns1__xfelSession *return_) {
    ns1__loginResponse *_p = soap_instantiate_ns1__loginResponse(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__loginResponse::return_ = return_;
    }
    return _p;
}

inline void soap_delete_ns1__loginResponse(struct soap *soap, ns1__loginResponse *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__loginResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__login
#define SOAP_TYPE_ns1__login (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__login(struct soap*, const char*, int, const ns1__login *, const char*);
SOAP_FMAC3 ns1__login * SOAP_FMAC4 soap_in_ns1__login(struct soap*, const char*, ns1__login *, const char*);

#ifndef soap_write_ns1__login
#define soap_write_ns1__login(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:login", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__login * SOAP_FMAC4 soap_get_ns1__login(struct soap*, ns1__login *, const char*, const char*);

#ifndef soap_read_ns1__login
#define soap_read_ns1__login(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__login(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__login * SOAP_FMAC2 soap_instantiate_ns1__login(struct soap*, int, const char*, const char*, size_t*);

inline ns1__login * soap_new_ns1__login(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__login(soap, n, NULL, NULL, NULL);
}

inline ns1__login * soap_new_req_ns1__login(struct soap *soap) {
    ns1__login *_p = soap_instantiate_ns1__login(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__login * soap_new_set_ns1__login(struct soap *soap, std::string *username, std::string *password, std::string *provider, std::string *ipAddress, std::string *brokerHostname, std::string *brokerPortNumber, std::string *brokerTopic, std::string *nonce, std::string *software) {
    ns1__login *_p = soap_instantiate_ns1__login(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__login::username = username;
        _p->ns1__login::password = password;
        _p->ns1__login::provider = provider;
        _p->ns1__login::ipAddress = ipAddress;
        _p->ns1__login::brokerHostname = brokerHostname;
        _p->ns1__login::brokerPortNumber = brokerPortNumber;
        _p->ns1__login::brokerTopic = brokerTopic;
        _p->ns1__login::nonce = nonce;
        _p->ns1__login::software = software;
    }
    return _p;
}

inline void soap_delete_ns1__login(struct soap *soap, ns1__login *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__login(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__hasActiveSessionResponse
#define SOAP_TYPE_ns1__hasActiveSessionResponse (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__hasActiveSessionResponse(struct soap*, const char*, int, const ns1__hasActiveSessionResponse *, const char*);
SOAP_FMAC3 ns1__hasActiveSessionResponse * SOAP_FMAC4 soap_in_ns1__hasActiveSessionResponse(struct soap*, const char*, ns1__hasActiveSessionResponse *, const char*);

#ifndef soap_write_ns1__hasActiveSessionResponse
#define soap_write_ns1__hasActiveSessionResponse(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:hasActiveSessionResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__hasActiveSessionResponse * SOAP_FMAC4 soap_get_ns1__hasActiveSessionResponse(struct soap*, ns1__hasActiveSessionResponse *, const char*, const char*);

#ifndef soap_read_ns1__hasActiveSessionResponse
#define soap_read_ns1__hasActiveSessionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__hasActiveSessionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__hasActiveSessionResponse * SOAP_FMAC2 soap_instantiate_ns1__hasActiveSessionResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__hasActiveSessionResponse * soap_new_ns1__hasActiveSessionResponse(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__hasActiveSessionResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__hasActiveSessionResponse * soap_new_req_ns1__hasActiveSessionResponse(struct soap *soap) {
    ns1__hasActiveSessionResponse *_p = soap_instantiate_ns1__hasActiveSessionResponse(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__hasActiveSessionResponse * soap_new_set_ns1__hasActiveSessionResponse(struct soap *soap, bool *return_) {
    ns1__hasActiveSessionResponse *_p = soap_instantiate_ns1__hasActiveSessionResponse(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__hasActiveSessionResponse::return_ = return_;
    }
    return _p;
}

inline void soap_delete_ns1__hasActiveSessionResponse(struct soap *soap, ns1__hasActiveSessionResponse *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__hasActiveSessionResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__hasActiveSession
#define SOAP_TYPE_ns1__hasActiveSession (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__hasActiveSession(struct soap*, const char*, int, const ns1__hasActiveSession *, const char*);
SOAP_FMAC3 ns1__hasActiveSession * SOAP_FMAC4 soap_in_ns1__hasActiveSession(struct soap*, const char*, ns1__hasActiveSession *, const char*);

#ifndef soap_write_ns1__hasActiveSession
#define soap_write_ns1__hasActiveSession(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:hasActiveSession", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__hasActiveSession * SOAP_FMAC4 soap_get_ns1__hasActiveSession(struct soap*, ns1__hasActiveSession *, const char*, const char*);

#ifndef soap_read_ns1__hasActiveSession
#define soap_read_ns1__hasActiveSession(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__hasActiveSession(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__hasActiveSession * SOAP_FMAC2 soap_instantiate_ns1__hasActiveSession(struct soap*, int, const char*, const char*, size_t*);

inline ns1__hasActiveSession * soap_new_ns1__hasActiveSession(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__hasActiveSession(soap, n, NULL, NULL, NULL);
}

inline ns1__hasActiveSession * soap_new_req_ns1__hasActiveSession(struct soap *soap) {
    ns1__hasActiveSession *_p = soap_instantiate_ns1__hasActiveSession(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__hasActiveSession * soap_new_set_ns1__hasActiveSession(struct soap *soap, std::string *username, std::string *provider, std::string *software, std::string *ipAddress, std::string *brokerHostname, std::string *brokerPortNumber, std::string *brokerTopic) {
    ns1__hasActiveSession *_p = soap_instantiate_ns1__hasActiveSession(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__hasActiveSession::username = username;
        _p->ns1__hasActiveSession::provider = provider;
        _p->ns1__hasActiveSession::software = software;
        _p->ns1__hasActiveSession::ipAddress = ipAddress;
        _p->ns1__hasActiveSession::brokerHostname = brokerHostname;
        _p->ns1__hasActiveSession::brokerPortNumber = brokerPortNumber;
        _p->ns1__hasActiveSession::brokerTopic = brokerTopic;
    }
    return _p;
}

inline void soap_delete_ns1__hasActiveSession(struct soap *soap, ns1__hasActiveSession *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__hasActiveSession(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__singleSignOnResponse
#define SOAP_TYPE_ns1__singleSignOnResponse (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__singleSignOnResponse(struct soap*, const char*, int, const ns1__singleSignOnResponse *, const char*);
SOAP_FMAC3 ns1__singleSignOnResponse * SOAP_FMAC4 soap_in_ns1__singleSignOnResponse(struct soap*, const char*, ns1__singleSignOnResponse *, const char*);

#ifndef soap_write_ns1__singleSignOnResponse
#define soap_write_ns1__singleSignOnResponse(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:singleSignOnResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__singleSignOnResponse * SOAP_FMAC4 soap_get_ns1__singleSignOnResponse(struct soap*, ns1__singleSignOnResponse *, const char*, const char*);

#ifndef soap_read_ns1__singleSignOnResponse
#define soap_read_ns1__singleSignOnResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__singleSignOnResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__singleSignOnResponse * SOAP_FMAC2 soap_instantiate_ns1__singleSignOnResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__singleSignOnResponse * soap_new_ns1__singleSignOnResponse(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__singleSignOnResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__singleSignOnResponse * soap_new_req_ns1__singleSignOnResponse(struct soap *soap) {
    ns1__singleSignOnResponse *_p = soap_instantiate_ns1__singleSignOnResponse(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__singleSignOnResponse * soap_new_set_ns1__singleSignOnResponse(struct soap *soap, ns1__xfelSession *return_) {
    ns1__singleSignOnResponse *_p = soap_instantiate_ns1__singleSignOnResponse(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__singleSignOnResponse::return_ = return_;
    }
    return _p;
}

inline void soap_delete_ns1__singleSignOnResponse(struct soap *soap, ns1__singleSignOnResponse *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__singleSignOnResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__singleSignOn
#define SOAP_TYPE_ns1__singleSignOn (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__singleSignOn(struct soap*, const char*, int, const ns1__singleSignOn *, const char*);
SOAP_FMAC3 ns1__singleSignOn * SOAP_FMAC4 soap_in_ns1__singleSignOn(struct soap*, const char*, ns1__singleSignOn *, const char*);

#ifndef soap_write_ns1__singleSignOn
#define soap_write_ns1__singleSignOn(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:singleSignOn", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__singleSignOn * SOAP_FMAC4 soap_get_ns1__singleSignOn(struct soap*, ns1__singleSignOn *, const char*, const char*);

#ifndef soap_read_ns1__singleSignOn
#define soap_read_ns1__singleSignOn(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__singleSignOn(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__singleSignOn * SOAP_FMAC2 soap_instantiate_ns1__singleSignOn(struct soap*, int, const char*, const char*, size_t*);

inline ns1__singleSignOn * soap_new_ns1__singleSignOn(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__singleSignOn(soap, n, NULL, NULL, NULL);
}

inline ns1__singleSignOn * soap_new_req_ns1__singleSignOn(struct soap *soap) {
    ns1__singleSignOn *_p = soap_instantiate_ns1__singleSignOn(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__singleSignOn * soap_new_set_ns1__singleSignOn(struct soap *soap, std::string *username, std::string *provider, std::string *ipAddress) {
    ns1__singleSignOn *_p = soap_instantiate_ns1__singleSignOn(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__singleSignOn::username = username;
        _p->ns1__singleSignOn::provider = provider;
        _p->ns1__singleSignOn::ipAddress = ipAddress;
    }
    return _p;
}

inline void soap_delete_ns1__singleSignOn(struct soap *soap, ns1__singleSignOn *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__singleSignOn(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__logoutResponse
#define SOAP_TYPE_ns1__logoutResponse (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__logoutResponse(struct soap*, const char*, int, const ns1__logoutResponse *, const char*);
SOAP_FMAC3 ns1__logoutResponse * SOAP_FMAC4 soap_in_ns1__logoutResponse(struct soap*, const char*, ns1__logoutResponse *, const char*);

#ifndef soap_write_ns1__logoutResponse
#define soap_write_ns1__logoutResponse(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:logoutResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__logoutResponse * SOAP_FMAC4 soap_get_ns1__logoutResponse(struct soap*, ns1__logoutResponse *, const char*, const char*);

#ifndef soap_read_ns1__logoutResponse
#define soap_read_ns1__logoutResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__logoutResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__logoutResponse * SOAP_FMAC2 soap_instantiate_ns1__logoutResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__logoutResponse * soap_new_ns1__logoutResponse(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__logoutResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__logoutResponse * soap_new_req_ns1__logoutResponse(struct soap *soap) {
    ns1__logoutResponse *_p = soap_instantiate_ns1__logoutResponse(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__logoutResponse * soap_new_set_ns1__logoutResponse(struct soap *soap, bool *return_) {
    ns1__logoutResponse *_p = soap_instantiate_ns1__logoutResponse(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__logoutResponse::return_ = return_;
    }
    return _p;
}

inline void soap_delete_ns1__logoutResponse(struct soap *soap, ns1__logoutResponse *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__logoutResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__logout
#define SOAP_TYPE_ns1__logout (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__logout(struct soap*, const char*, int, const ns1__logout *, const char*);
SOAP_FMAC3 ns1__logout * SOAP_FMAC4 soap_in_ns1__logout(struct soap*, const char*, ns1__logout *, const char*);

#ifndef soap_write_ns1__logout
#define soap_write_ns1__logout(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:logout", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__logout * SOAP_FMAC4 soap_get_ns1__logout(struct soap*, ns1__logout *, const char*, const char*);

#ifndef soap_read_ns1__logout
#define soap_read_ns1__logout(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__logout(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__logout * SOAP_FMAC2 soap_instantiate_ns1__logout(struct soap*, int, const char*, const char*, size_t*);

inline ns1__logout * soap_new_ns1__logout(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__logout(soap, n, NULL, NULL, NULL);
}

inline ns1__logout * soap_new_req_ns1__logout(struct soap *soap) {
    ns1__logout *_p = soap_instantiate_ns1__logout(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__logout * soap_new_set_ns1__logout(struct soap *soap, std::string *username, std::string *provider, std::string *sessionToken) {
    ns1__logout *_p = soap_instantiate_ns1__logout(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__logout::username = username;
        _p->ns1__logout::provider = provider;
        _p->ns1__logout::sessionToken = sessionToken;
    }
    return _p;
}

inline void soap_delete_ns1__logout(struct soap *soap, ns1__logout *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__logout(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__sessionsByIpResponse
#define SOAP_TYPE_ns1__sessionsByIpResponse (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sessionsByIpResponse(struct soap*, const char*, int, const ns1__sessionsByIpResponse *, const char*);
SOAP_FMAC3 ns1__sessionsByIpResponse * SOAP_FMAC4 soap_in_ns1__sessionsByIpResponse(struct soap*, const char*, ns1__sessionsByIpResponse *, const char*);

#ifndef soap_write_ns1__sessionsByIpResponse
#define soap_write_ns1__sessionsByIpResponse(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:sessionsByIpResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__sessionsByIpResponse * SOAP_FMAC4 soap_get_ns1__sessionsByIpResponse(struct soap*, ns1__sessionsByIpResponse *, const char*, const char*);

#ifndef soap_read_ns1__sessionsByIpResponse
#define soap_read_ns1__sessionsByIpResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__sessionsByIpResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__sessionsByIpResponse * SOAP_FMAC2 soap_instantiate_ns1__sessionsByIpResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__sessionsByIpResponse * soap_new_ns1__sessionsByIpResponse(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__sessionsByIpResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__sessionsByIpResponse * soap_new_req_ns1__sessionsByIpResponse(struct soap *soap) {
    ns1__sessionsByIpResponse *_p = soap_instantiate_ns1__sessionsByIpResponse(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__sessionsByIpResponse * soap_new_set_ns1__sessionsByIpResponse(struct soap *soap, std::string *return_) {
    ns1__sessionsByIpResponse *_p = soap_instantiate_ns1__sessionsByIpResponse(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__sessionsByIpResponse::return_ = return_;
    }
    return _p;
}

inline void soap_delete_ns1__sessionsByIpResponse(struct soap *soap, ns1__sessionsByIpResponse *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__sessionsByIpResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__sessionsByIp
#define SOAP_TYPE_ns1__sessionsByIp (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sessionsByIp(struct soap*, const char*, int, const ns1__sessionsByIp *, const char*);
SOAP_FMAC3 ns1__sessionsByIp * SOAP_FMAC4 soap_in_ns1__sessionsByIp(struct soap*, const char*, ns1__sessionsByIp *, const char*);

#ifndef soap_write_ns1__sessionsByIp
#define soap_write_ns1__sessionsByIp(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:sessionsByIp", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__sessionsByIp * SOAP_FMAC4 soap_get_ns1__sessionsByIp(struct soap*, ns1__sessionsByIp *, const char*, const char*);

#ifndef soap_read_ns1__sessionsByIp
#define soap_read_ns1__sessionsByIp(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__sessionsByIp(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__sessionsByIp * SOAP_FMAC2 soap_instantiate_ns1__sessionsByIp(struct soap*, int, const char*, const char*, size_t*);

inline ns1__sessionsByIp * soap_new_ns1__sessionsByIp(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__sessionsByIp(soap, n, NULL, NULL, NULL);
}

inline ns1__sessionsByIp * soap_new_req_ns1__sessionsByIp(struct soap *soap) {
    ns1__sessionsByIp *_p = soap_instantiate_ns1__sessionsByIp(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__sessionsByIp * soap_new_set_ns1__sessionsByIp(struct soap *soap, std::string *ipAddress) {
    ns1__sessionsByIp *_p = soap_instantiate_ns1__sessionsByIp(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__sessionsByIp::ipAddress = ipAddress;
    }
    return _p;
}

inline void soap_delete_ns1__sessionsByIp(struct soap *soap, ns1__sessionsByIp *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__sessionsByIp(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__xfelSession
#define SOAP_TYPE_ns1__xfelSession (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__xfelSession(struct soap*, const char*, int, const ns1__xfelSession *, const char*);
SOAP_FMAC3 ns1__xfelSession * SOAP_FMAC4 soap_in_ns1__xfelSession(struct soap*, const char*, ns1__xfelSession *, const char*);

#ifndef soap_write_ns1__xfelSession
#define soap_write_ns1__xfelSession(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:xfelSession", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__xfelSession * SOAP_FMAC4 soap_get_ns1__xfelSession(struct soap*, ns1__xfelSession *, const char*, const char*);

#ifndef soap_read_ns1__xfelSession
#define soap_read_ns1__xfelSession(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__xfelSession(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__xfelSession * SOAP_FMAC2 soap_instantiate_ns1__xfelSession(struct soap*, int, const char*, const char*, size_t*);

inline ns1__xfelSession * soap_new_ns1__xfelSession(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__xfelSession(soap, n, NULL, NULL, NULL);
}

inline ns1__xfelSession * soap_new_req_ns1__xfelSession(struct soap *soap) {
    ns1__xfelSession *_p = soap_instantiate_ns1__xfelSession(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__xfelSession * soap_new_set_ns1__xfelSession(struct soap *soap, std::string *accessList, std::string *defaultAccessLevelDesc, int *defaultAccessLevelId, std::string *familyName, std::string *firstName, std::string *operationResultMsg, int *operationSuccess, std::string *provider, std::string *sessionToken, std::string *softwareDesc, LONG64 *softwareId, LONG64 *userId, std::string *username, std::string *welcomeMessage) {
    ns1__xfelSession *_p = soap_instantiate_ns1__xfelSession(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__xfelSession::accessList = accessList;
        _p->ns1__xfelSession::defaultAccessLevelDesc = defaultAccessLevelDesc;
        _p->ns1__xfelSession::defaultAccessLevelId = defaultAccessLevelId;
        _p->ns1__xfelSession::familyName = familyName;
        _p->ns1__xfelSession::firstName = firstName;
        _p->ns1__xfelSession::operationResultMsg = operationResultMsg;
        _p->ns1__xfelSession::operationSuccess = operationSuccess;
        _p->ns1__xfelSession::provider = provider;
        _p->ns1__xfelSession::sessionToken = sessionToken;
        _p->ns1__xfelSession::softwareDesc = softwareDesc;
        _p->ns1__xfelSession::softwareId = softwareId;
        _p->ns1__xfelSession::userId = userId;
        _p->ns1__xfelSession::username = username;
        _p->ns1__xfelSession::welcomeMessage = welcomeMessage;
    }
    return _p;
}

inline void soap_delete_ns1__xfelSession(struct soap *soap, ns1__xfelSession *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__xfelSession(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserNonceResponse
#define SOAP_TYPE_ns1__getUserNonceResponse (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserNonceResponse(struct soap*, const char*, int, const ns1__getUserNonceResponse *, const char*);
SOAP_FMAC3 ns1__getUserNonceResponse * SOAP_FMAC4 soap_in_ns1__getUserNonceResponse(struct soap*, const char*, ns1__getUserNonceResponse *, const char*);

#ifndef soap_write_ns1__getUserNonceResponse
#define soap_write_ns1__getUserNonceResponse(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getUserNonceResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getUserNonceResponse * SOAP_FMAC4 soap_get_ns1__getUserNonceResponse(struct soap*, ns1__getUserNonceResponse *, const char*, const char*);

#ifndef soap_read_ns1__getUserNonceResponse
#define soap_read_ns1__getUserNonceResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserNonceResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__getUserNonceResponse * SOAP_FMAC2 soap_instantiate_ns1__getUserNonceResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getUserNonceResponse * soap_new_ns1__getUserNonceResponse(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__getUserNonceResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getUserNonceResponse * soap_new_req_ns1__getUserNonceResponse(struct soap *soap) {
    ns1__getUserNonceResponse *_p = soap_instantiate_ns1__getUserNonceResponse(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__getUserNonceResponse * soap_new_set_ns1__getUserNonceResponse(struct soap *soap, ns1__xfelSession *return_) {
    ns1__getUserNonceResponse *_p = soap_instantiate_ns1__getUserNonceResponse(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__getUserNonceResponse::return_ = return_;
    }
    return _p;
}

inline void soap_delete_ns1__getUserNonceResponse(struct soap *soap, ns1__getUserNonceResponse *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserNonceResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserNonce
#define SOAP_TYPE_ns1__getUserNonce (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserNonce(struct soap*, const char*, int, const ns1__getUserNonce *, const char*);
SOAP_FMAC3 ns1__getUserNonce * SOAP_FMAC4 soap_in_ns1__getUserNonce(struct soap*, const char*, ns1__getUserNonce *, const char*);

#ifndef soap_write_ns1__getUserNonce
#define soap_write_ns1__getUserNonce(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getUserNonce", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getUserNonce * SOAP_FMAC4 soap_get_ns1__getUserNonce(struct soap*, ns1__getUserNonce *, const char*, const char*);

#ifndef soap_read_ns1__getUserNonce
#define soap_read_ns1__getUserNonce(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserNonce(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__getUserNonce * SOAP_FMAC2 soap_instantiate_ns1__getUserNonce(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getUserNonce * soap_new_ns1__getUserNonce(struct soap *soap, int n = -1) {
    return soap_instantiate_ns1__getUserNonce(soap, n, NULL, NULL, NULL);
}

inline ns1__getUserNonce * soap_new_req_ns1__getUserNonce(struct soap *soap) {
    ns1__getUserNonce *_p = soap_instantiate_ns1__getUserNonce(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
    }
    return _p;
}

inline ns1__getUserNonce * soap_new_set_ns1__getUserNonce(struct soap *soap, std::string *username, std::string *provider, std::string *ipAddress) {
    ns1__getUserNonce *_p = soap_instantiate_ns1__getUserNonce(soap, -1, NULL, NULL, NULL);
    if (_p) {
        _p->soap_default(soap);
        _p->ns1__getUserNonce::username = username;
        _p->ns1__getUserNonce::provider = provider;
        _p->ns1__getUserNonce::ipAddress = ipAddress;
    }
    return _p;
}

inline void soap_delete_ns1__getUserNonce(struct soap *soap, ns1__getUserNonce *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserNonce(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) {
    return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) {
    struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default_SOAP_ENV__Fault(soap, _p);
    }
    return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) {
    struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default_SOAP_ENV__Fault(soap, _p);
        _p->faultcode = faultcode;
        _p->faultstring = faultstring;
        _p->faultactor = faultactor;
        _p->detail = detail;
        _p->SOAP_ENV__Code = SOAP_ENV__Code;
        _p->SOAP_ENV__Reason = SOAP_ENV__Reason;
        _p->SOAP_ENV__Node = SOAP_ENV__Node;
        _p->SOAP_ENV__Role = SOAP_ENV__Role;
        _p->SOAP_ENV__Detail = SOAP_ENV__Detail;
    }
    return _p;
}

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) {
    return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) {
    struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default_SOAP_ENV__Reason(soap, _p);
    }
    return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) {
    struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default_SOAP_ENV__Reason(soap, _p);
        _p->SOAP_ENV__Text = SOAP_ENV__Text;
    }
    return _p;
}

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) {
    return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) {
    struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default_SOAP_ENV__Code(soap, _p);
    }
    return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) {
    struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default_SOAP_ENV__Code(soap, _p);
        _p->SOAP_ENV__Value = SOAP_ENV__Value;
        _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
    }
    return _p;
}

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) {
    return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) {
    struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default_SOAP_ENV__Header(soap, _p);
    }
    return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) {
    struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default_SOAP_ENV__Header(soap, _p);
    }
    return _p;
}

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__hasActiveSession
#define SOAP_TYPE___ns1__hasActiveSession (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__hasActiveSession(struct soap*, struct __ns1__hasActiveSession *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__hasActiveSession(struct soap*, const struct __ns1__hasActiveSession *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__hasActiveSession(struct soap*, const char*, int, const struct __ns1__hasActiveSession *, const char*);
SOAP_FMAC3 struct __ns1__hasActiveSession * SOAP_FMAC4 soap_in___ns1__hasActiveSession(struct soap*, const char*, struct __ns1__hasActiveSession *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__hasActiveSession(struct soap*, const struct __ns1__hasActiveSession *, const char*, const char*);

#ifndef soap_write___ns1__hasActiveSession
#define soap_write___ns1__hasActiveSession(soap, data) ( soap_begin(soap), soap_serialize___ns1__hasActiveSession(soap, data), soap_begin_send(soap) || soap_put___ns1__hasActiveSession(soap, data, "-ns1:hasActiveSession", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__hasActiveSession * SOAP_FMAC4 soap_get___ns1__hasActiveSession(struct soap*, struct __ns1__hasActiveSession *, const char*, const char*);

#ifndef soap_read___ns1__hasActiveSession
#define soap_read___ns1__hasActiveSession(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__hasActiveSession(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__hasActiveSession * SOAP_FMAC2 soap_instantiate___ns1__hasActiveSession(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__hasActiveSession * soap_new___ns1__hasActiveSession(struct soap *soap, int n = -1) {
    return soap_instantiate___ns1__hasActiveSession(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__hasActiveSession * soap_new_req___ns1__hasActiveSession(struct soap *soap) {
    struct __ns1__hasActiveSession *_p = soap_instantiate___ns1__hasActiveSession(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default___ns1__hasActiveSession(soap, _p);
    }
    return _p;
}

inline struct __ns1__hasActiveSession * soap_new_set___ns1__hasActiveSession(struct soap *soap, ns1__hasActiveSession *ns1__hasActiveSession_) {
    struct __ns1__hasActiveSession *_p = soap_instantiate___ns1__hasActiveSession(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default___ns1__hasActiveSession(soap, _p);
        _p->ns1__hasActiveSession_ = ns1__hasActiveSession_;
    }
    return _p;
}

inline void soap_delete___ns1__hasActiveSession(struct soap *soap, struct __ns1__hasActiveSession *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__hasActiveSession(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__sessionsByIp
#define SOAP_TYPE___ns1__sessionsByIp (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__sessionsByIp(struct soap*, struct __ns1__sessionsByIp *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__sessionsByIp(struct soap*, const struct __ns1__sessionsByIp *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__sessionsByIp(struct soap*, const char*, int, const struct __ns1__sessionsByIp *, const char*);
SOAP_FMAC3 struct __ns1__sessionsByIp * SOAP_FMAC4 soap_in___ns1__sessionsByIp(struct soap*, const char*, struct __ns1__sessionsByIp *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__sessionsByIp(struct soap*, const struct __ns1__sessionsByIp *, const char*, const char*);

#ifndef soap_write___ns1__sessionsByIp
#define soap_write___ns1__sessionsByIp(soap, data) ( soap_begin(soap), soap_serialize___ns1__sessionsByIp(soap, data), soap_begin_send(soap) || soap_put___ns1__sessionsByIp(soap, data, "-ns1:sessionsByIp", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__sessionsByIp * SOAP_FMAC4 soap_get___ns1__sessionsByIp(struct soap*, struct __ns1__sessionsByIp *, const char*, const char*);

#ifndef soap_read___ns1__sessionsByIp
#define soap_read___ns1__sessionsByIp(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__sessionsByIp(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__sessionsByIp * SOAP_FMAC2 soap_instantiate___ns1__sessionsByIp(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__sessionsByIp * soap_new___ns1__sessionsByIp(struct soap *soap, int n = -1) {
    return soap_instantiate___ns1__sessionsByIp(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__sessionsByIp * soap_new_req___ns1__sessionsByIp(struct soap *soap) {
    struct __ns1__sessionsByIp *_p = soap_instantiate___ns1__sessionsByIp(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default___ns1__sessionsByIp(soap, _p);
    }
    return _p;
}

inline struct __ns1__sessionsByIp * soap_new_set___ns1__sessionsByIp(struct soap *soap, ns1__sessionsByIp *ns1__sessionsByIp_) {
    struct __ns1__sessionsByIp *_p = soap_instantiate___ns1__sessionsByIp(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default___ns1__sessionsByIp(soap, _p);
        _p->ns1__sessionsByIp_ = ns1__sessionsByIp_;
    }
    return _p;
}

inline void soap_delete___ns1__sessionsByIp(struct soap *soap, struct __ns1__sessionsByIp *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__sessionsByIp(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__singleSignOn
#define SOAP_TYPE___ns1__singleSignOn (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__singleSignOn(struct soap*, struct __ns1__singleSignOn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__singleSignOn(struct soap*, const struct __ns1__singleSignOn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__singleSignOn(struct soap*, const char*, int, const struct __ns1__singleSignOn *, const char*);
SOAP_FMAC3 struct __ns1__singleSignOn * SOAP_FMAC4 soap_in___ns1__singleSignOn(struct soap*, const char*, struct __ns1__singleSignOn *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__singleSignOn(struct soap*, const struct __ns1__singleSignOn *, const char*, const char*);

#ifndef soap_write___ns1__singleSignOn
#define soap_write___ns1__singleSignOn(soap, data) ( soap_begin(soap), soap_serialize___ns1__singleSignOn(soap, data), soap_begin_send(soap) || soap_put___ns1__singleSignOn(soap, data, "-ns1:singleSignOn", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__singleSignOn * SOAP_FMAC4 soap_get___ns1__singleSignOn(struct soap*, struct __ns1__singleSignOn *, const char*, const char*);

#ifndef soap_read___ns1__singleSignOn
#define soap_read___ns1__singleSignOn(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__singleSignOn(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__singleSignOn * SOAP_FMAC2 soap_instantiate___ns1__singleSignOn(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__singleSignOn * soap_new___ns1__singleSignOn(struct soap *soap, int n = -1) {
    return soap_instantiate___ns1__singleSignOn(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__singleSignOn * soap_new_req___ns1__singleSignOn(struct soap *soap) {
    struct __ns1__singleSignOn *_p = soap_instantiate___ns1__singleSignOn(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default___ns1__singleSignOn(soap, _p);
    }
    return _p;
}

inline struct __ns1__singleSignOn * soap_new_set___ns1__singleSignOn(struct soap *soap, ns1__singleSignOn *ns1__singleSignOn_) {
    struct __ns1__singleSignOn *_p = soap_instantiate___ns1__singleSignOn(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default___ns1__singleSignOn(soap, _p);
        _p->ns1__singleSignOn_ = ns1__singleSignOn_;
    }
    return _p;
}

inline void soap_delete___ns1__singleSignOn(struct soap *soap, struct __ns1__singleSignOn *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__singleSignOn(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getUserNonce
#define SOAP_TYPE___ns1__getUserNonce (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getUserNonce(struct soap*, struct __ns1__getUserNonce *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getUserNonce(struct soap*, const struct __ns1__getUserNonce *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getUserNonce(struct soap*, const char*, int, const struct __ns1__getUserNonce *, const char*);
SOAP_FMAC3 struct __ns1__getUserNonce * SOAP_FMAC4 soap_in___ns1__getUserNonce(struct soap*, const char*, struct __ns1__getUserNonce *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getUserNonce(struct soap*, const struct __ns1__getUserNonce *, const char*, const char*);

#ifndef soap_write___ns1__getUserNonce
#define soap_write___ns1__getUserNonce(soap, data) ( soap_begin(soap), soap_serialize___ns1__getUserNonce(soap, data), soap_begin_send(soap) || soap_put___ns1__getUserNonce(soap, data, "-ns1:getUserNonce", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__getUserNonce * SOAP_FMAC4 soap_get___ns1__getUserNonce(struct soap*, struct __ns1__getUserNonce *, const char*, const char*);

#ifndef soap_read___ns1__getUserNonce
#define soap_read___ns1__getUserNonce(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getUserNonce(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__getUserNonce * SOAP_FMAC2 soap_instantiate___ns1__getUserNonce(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getUserNonce * soap_new___ns1__getUserNonce(struct soap *soap, int n = -1) {
    return soap_instantiate___ns1__getUserNonce(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getUserNonce * soap_new_req___ns1__getUserNonce(struct soap *soap) {
    struct __ns1__getUserNonce *_p = soap_instantiate___ns1__getUserNonce(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default___ns1__getUserNonce(soap, _p);
    }
    return _p;
}

inline struct __ns1__getUserNonce * soap_new_set___ns1__getUserNonce(struct soap *soap, ns1__getUserNonce *ns1__getUserNonce_) {
    struct __ns1__getUserNonce *_p = soap_instantiate___ns1__getUserNonce(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default___ns1__getUserNonce(soap, _p);
        _p->ns1__getUserNonce_ = ns1__getUserNonce_;
    }
    return _p;
}

inline void soap_delete___ns1__getUserNonce(struct soap *soap, struct __ns1__getUserNonce *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getUserNonce(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__logout
#define SOAP_TYPE___ns1__logout (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__logout(struct soap*, struct __ns1__logout *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__logout(struct soap*, const struct __ns1__logout *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__logout(struct soap*, const char*, int, const struct __ns1__logout *, const char*);
SOAP_FMAC3 struct __ns1__logout * SOAP_FMAC4 soap_in___ns1__logout(struct soap*, const char*, struct __ns1__logout *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__logout(struct soap*, const struct __ns1__logout *, const char*, const char*);

#ifndef soap_write___ns1__logout
#define soap_write___ns1__logout(soap, data) ( soap_begin(soap), soap_serialize___ns1__logout(soap, data), soap_begin_send(soap) || soap_put___ns1__logout(soap, data, "-ns1:logout", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__logout * SOAP_FMAC4 soap_get___ns1__logout(struct soap*, struct __ns1__logout *, const char*, const char*);

#ifndef soap_read___ns1__logout
#define soap_read___ns1__logout(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__logout(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__logout * SOAP_FMAC2 soap_instantiate___ns1__logout(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__logout * soap_new___ns1__logout(struct soap *soap, int n = -1) {
    return soap_instantiate___ns1__logout(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__logout * soap_new_req___ns1__logout(struct soap *soap) {
    struct __ns1__logout *_p = soap_instantiate___ns1__logout(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default___ns1__logout(soap, _p);
    }
    return _p;
}

inline struct __ns1__logout * soap_new_set___ns1__logout(struct soap *soap, ns1__logout *ns1__logout_) {
    struct __ns1__logout *_p = soap_instantiate___ns1__logout(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default___ns1__logout(soap, _p);
        _p->ns1__logout_ = ns1__logout_;
    }
    return _p;
}

inline void soap_delete___ns1__logout(struct soap *soap, struct __ns1__logout *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__logout(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__login
#define SOAP_TYPE___ns1__login (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__login(struct soap*, struct __ns1__login *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__login(struct soap*, const struct __ns1__login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__login(struct soap*, const char*, int, const struct __ns1__login *, const char*);
SOAP_FMAC3 struct __ns1__login * SOAP_FMAC4 soap_in___ns1__login(struct soap*, const char*, struct __ns1__login *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__login(struct soap*, const struct __ns1__login *, const char*, const char*);

#ifndef soap_write___ns1__login
#define soap_write___ns1__login(soap, data) ( soap_begin(soap), soap_serialize___ns1__login(soap, data), soap_begin_send(soap) || soap_put___ns1__login(soap, data, "-ns1:login", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__login * SOAP_FMAC4 soap_get___ns1__login(struct soap*, struct __ns1__login *, const char*, const char*);

#ifndef soap_read___ns1__login
#define soap_read___ns1__login(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__login(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__login * SOAP_FMAC2 soap_instantiate___ns1__login(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__login * soap_new___ns1__login(struct soap *soap, int n = -1) {
    return soap_instantiate___ns1__login(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__login * soap_new_req___ns1__login(struct soap *soap) {
    struct __ns1__login *_p = soap_instantiate___ns1__login(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default___ns1__login(soap, _p);
    }
    return _p;
}

inline struct __ns1__login * soap_new_set___ns1__login(struct soap *soap, ns1__login *ns1__login_) {
    struct __ns1__login *_p = soap_instantiate___ns1__login(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default___ns1__login(soap, _p);
        _p->ns1__login_ = ns1__login_;
    }
    return _p;
}

inline void soap_delete___ns1__login(struct soap *soap, struct __ns1__login *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__login(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) {
    return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) {
    struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default_SOAP_ENV__Detail(soap, _p);
        _p->__type = __type;
        _p->fault = fault;
    }
    return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, ns1__DecoderException *ns1__DecoderException_, ns1__UnsupportedEncodingException *ns1__UnsupportedEncodingException_, int __type, void *fault) {
    struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL);
    if (_p) {
        soap_default_SOAP_ENV__Detail(soap, _p);
        _p->__any = __any;
        _p->ns1__DecoderException_ = ns1__DecoderException_;
        _p->ns1__UnsupportedEncodingException_ = ns1__UnsupportedEncodingException_;
        _p->__type = __type;
        _p->fault = fault;
    }
    return _p;
}

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) {
    soap_delete(soap, p);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason * const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason * const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail * const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail * const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code * const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code * const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTons1__hasActiveSessionResponse
#define SOAP_TYPE_PointerTons1__hasActiveSessionResponse (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__hasActiveSessionResponse(struct soap*, ns1__hasActiveSessionResponse * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__hasActiveSessionResponse(struct soap*, const char *, int, ns1__hasActiveSessionResponse * const*, const char *);
SOAP_FMAC3 ns1__hasActiveSessionResponse ** SOAP_FMAC4 soap_in_PointerTons1__hasActiveSessionResponse(struct soap*, const char*, ns1__hasActiveSessionResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__hasActiveSessionResponse(struct soap*, ns1__hasActiveSessionResponse * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__hasActiveSessionResponse
#define soap_write_PointerTons1__hasActiveSessionResponse(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__hasActiveSessionResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__hasActiveSessionResponse(soap, data, "ns1:hasActiveSessionResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__hasActiveSessionResponse ** SOAP_FMAC4 soap_get_PointerTons1__hasActiveSessionResponse(struct soap*, ns1__hasActiveSessionResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__hasActiveSessionResponse
#define soap_read_PointerTons1__hasActiveSessionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__hasActiveSessionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__hasActiveSession
#define SOAP_TYPE_PointerTons1__hasActiveSession (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__hasActiveSession(struct soap*, ns1__hasActiveSession * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__hasActiveSession(struct soap*, const char *, int, ns1__hasActiveSession * const*, const char *);
SOAP_FMAC3 ns1__hasActiveSession ** SOAP_FMAC4 soap_in_PointerTons1__hasActiveSession(struct soap*, const char*, ns1__hasActiveSession **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__hasActiveSession(struct soap*, ns1__hasActiveSession * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__hasActiveSession
#define soap_write_PointerTons1__hasActiveSession(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__hasActiveSession(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__hasActiveSession(soap, data, "ns1:hasActiveSession", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__hasActiveSession ** SOAP_FMAC4 soap_get_PointerTons1__hasActiveSession(struct soap*, ns1__hasActiveSession **, const char*, const char*);

#ifndef soap_read_PointerTons1__hasActiveSession
#define soap_read_PointerTons1__hasActiveSession(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__hasActiveSession(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__sessionsByIpResponse
#define SOAP_TYPE_PointerTons1__sessionsByIpResponse (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sessionsByIpResponse(struct soap*, ns1__sessionsByIpResponse * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sessionsByIpResponse(struct soap*, const char *, int, ns1__sessionsByIpResponse * const*, const char *);
SOAP_FMAC3 ns1__sessionsByIpResponse ** SOAP_FMAC4 soap_in_PointerTons1__sessionsByIpResponse(struct soap*, const char*, ns1__sessionsByIpResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sessionsByIpResponse(struct soap*, ns1__sessionsByIpResponse * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__sessionsByIpResponse
#define soap_write_PointerTons1__sessionsByIpResponse(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__sessionsByIpResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__sessionsByIpResponse(soap, data, "ns1:sessionsByIpResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__sessionsByIpResponse ** SOAP_FMAC4 soap_get_PointerTons1__sessionsByIpResponse(struct soap*, ns1__sessionsByIpResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__sessionsByIpResponse
#define soap_read_PointerTons1__sessionsByIpResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__sessionsByIpResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__sessionsByIp
#define SOAP_TYPE_PointerTons1__sessionsByIp (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sessionsByIp(struct soap*, ns1__sessionsByIp * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sessionsByIp(struct soap*, const char *, int, ns1__sessionsByIp * const*, const char *);
SOAP_FMAC3 ns1__sessionsByIp ** SOAP_FMAC4 soap_in_PointerTons1__sessionsByIp(struct soap*, const char*, ns1__sessionsByIp **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sessionsByIp(struct soap*, ns1__sessionsByIp * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__sessionsByIp
#define soap_write_PointerTons1__sessionsByIp(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__sessionsByIp(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__sessionsByIp(soap, data, "ns1:sessionsByIp", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__sessionsByIp ** SOAP_FMAC4 soap_get_PointerTons1__sessionsByIp(struct soap*, ns1__sessionsByIp **, const char*, const char*);

#ifndef soap_read_PointerTons1__sessionsByIp
#define soap_read_PointerTons1__sessionsByIp(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__sessionsByIp(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__singleSignOnResponse
#define SOAP_TYPE_PointerTons1__singleSignOnResponse (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__singleSignOnResponse(struct soap*, ns1__singleSignOnResponse * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__singleSignOnResponse(struct soap*, const char *, int, ns1__singleSignOnResponse * const*, const char *);
SOAP_FMAC3 ns1__singleSignOnResponse ** SOAP_FMAC4 soap_in_PointerTons1__singleSignOnResponse(struct soap*, const char*, ns1__singleSignOnResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__singleSignOnResponse(struct soap*, ns1__singleSignOnResponse * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__singleSignOnResponse
#define soap_write_PointerTons1__singleSignOnResponse(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__singleSignOnResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__singleSignOnResponse(soap, data, "ns1:singleSignOnResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__singleSignOnResponse ** SOAP_FMAC4 soap_get_PointerTons1__singleSignOnResponse(struct soap*, ns1__singleSignOnResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__singleSignOnResponse
#define soap_read_PointerTons1__singleSignOnResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__singleSignOnResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__singleSignOn
#define SOAP_TYPE_PointerTons1__singleSignOn (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__singleSignOn(struct soap*, ns1__singleSignOn * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__singleSignOn(struct soap*, const char *, int, ns1__singleSignOn * const*, const char *);
SOAP_FMAC3 ns1__singleSignOn ** SOAP_FMAC4 soap_in_PointerTons1__singleSignOn(struct soap*, const char*, ns1__singleSignOn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__singleSignOn(struct soap*, ns1__singleSignOn * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__singleSignOn
#define soap_write_PointerTons1__singleSignOn(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__singleSignOn(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__singleSignOn(soap, data, "ns1:singleSignOn", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__singleSignOn ** SOAP_FMAC4 soap_get_PointerTons1__singleSignOn(struct soap*, ns1__singleSignOn **, const char*, const char*);

#ifndef soap_read_PointerTons1__singleSignOn
#define soap_read_PointerTons1__singleSignOn(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__singleSignOn(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getUserNonceResponse
#define SOAP_TYPE_PointerTons1__getUserNonceResponse (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getUserNonceResponse(struct soap*, ns1__getUserNonceResponse * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getUserNonceResponse(struct soap*, const char *, int, ns1__getUserNonceResponse * const*, const char *);
SOAP_FMAC3 ns1__getUserNonceResponse ** SOAP_FMAC4 soap_in_PointerTons1__getUserNonceResponse(struct soap*, const char*, ns1__getUserNonceResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getUserNonceResponse(struct soap*, ns1__getUserNonceResponse * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getUserNonceResponse
#define soap_write_PointerTons1__getUserNonceResponse(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__getUserNonceResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__getUserNonceResponse(soap, data, "ns1:getUserNonceResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getUserNonceResponse ** SOAP_FMAC4 soap_get_PointerTons1__getUserNonceResponse(struct soap*, ns1__getUserNonceResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__getUserNonceResponse
#define soap_read_PointerTons1__getUserNonceResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getUserNonceResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getUserNonce
#define SOAP_TYPE_PointerTons1__getUserNonce (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getUserNonce(struct soap*, ns1__getUserNonce * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getUserNonce(struct soap*, const char *, int, ns1__getUserNonce * const*, const char *);
SOAP_FMAC3 ns1__getUserNonce ** SOAP_FMAC4 soap_in_PointerTons1__getUserNonce(struct soap*, const char*, ns1__getUserNonce **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getUserNonce(struct soap*, ns1__getUserNonce * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getUserNonce
#define soap_write_PointerTons1__getUserNonce(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__getUserNonce(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__getUserNonce(soap, data, "ns1:getUserNonce", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getUserNonce ** SOAP_FMAC4 soap_get_PointerTons1__getUserNonce(struct soap*, ns1__getUserNonce **, const char*, const char*);

#ifndef soap_read_PointerTons1__getUserNonce
#define soap_read_PointerTons1__getUserNonce(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getUserNonce(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__logoutResponse
#define SOAP_TYPE_PointerTons1__logoutResponse (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__logoutResponse(struct soap*, ns1__logoutResponse * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__logoutResponse(struct soap*, const char *, int, ns1__logoutResponse * const*, const char *);
SOAP_FMAC3 ns1__logoutResponse ** SOAP_FMAC4 soap_in_PointerTons1__logoutResponse(struct soap*, const char*, ns1__logoutResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__logoutResponse(struct soap*, ns1__logoutResponse * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__logoutResponse
#define soap_write_PointerTons1__logoutResponse(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__logoutResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__logoutResponse(soap, data, "ns1:logoutResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__logoutResponse ** SOAP_FMAC4 soap_get_PointerTons1__logoutResponse(struct soap*, ns1__logoutResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__logoutResponse
#define soap_read_PointerTons1__logoutResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__logoutResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__logout
#define SOAP_TYPE_PointerTons1__logout (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__logout(struct soap*, ns1__logout * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__logout(struct soap*, const char *, int, ns1__logout * const*, const char *);
SOAP_FMAC3 ns1__logout ** SOAP_FMAC4 soap_in_PointerTons1__logout(struct soap*, const char*, ns1__logout **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__logout(struct soap*, ns1__logout * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__logout
#define soap_write_PointerTons1__logout(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__logout(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__logout(soap, data, "ns1:logout", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__logout ** SOAP_FMAC4 soap_get_PointerTons1__logout(struct soap*, ns1__logout **, const char*, const char*);

#ifndef soap_read_PointerTons1__logout
#define soap_read_PointerTons1__logout(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__logout(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__loginResponse
#define SOAP_TYPE_PointerTons1__loginResponse (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__loginResponse(struct soap*, ns1__loginResponse * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__loginResponse(struct soap*, const char *, int, ns1__loginResponse * const*, const char *);
SOAP_FMAC3 ns1__loginResponse ** SOAP_FMAC4 soap_in_PointerTons1__loginResponse(struct soap*, const char*, ns1__loginResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__loginResponse(struct soap*, ns1__loginResponse * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__loginResponse
#define soap_write_PointerTons1__loginResponse(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__loginResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__loginResponse(soap, data, "ns1:loginResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__loginResponse ** SOAP_FMAC4 soap_get_PointerTons1__loginResponse(struct soap*, ns1__loginResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__loginResponse
#define soap_read_PointerTons1__loginResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__loginResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__login
#define SOAP_TYPE_PointerTons1__login (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__login(struct soap*, ns1__login * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__login(struct soap*, const char *, int, ns1__login * const*, const char *);
SOAP_FMAC3 ns1__login ** SOAP_FMAC4 soap_in_PointerTons1__login(struct soap*, const char*, ns1__login **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__login(struct soap*, ns1__login * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__login
#define soap_write_PointerTons1__login(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__login(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__login(soap, data, "ns1:login", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__login ** SOAP_FMAC4 soap_get_PointerTons1__login(struct soap*, ns1__login **, const char*, const char*);

#ifndef soap_read_PointerTons1__login
#define soap_read_PointerTons1__login(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__login(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__UnsupportedEncodingException
#define SOAP_TYPE_PointerTons1__UnsupportedEncodingException (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__UnsupportedEncodingException(struct soap*, ns1__UnsupportedEncodingException * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__UnsupportedEncodingException(struct soap*, const char *, int, ns1__UnsupportedEncodingException * const*, const char *);
SOAP_FMAC3 ns1__UnsupportedEncodingException ** SOAP_FMAC4 soap_in_PointerTons1__UnsupportedEncodingException(struct soap*, const char*, ns1__UnsupportedEncodingException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__UnsupportedEncodingException(struct soap*, ns1__UnsupportedEncodingException * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__UnsupportedEncodingException
#define soap_write_PointerTons1__UnsupportedEncodingException(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__UnsupportedEncodingException(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__UnsupportedEncodingException(soap, data, "ns1:UnsupportedEncodingException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__UnsupportedEncodingException ** SOAP_FMAC4 soap_get_PointerTons1__UnsupportedEncodingException(struct soap*, ns1__UnsupportedEncodingException **, const char*, const char*);

#ifndef soap_read_PointerTons1__UnsupportedEncodingException
#define soap_read_PointerTons1__UnsupportedEncodingException(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__UnsupportedEncodingException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__DecoderException
#define SOAP_TYPE_PointerTons1__DecoderException (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DecoderException(struct soap*, ns1__DecoderException * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DecoderException(struct soap*, const char *, int, ns1__DecoderException * const*, const char *);
SOAP_FMAC3 ns1__DecoderException ** SOAP_FMAC4 soap_in_PointerTons1__DecoderException(struct soap*, const char*, ns1__DecoderException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DecoderException(struct soap*, ns1__DecoderException * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__DecoderException
#define soap_write_PointerTons1__DecoderException(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__DecoderException(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__DecoderException(soap, data, "ns1:DecoderException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__DecoderException ** SOAP_FMAC4 soap_get_PointerTons1__DecoderException(struct soap*, ns1__DecoderException **, const char*, const char*);

#ifndef soap_read_PointerTons1__DecoderException
#define soap_read_PointerTons1__DecoderException(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__DecoderException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);

#ifndef soap_write_PointerTobool
#define soap_write_PointerTobool(soap, data) ( soap_begin(soap), soap_serialize_PointerTobool(soap, data), soap_begin_send(soap) || soap_put_PointerTobool(soap, data, "boolean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);

#ifndef soap_read_PointerTobool
#define soap_read_PointerTobool(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTobool(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToLONG64
#define SOAP_TYPE_PointerToLONG64 (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap*, LONG64 * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap*, const char *, int, LONG64 * const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToLONG64(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap*, LONG64 * const*, const char*, const char*);

#ifndef soap_write_PointerToLONG64
#define soap_write_PointerToLONG64(soap, data) ( soap_begin(soap), soap_serialize_PointerToLONG64(soap, data), soap_begin_send(soap) || soap_put_PointerToLONG64(soap, data, "long", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToLONG64(struct soap*, LONG64 **, const char*, const char*);

#ifndef soap_read_PointerToLONG64
#define soap_read_PointerToLONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_begin(soap), soap_serialize_PointerToint(soap, data), soap_begin_send(soap) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__xfelSession
#define SOAP_TYPE_PointerTons1__xfelSession (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__xfelSession(struct soap*, ns1__xfelSession * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__xfelSession(struct soap*, const char *, int, ns1__xfelSession * const*, const char *);
SOAP_FMAC3 ns1__xfelSession ** SOAP_FMAC4 soap_in_PointerTons1__xfelSession(struct soap*, const char*, ns1__xfelSession **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__xfelSession(struct soap*, ns1__xfelSession * const*, const char*, const char*);

#ifndef soap_write_PointerTons1__xfelSession
#define soap_write_PointerTons1__xfelSession(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__xfelSession(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__xfelSession(soap, data, "ns1:xfelSession", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__xfelSession ** SOAP_FMAC4 soap_get_PointerTons1__xfelSession(struct soap*, ns1__xfelSession **, const char*, const char*);

#ifndef soap_read_PointerTons1__xfelSession
#define soap_read_PointerTons1__xfelSession(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__xfelSession(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string * const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string * const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string * const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_begin(soap), soap_serialize_PointerTostd__string(soap, data), soap_begin_send(soap) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_begin(soap), soap_serialize__QName(soap, data), soap_begin_send(soap) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_begin(soap), soap_serialize_string(soap, data), soap_begin_send(soap) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

/* End of soapH.h */
