/* ClientAuthentication.h
   Generated by wsdl2h 2.8.4 from http://localhost:8080/XFELAuthWebService/Authentication?WSDL and typemap.dat
   2013-04-11 14:01:15 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on ClientAuthentication.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://server.xfelauthwebservice.xfel.eu/                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://server.xfelauthwebservice.xfel.eu/"
ns2 = ""

*/

#define SOAP_NAMESPACE_OF_ns2	""
//gsoap ns2   schema namespace:	
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://server.xfelauthwebservice.xfel.eu/"
//gsoap ns1   schema namespace:	http://server.xfelauthwebservice.xfel.eu/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__getUserNonce.
class ns1__getUserNonce;

//  Forward declaration of class ns1__getUserNonceResponse.
class ns1__getUserNonceResponse;

//  Forward declaration of class ns1__xfelSession.
class ns1__xfelSession;

//  Forward declaration of class ns1__sessionsByIp.
class ns1__sessionsByIp;

//  Forward declaration of class ns1__sessionsByIpResponse.
class ns1__sessionsByIpResponse;

//  Forward declaration of class ns1__logout.
class ns1__logout;

//  Forward declaration of class ns1__logoutResponse.
class ns1__logoutResponse;

//  Forward declaration of class ns1__singleSignOn.
class ns1__singleSignOn;

//  Forward declaration of class ns1__singleSignOnResponse.
class ns1__singleSignOnResponse;

//  Forward declaration of class ns1__login.
class ns1__login;

//  Forward declaration of class ns1__loginResponse.
class ns1__loginResponse;

//  Forward declaration of class ns1__DecoderException.
class ns1__DecoderException;

//  Forward declaration of class ns1__UnsupportedEncodingException.
class ns1__UnsupportedEncodingException;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://server.xfelauthwebservice.xfel.eu/                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://server.xfelauthwebservice.xfel.eu/                                *
 *                                                                            *
\******************************************************************************/


/// "http://server.xfelauthwebservice.xfel.eu/":getUserNonce is a complexType.
class ns1__getUserNonce
{ public:
/// Element username of type xs:string.
    std::string*                         username                       0;	///< Optional element.
/// Element provider of type xs:string.
    std::string*                         provider                       0;	///< Optional element.
/// Element ipAddress of type xs:string.
    std::string*                         ipAddress                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://server.xfelauthwebservice.xfel.eu/":getUserNonceResponse is a complexType.
class ns1__getUserNonceResponse
{ public:
/// Element return of type "http://server.xfelauthwebservice.xfel.eu/":xfelSession.
    ns1__xfelSession*                    return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://server.xfelauthwebservice.xfel.eu/":xfelSession is a complexType.
class ns1__xfelSession
{ public:
/// Element errorMsg of type xs:string.
    std::string*                         errorMsg                       0;	///< Optional element.
/// Element familyName of type xs:string.
    std::string*                         familyName                     0;	///< Optional element.
/// Element firstName of type xs:string.
    std::string*                         firstName                      0;	///< Optional element.
/// Element operationSuccess of type xs:int.
    int*                                 operationSuccess               0;	///< Optional element.
/// Element provider of type xs:string.
    std::string*                         provider                       0;	///< Optional element.
/// Element roleDesc of type xs:string.
    std::string*                         roleDesc                       0;	///< Optional element.
/// Element sessionToken of type xs:string.
    std::string*                         sessionToken                   0;	///< Optional element.
/// Element softwareDesc of type xs:string.
    std::string*                         softwareDesc                   0;	///< Optional element.
/// Element username of type xs:string.
    std::string*                         username                       0;	///< Optional element.
/// Element welcomeMessage of type xs:string.
    std::string*                         welcomeMessage                 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://server.xfelauthwebservice.xfel.eu/":sessionsByIp is a complexType.
class ns1__sessionsByIp
{ public:
/// Element ipAddress of type xs:string.
    std::string*                         ipAddress                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://server.xfelauthwebservice.xfel.eu/":sessionsByIpResponse is a complexType.
class ns1__sessionsByIpResponse
{ public:
/// Element return of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://server.xfelauthwebservice.xfel.eu/":logout is a complexType.
class ns1__logout
{ public:
/// Element username of type xs:string.
    std::string*                         username                       0;	///< Optional element.
/// Element provider of type xs:string.
    std::string*                         provider                       0;	///< Optional element.
/// Element sessionToken of type xs:string.
    std::string*                         sessionToken                   0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://server.xfelauthwebservice.xfel.eu/":logoutResponse is a complexType.
class ns1__logoutResponse
{ public:
/// Element return of type xs:boolean.
    bool*                                return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://server.xfelauthwebservice.xfel.eu/":singleSignOn is a complexType.
class ns1__singleSignOn
{ public:
/// Element username of type xs:string.
    std::string*                         username                       0;	///< Optional element.
/// Element provider of type xs:string.
    std::string*                         provider                       0;	///< Optional element.
/// Element ipAddress of type xs:string.
    std::string*                         ipAddress                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://server.xfelauthwebservice.xfel.eu/":singleSignOnResponse is a complexType.
class ns1__singleSignOnResponse
{ public:
/// Element return of type "http://server.xfelauthwebservice.xfel.eu/":xfelSession.
    ns1__xfelSession*                    return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://server.xfelauthwebservice.xfel.eu/":login is a complexType.
class ns1__login
{ public:
/// Element username of type xs:string.
    std::string*                         username                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// Element provider of type xs:string.
    std::string*                         provider                       0;	///< Optional element.
/// Element ipAddress of type xs:string.
    std::string*                         ipAddress                      0;	///< Optional element.
/// Element hostname of type xs:string.
    std::string*                         hostname                       0;	///< Optional element.
/// Element portNumber of type xs:string.
    std::string*                         portNumber                     0;	///< Optional element.
/// Element nonce of type xs:string.
    std::string*                         nonce                          0;	///< Optional element.
/// Element software of type xs:string.
    std::string*                         software                       0;	///< Optional element.
/// Element time of type xs:string.
    std::string*                         time                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://server.xfelauthwebservice.xfel.eu/":loginResponse is a complexType.
class ns1__loginResponse
{ public:
/// Element return of type "http://server.xfelauthwebservice.xfel.eu/":xfelSession.
    ns1__xfelSession*                    return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://server.xfelauthwebservice.xfel.eu/":DecoderException is a complexType.
class ns1__DecoderException
{ public:
/// Element message of type xs:string.
    std::string*                         message                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://server.xfelauthwebservice.xfel.eu/":UnsupportedEncodingException is a complexType.
class ns1__UnsupportedEncodingException
{ public:
/// Element message of type xs:string.
    std::string*                         message                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://server.xfelauthwebservice.xfel.eu/                                *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://server.xfelauthwebservice.xfel.eu/":DecoderException of type "http://server.xfelauthwebservice.xfel.eu/":DecoderException.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://server.xfelauthwebservice.xfel.eu/":UnsupportedEncodingException of type "http://server.xfelauthwebservice.xfel.eu/":UnsupportedEncodingException.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://server.xfelauthwebservice.xfel.eu/":getUserNonce of type "http://server.xfelauthwebservice.xfel.eu/":getUserNonce.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://server.xfelauthwebservice.xfel.eu/":getUserNonceResponse of type "http://server.xfelauthwebservice.xfel.eu/":getUserNonceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://server.xfelauthwebservice.xfel.eu/":login of type "http://server.xfelauthwebservice.xfel.eu/":login.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://server.xfelauthwebservice.xfel.eu/":loginResponse of type "http://server.xfelauthwebservice.xfel.eu/":loginResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://server.xfelauthwebservice.xfel.eu/":logout of type "http://server.xfelauthwebservice.xfel.eu/":logout.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://server.xfelauthwebservice.xfel.eu/":logoutResponse of type "http://server.xfelauthwebservice.xfel.eu/":logoutResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://server.xfelauthwebservice.xfel.eu/":sessionsByIp of type "http://server.xfelauthwebservice.xfel.eu/":sessionsByIp.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://server.xfelauthwebservice.xfel.eu/":sessionsByIpResponse of type "http://server.xfelauthwebservice.xfel.eu/":sessionsByIpResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://server.xfelauthwebservice.xfel.eu/":singleSignOn of type "http://server.xfelauthwebservice.xfel.eu/":singleSignOn.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://server.xfelauthwebservice.xfel.eu/":singleSignOnResponse of type "http://server.xfelauthwebservice.xfel.eu/":singleSignOnResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://server.xfelauthwebservice.xfel.eu/                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	AuthenticationPortBinding 
//gsoap ns1  service type:	Authentication 
//gsoap ns1  service port:	http://localhost:8080/XFELAuthWebService/Authentication 
//gsoap ns1  service namespace:	http://server.xfelauthwebservice.xfel.eu/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Authentication Definitions

@section Authentication_bindings Service Bindings

  - @ref AuthenticationPortBinding

@section Authentication_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page AuthenticationPortBinding Binding "AuthenticationPortBinding"

@section AuthenticationPortBinding_operations Operations of Binding  "AuthenticationPortBinding"

  - @ref __ns1__logout

  - @ref __ns1__singleSignOn

  - @ref __ns1__sessionsByIp

  - @ref __ns1__getUserNonce

  - @ref __ns1__login

@section AuthenticationPortBinding_ports Endpoints of Binding  "AuthenticationPortBinding"

  - http://localhost:8080/XFELAuthWebService/Authentication

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use option -j to omit.

*/
struct SOAP_ENV__Detail
{
// xsd:anyAttribute omitted: to parse attribute content of the Detail element into DOM anyAttribute, use wsdl2h option -d.
    _XML                                 __any                         ;	///< Catch any element content in XML string.
    ns1__DecoderException*               ns1__DecoderException_        ;
///< SOAP Fault element ""http://server.xfelauthwebservice.xfel.eu/":DecoderException" part "fault"
    ns1__UnsupportedEncodingException*   ns1__UnsupportedEncodingException_;
///< SOAP Fault element ""http://server.xfelauthwebservice.xfel.eu/":UnsupportedEncodingException" part "fault"
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object X or NULL
};

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   AuthenticationPortBinding                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__logout                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__logout" of service binding "AuthenticationPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://server.xfelauthwebservice.xfel.eu/Authentication/logoutRequest"

  - Addressing response action: "http://server.xfelauthwebservice.xfel.eu/Authentication/logoutResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__logout(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__logout*                        ns1__logout_,
    // response parameters:
    ns1__logoutResponse*                ns1__logoutResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__logout(
    struct soap *soap,
    // request parameters:
    ns1__logout*                        ns1__logout_,
    // response parameters:
    ns1__logoutResponse*                ns1__logoutResponse_
  );
@endcode

C++ proxy class (defined in soapAuthenticationPortBindingProxy.h):
@code
  class AuthenticationPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapAuthenticationPortBindingService.h):
@code
  class AuthenticationPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	logout document
//gsoap ns1  service method-encoding:	logout literal
//gsoap ns1  service method-action:	logout ""
//gsoap ns1  service method-output-action:	logout http://server.xfelauthwebservice.xfel.eu/Authentication/logoutResponse
int __ns1__logout(
    ns1__logout*                        ns1__logout_,	///< Request parameter
    ns1__logoutResponse*                ns1__logoutResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__singleSignOn                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__singleSignOn" of service binding "AuthenticationPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://server.xfelauthwebservice.xfel.eu/Authentication/singleSignOnRequest"

  - Addressing response action: "http://server.xfelauthwebservice.xfel.eu/Authentication/singleSignOnResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__singleSignOn(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__singleSignOn*                  ns1__singleSignOn_,
    // response parameters:
    ns1__singleSignOnResponse*          ns1__singleSignOnResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__singleSignOn(
    struct soap *soap,
    // request parameters:
    ns1__singleSignOn*                  ns1__singleSignOn_,
    // response parameters:
    ns1__singleSignOnResponse*          ns1__singleSignOnResponse_
  );
@endcode

C++ proxy class (defined in soapAuthenticationPortBindingProxy.h):
@code
  class AuthenticationPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapAuthenticationPortBindingService.h):
@code
  class AuthenticationPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	singleSignOn document
//gsoap ns1  service method-encoding:	singleSignOn literal
//gsoap ns1  service method-action:	singleSignOn ""
//gsoap ns1  service method-output-action:	singleSignOn http://server.xfelauthwebservice.xfel.eu/Authentication/singleSignOnResponse
int __ns1__singleSignOn(
    ns1__singleSignOn*                  ns1__singleSignOn_,	///< Request parameter
    ns1__singleSignOnResponse*          ns1__singleSignOnResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sessionsByIp                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__sessionsByIp" of service binding "AuthenticationPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://server.xfelauthwebservice.xfel.eu/Authentication/sessionsByIpRequest"

  - Addressing response action: "http://server.xfelauthwebservice.xfel.eu/Authentication/sessionsByIpResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sessionsByIp(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__sessionsByIp*                  ns1__sessionsByIp_,
    // response parameters:
    ns1__sessionsByIpResponse*          ns1__sessionsByIpResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sessionsByIp(
    struct soap *soap,
    // request parameters:
    ns1__sessionsByIp*                  ns1__sessionsByIp_,
    // response parameters:
    ns1__sessionsByIpResponse*          ns1__sessionsByIpResponse_
  );
@endcode

C++ proxy class (defined in soapAuthenticationPortBindingProxy.h):
@code
  class AuthenticationPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapAuthenticationPortBindingService.h):
@code
  class AuthenticationPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	sessionsByIp document
//gsoap ns1  service method-encoding:	sessionsByIp literal
//gsoap ns1  service method-action:	sessionsByIp ""
//gsoap ns1  service method-output-action:	sessionsByIp http://server.xfelauthwebservice.xfel.eu/Authentication/sessionsByIpResponse
int __ns1__sessionsByIp(
    ns1__sessionsByIp*                  ns1__sessionsByIp_,	///< Request parameter
    ns1__sessionsByIpResponse*          ns1__sessionsByIpResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getUserNonce                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getUserNonce" of service binding "AuthenticationPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://server.xfelauthwebservice.xfel.eu/Authentication/getUserNonceRequest"

  - Addressing response action: "http://server.xfelauthwebservice.xfel.eu/Authentication/getUserNonceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getUserNonce(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getUserNonce*                  ns1__getUserNonce_,
    // response parameters:
    ns1__getUserNonceResponse*          ns1__getUserNonceResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getUserNonce(
    struct soap *soap,
    // request parameters:
    ns1__getUserNonce*                  ns1__getUserNonce_,
    // response parameters:
    ns1__getUserNonceResponse*          ns1__getUserNonceResponse_
  );
@endcode

C++ proxy class (defined in soapAuthenticationPortBindingProxy.h):
@code
  class AuthenticationPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapAuthenticationPortBindingService.h):
@code
  class AuthenticationPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getUserNonce document
//gsoap ns1  service method-encoding:	getUserNonce literal
//gsoap ns1  service method-action:	getUserNonce ""
//gsoap ns1  service method-output-action:	getUserNonce http://server.xfelauthwebservice.xfel.eu/Authentication/getUserNonceResponse
int __ns1__getUserNonce(
    ns1__getUserNonce*                  ns1__getUserNonce_,	///< Request parameter
    ns1__getUserNonceResponse*          ns1__getUserNonceResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__login                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__login" of service binding "AuthenticationPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://server.xfelauthwebservice.xfel.eu/Authentication/loginRequest"

  - Addressing response action: "http://server.xfelauthwebservice.xfel.eu/Authentication/loginResponse"

  - SOAP Fault: "http://server.xfelauthwebservice.xfel.eu/":DecoderException (literal)
    - SOAP Fault addressing action: "http://server.xfelauthwebservice.xfel.eu/Authentication/login/Fault/DecoderException"

  - SOAP Fault: "http://server.xfelauthwebservice.xfel.eu/":UnsupportedEncodingException (literal)
    - SOAP Fault addressing action: "http://server.xfelauthwebservice.xfel.eu/Authentication/login/Fault/UnsupportedEncodingException"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__login(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__login*                         ns1__login_,
    // response parameters:
    ns1__loginResponse*                 ns1__loginResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__login(
    struct soap *soap,
    // request parameters:
    ns1__login*                         ns1__login_,
    // response parameters:
    ns1__loginResponse*                 ns1__loginResponse_
  );
@endcode

C++ proxy class (defined in soapAuthenticationPortBindingProxy.h):
@code
  class AuthenticationPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapAuthenticationPortBindingService.h):
@code
  class AuthenticationPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	login document
//gsoap ns1  service method-encoding:	login literal
//gsoap ns1  service method-action:	login ""
//gsoap ns1  service method-output-action:	login http://server.xfelauthwebservice.xfel.eu/Authentication/loginResponse
//gsoap ns1  service method-fault:	login ns1__DecoderException_
//gsoap ns1  service method-fault-action:	login http://server.xfelauthwebservice.xfel.eu/Authentication/login/Fault/DecoderException
//gsoap ns1  service method-fault:	login ns1__UnsupportedEncodingException_
//gsoap ns1  service method-fault-action:	login http://server.xfelauthwebservice.xfel.eu/Authentication/login/Fault/UnsupportedEncodingException
int __ns1__login(
    ns1__login*                         ns1__login_,	///< Request parameter
    ns1__loginResponse*                 ns1__loginResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns2 Top-level root elements of schema ""

@section ns1 Top-level root elements of schema "http://server.xfelauthwebservice.xfel.eu/"

  - <ns1:DecoderException> (use wsdl2h option -g to auto-generate)

  - <ns1:UnsupportedEncodingException> (use wsdl2h option -g to auto-generate)

  - <ns1:getUserNonce> (use wsdl2h option -g to auto-generate)

  - <ns1:getUserNonceResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:login> (use wsdl2h option -g to auto-generate)

  - <ns1:loginResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:logout> (use wsdl2h option -g to auto-generate)

  - <ns1:logoutResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:sessionsByIp> (use wsdl2h option -g to auto-generate)

  - <ns1:sessionsByIpResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:singleSignOn> (use wsdl2h option -g to auto-generate)

  - <ns1:singleSignOnResponse> (use wsdl2h option -g to auto-generate)

*/

/* End of ClientAuthentication.h */
