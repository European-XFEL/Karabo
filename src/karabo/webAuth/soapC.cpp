/* soapC.cpp
   Generated by gSOAP 2.8.4 from ClientAuthentication.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.4 2013-04-19 08:52:45 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns1__UnsupportedEncodingException:
		return soap_in_ns1__UnsupportedEncodingException(soap, NULL, NULL, "ns1:UnsupportedEncodingException");
	case SOAP_TYPE_ns1__DecoderException:
		return soap_in_ns1__DecoderException(soap, NULL, NULL, "ns1:DecoderException");
	case SOAP_TYPE_ns1__loginResponse:
		return soap_in_ns1__loginResponse(soap, NULL, NULL, "ns1:loginResponse");
	case SOAP_TYPE_ns1__login:
		return soap_in_ns1__login(soap, NULL, NULL, "ns1:login");
	case SOAP_TYPE_ns1__singleSignOnResponse:
		return soap_in_ns1__singleSignOnResponse(soap, NULL, NULL, "ns1:singleSignOnResponse");
	case SOAP_TYPE_ns1__singleSignOn:
		return soap_in_ns1__singleSignOn(soap, NULL, NULL, "ns1:singleSignOn");
	case SOAP_TYPE_ns1__logoutResponse:
		return soap_in_ns1__logoutResponse(soap, NULL, NULL, "ns1:logoutResponse");
	case SOAP_TYPE_ns1__logout:
		return soap_in_ns1__logout(soap, NULL, NULL, "ns1:logout");
	case SOAP_TYPE_ns1__sessionsByIpResponse:
		return soap_in_ns1__sessionsByIpResponse(soap, NULL, NULL, "ns1:sessionsByIpResponse");
	case SOAP_TYPE_ns1__sessionsByIp:
		return soap_in_ns1__sessionsByIp(soap, NULL, NULL, "ns1:sessionsByIp");
	case SOAP_TYPE_ns1__xfelSession:
		return soap_in_ns1__xfelSession(soap, NULL, NULL, "ns1:xfelSession");
	case SOAP_TYPE_ns1__getUserNonceResponse:
		return soap_in_ns1__getUserNonceResponse(soap, NULL, NULL, "ns1:getUserNonceResponse");
	case SOAP_TYPE_ns1__getUserNonce:
		return soap_in_ns1__getUserNonce(soap, NULL, NULL, "ns1:getUserNonce");
	case SOAP_TYPE_xsd__integer:
		return soap_in_xsd__integer(soap, NULL, NULL, "xsd:integer");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons1__getUserNonceResponse:
		return soap_in_PointerTons1__getUserNonceResponse(soap, NULL, NULL, "ns1:getUserNonceResponse");
	case SOAP_TYPE_PointerTons1__getUserNonce:
		return soap_in_PointerTons1__getUserNonce(soap, NULL, NULL, "ns1:getUserNonce");
	case SOAP_TYPE_PointerTons1__sessionsByIpResponse:
		return soap_in_PointerTons1__sessionsByIpResponse(soap, NULL, NULL, "ns1:sessionsByIpResponse");
	case SOAP_TYPE_PointerTons1__sessionsByIp:
		return soap_in_PointerTons1__sessionsByIp(soap, NULL, NULL, "ns1:sessionsByIp");
	case SOAP_TYPE_PointerTons1__singleSignOnResponse:
		return soap_in_PointerTons1__singleSignOnResponse(soap, NULL, NULL, "ns1:singleSignOnResponse");
	case SOAP_TYPE_PointerTons1__singleSignOn:
		return soap_in_PointerTons1__singleSignOn(soap, NULL, NULL, "ns1:singleSignOn");
	case SOAP_TYPE_PointerTons1__logoutResponse:
		return soap_in_PointerTons1__logoutResponse(soap, NULL, NULL, "ns1:logoutResponse");
	case SOAP_TYPE_PointerTons1__logout:
		return soap_in_PointerTons1__logout(soap, NULL, NULL, "ns1:logout");
	case SOAP_TYPE_PointerTons1__loginResponse:
		return soap_in_PointerTons1__loginResponse(soap, NULL, NULL, "ns1:loginResponse");
	case SOAP_TYPE_PointerTons1__login:
		return soap_in_PointerTons1__login(soap, NULL, NULL, "ns1:login");
	case SOAP_TYPE_PointerTons1__UnsupportedEncodingException:
		return soap_in_PointerTons1__UnsupportedEncodingException(soap, NULL, NULL, "ns1:UnsupportedEncodingException");
	case SOAP_TYPE_PointerTons1__DecoderException:
		return soap_in_PointerTons1__DecoderException(soap, NULL, NULL, "ns1:DecoderException");
	case SOAP_TYPE_PointerTobool:
		return soap_in_PointerTobool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_PointerToxsd__integer:
		return soap_in_PointerToxsd__integer(soap, NULL, NULL, "xsd:integer");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTons1__xfelSession:
		return soap_in_PointerTons1__xfelSession(soap, NULL, NULL, "ns1:xfelSession");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:UnsupportedEncodingException"))
		{	*type = SOAP_TYPE_ns1__UnsupportedEncodingException;
			return soap_in_ns1__UnsupportedEncodingException(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DecoderException"))
		{	*type = SOAP_TYPE_ns1__DecoderException;
			return soap_in_ns1__DecoderException(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:loginResponse"))
		{	*type = SOAP_TYPE_ns1__loginResponse;
			return soap_in_ns1__loginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:login"))
		{	*type = SOAP_TYPE_ns1__login;
			return soap_in_ns1__login(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:singleSignOnResponse"))
		{	*type = SOAP_TYPE_ns1__singleSignOnResponse;
			return soap_in_ns1__singleSignOnResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:singleSignOn"))
		{	*type = SOAP_TYPE_ns1__singleSignOn;
			return soap_in_ns1__singleSignOn(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:logoutResponse"))
		{	*type = SOAP_TYPE_ns1__logoutResponse;
			return soap_in_ns1__logoutResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:logout"))
		{	*type = SOAP_TYPE_ns1__logout;
			return soap_in_ns1__logout(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:sessionsByIpResponse"))
		{	*type = SOAP_TYPE_ns1__sessionsByIpResponse;
			return soap_in_ns1__sessionsByIpResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:sessionsByIp"))
		{	*type = SOAP_TYPE_ns1__sessionsByIp;
			return soap_in_ns1__sessionsByIp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:xfelSession"))
		{	*type = SOAP_TYPE_ns1__xfelSession;
			return soap_in_ns1__xfelSession(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getUserNonceResponse"))
		{	*type = SOAP_TYPE_ns1__getUserNonceResponse;
			return soap_in_ns1__getUserNonceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getUserNonce"))
		{	*type = SOAP_TYPE_ns1__getUserNonce;
			return soap_in_ns1__getUserNonce(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:integer"))
		{	*type = SOAP_TYPE_xsd__integer;
			return soap_in_xsd__integer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns1__UnsupportedEncodingException:
		return ((ns1__UnsupportedEncodingException *)ptr)->soap_out(soap, tag, id, "ns1:UnsupportedEncodingException");
	case SOAP_TYPE_ns1__DecoderException:
		return ((ns1__DecoderException *)ptr)->soap_out(soap, tag, id, "ns1:DecoderException");
	case SOAP_TYPE_ns1__loginResponse:
		return ((ns1__loginResponse *)ptr)->soap_out(soap, tag, id, "ns1:loginResponse");
	case SOAP_TYPE_ns1__login:
		return ((ns1__login *)ptr)->soap_out(soap, tag, id, "ns1:login");
	case SOAP_TYPE_ns1__singleSignOnResponse:
		return ((ns1__singleSignOnResponse *)ptr)->soap_out(soap, tag, id, "ns1:singleSignOnResponse");
	case SOAP_TYPE_ns1__singleSignOn:
		return ((ns1__singleSignOn *)ptr)->soap_out(soap, tag, id, "ns1:singleSignOn");
	case SOAP_TYPE_ns1__logoutResponse:
		return ((ns1__logoutResponse *)ptr)->soap_out(soap, tag, id, "ns1:logoutResponse");
	case SOAP_TYPE_ns1__logout:
		return ((ns1__logout *)ptr)->soap_out(soap, tag, id, "ns1:logout");
	case SOAP_TYPE_ns1__sessionsByIpResponse:
		return ((ns1__sessionsByIpResponse *)ptr)->soap_out(soap, tag, id, "ns1:sessionsByIpResponse");
	case SOAP_TYPE_ns1__sessionsByIp:
		return ((ns1__sessionsByIp *)ptr)->soap_out(soap, tag, id, "ns1:sessionsByIp");
	case SOAP_TYPE_ns1__xfelSession:
		return ((ns1__xfelSession *)ptr)->soap_out(soap, tag, id, "ns1:xfelSession");
	case SOAP_TYPE_ns1__getUserNonceResponse:
		return ((ns1__getUserNonceResponse *)ptr)->soap_out(soap, tag, id, "ns1:getUserNonceResponse");
	case SOAP_TYPE_ns1__getUserNonce:
		return ((ns1__getUserNonce *)ptr)->soap_out(soap, tag, id, "ns1:getUserNonce");
	case SOAP_TYPE_xsd__integer:
		return soap_out_xsd__integer(soap, tag, id, (const std::string *)ptr, "xsd:integer");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons1__getUserNonceResponse:
		return soap_out_PointerTons1__getUserNonceResponse(soap, tag, id, (ns1__getUserNonceResponse *const*)ptr, "ns1:getUserNonceResponse");
	case SOAP_TYPE_PointerTons1__getUserNonce:
		return soap_out_PointerTons1__getUserNonce(soap, tag, id, (ns1__getUserNonce *const*)ptr, "ns1:getUserNonce");
	case SOAP_TYPE_PointerTons1__sessionsByIpResponse:
		return soap_out_PointerTons1__sessionsByIpResponse(soap, tag, id, (ns1__sessionsByIpResponse *const*)ptr, "ns1:sessionsByIpResponse");
	case SOAP_TYPE_PointerTons1__sessionsByIp:
		return soap_out_PointerTons1__sessionsByIp(soap, tag, id, (ns1__sessionsByIp *const*)ptr, "ns1:sessionsByIp");
	case SOAP_TYPE_PointerTons1__singleSignOnResponse:
		return soap_out_PointerTons1__singleSignOnResponse(soap, tag, id, (ns1__singleSignOnResponse *const*)ptr, "ns1:singleSignOnResponse");
	case SOAP_TYPE_PointerTons1__singleSignOn:
		return soap_out_PointerTons1__singleSignOn(soap, tag, id, (ns1__singleSignOn *const*)ptr, "ns1:singleSignOn");
	case SOAP_TYPE_PointerTons1__logoutResponse:
		return soap_out_PointerTons1__logoutResponse(soap, tag, id, (ns1__logoutResponse *const*)ptr, "ns1:logoutResponse");
	case SOAP_TYPE_PointerTons1__logout:
		return soap_out_PointerTons1__logout(soap, tag, id, (ns1__logout *const*)ptr, "ns1:logout");
	case SOAP_TYPE_PointerTons1__loginResponse:
		return soap_out_PointerTons1__loginResponse(soap, tag, id, (ns1__loginResponse *const*)ptr, "ns1:loginResponse");
	case SOAP_TYPE_PointerTons1__login:
		return soap_out_PointerTons1__login(soap, tag, id, (ns1__login *const*)ptr, "ns1:login");
	case SOAP_TYPE_PointerTons1__UnsupportedEncodingException:
		return soap_out_PointerTons1__UnsupportedEncodingException(soap, tag, id, (ns1__UnsupportedEncodingException *const*)ptr, "ns1:UnsupportedEncodingException");
	case SOAP_TYPE_PointerTons1__DecoderException:
		return soap_out_PointerTons1__DecoderException(soap, tag, id, (ns1__DecoderException *const*)ptr, "ns1:DecoderException");
	case SOAP_TYPE_PointerTobool:
		return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
	case SOAP_TYPE_PointerToxsd__integer:
		return soap_out_PointerToxsd__integer(soap, tag, id, (std::string *const*)ptr, "xsd:integer");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTons1__xfelSession:
		return soap_out_PointerTons1__xfelSession(soap, tag, id, (ns1__xfelSession *const*)ptr, "ns1:xfelSession");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns1__UnsupportedEncodingException:
		((ns1__UnsupportedEncodingException *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__DecoderException:
		((ns1__DecoderException *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__loginResponse:
		((ns1__loginResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__login:
		((ns1__login *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__singleSignOnResponse:
		((ns1__singleSignOnResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__singleSignOn:
		((ns1__singleSignOn *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__logoutResponse:
		((ns1__logoutResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__logout:
		((ns1__logout *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__sessionsByIpResponse:
		((ns1__sessionsByIpResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__sessionsByIp:
		((ns1__sessionsByIp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__xfelSession:
		((ns1__xfelSession *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getUserNonceResponse:
		((ns1__getUserNonceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getUserNonce:
		((ns1__getUserNonce *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__integer:
		soap_serialize_xsd__integer(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE___ns1__getUserNonce:
		soap_serialize___ns1__getUserNonce(soap, (const struct __ns1__getUserNonce *)ptr);
		break;
	case SOAP_TYPE___ns1__sessionsByIp:
		soap_serialize___ns1__sessionsByIp(soap, (const struct __ns1__sessionsByIp *)ptr);
		break;
	case SOAP_TYPE___ns1__singleSignOn:
		soap_serialize___ns1__singleSignOn(soap, (const struct __ns1__singleSignOn *)ptr);
		break;
	case SOAP_TYPE___ns1__logout:
		soap_serialize___ns1__logout(soap, (const struct __ns1__logout *)ptr);
		break;
	case SOAP_TYPE___ns1__login:
		soap_serialize___ns1__login(soap, (const struct __ns1__login *)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getUserNonceResponse:
		soap_serialize_PointerTons1__getUserNonceResponse(soap, (ns1__getUserNonceResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getUserNonce:
		soap_serialize_PointerTons1__getUserNonce(soap, (ns1__getUserNonce *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__sessionsByIpResponse:
		soap_serialize_PointerTons1__sessionsByIpResponse(soap, (ns1__sessionsByIpResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__sessionsByIp:
		soap_serialize_PointerTons1__sessionsByIp(soap, (ns1__sessionsByIp *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__singleSignOnResponse:
		soap_serialize_PointerTons1__singleSignOnResponse(soap, (ns1__singleSignOnResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__singleSignOn:
		soap_serialize_PointerTons1__singleSignOn(soap, (ns1__singleSignOn *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__logoutResponse:
		soap_serialize_PointerTons1__logoutResponse(soap, (ns1__logoutResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__logout:
		soap_serialize_PointerTons1__logout(soap, (ns1__logout *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__loginResponse:
		soap_serialize_PointerTons1__loginResponse(soap, (ns1__loginResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__login:
		soap_serialize_PointerTons1__login(soap, (ns1__login *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__UnsupportedEncodingException:
		soap_serialize_PointerTons1__UnsupportedEncodingException(soap, (ns1__UnsupportedEncodingException *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__DecoderException:
		soap_serialize_PointerTons1__DecoderException(soap, (ns1__DecoderException *const*)ptr);
		break;
	case SOAP_TYPE_PointerTobool:
		soap_serialize_PointerTobool(soap, (bool *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__integer:
		soap_serialize_PointerToxsd__integer(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__xfelSession:
		soap_serialize_PointerTons1__xfelSession(soap, (ns1__xfelSession *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getUserNonce:
		return (void*)soap_instantiate_ns1__getUserNonce(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getUserNonceResponse:
		return (void*)soap_instantiate_ns1__getUserNonceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__xfelSession:
		return (void*)soap_instantiate_ns1__xfelSession(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__sessionsByIp:
		return (void*)soap_instantiate_ns1__sessionsByIp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__sessionsByIpResponse:
		return (void*)soap_instantiate_ns1__sessionsByIpResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__logout:
		return (void*)soap_instantiate_ns1__logout(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__logoutResponse:
		return (void*)soap_instantiate_ns1__logoutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__singleSignOn:
		return (void*)soap_instantiate_ns1__singleSignOn(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__singleSignOnResponse:
		return (void*)soap_instantiate_ns1__singleSignOnResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__login:
		return (void*)soap_instantiate_ns1__login(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__loginResponse:
		return (void*)soap_instantiate_ns1__loginResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__DecoderException:
		return (void*)soap_instantiate_ns1__DecoderException(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__UnsupportedEncodingException:
		return (void*)soap_instantiate_ns1__UnsupportedEncodingException(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE___ns1__login:
		return (void*)soap_instantiate___ns1__login(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__logout:
		return (void*)soap_instantiate___ns1__logout(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__singleSignOn:
		return (void*)soap_instantiate___ns1__singleSignOn(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__sessionsByIp:
		return (void*)soap_instantiate___ns1__sessionsByIp(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getUserNonce:
		return (void*)soap_instantiate___ns1__getUserNonce(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__integer:
		return (void*)soap_instantiate_xsd__integer(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns1__getUserNonce:
		if (p->size < 0)
			SOAP_DELETE((ns1__getUserNonce*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__getUserNonce*)p->ptr);
		break;
	case SOAP_TYPE_ns1__getUserNonceResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__getUserNonceResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__getUserNonceResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__xfelSession:
		if (p->size < 0)
			SOAP_DELETE((ns1__xfelSession*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__xfelSession*)p->ptr);
		break;
	case SOAP_TYPE_ns1__sessionsByIp:
		if (p->size < 0)
			SOAP_DELETE((ns1__sessionsByIp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__sessionsByIp*)p->ptr);
		break;
	case SOAP_TYPE_ns1__sessionsByIpResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__sessionsByIpResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__sessionsByIpResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__logout:
		if (p->size < 0)
			SOAP_DELETE((ns1__logout*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__logout*)p->ptr);
		break;
	case SOAP_TYPE_ns1__logoutResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__logoutResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__logoutResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__singleSignOn:
		if (p->size < 0)
			SOAP_DELETE((ns1__singleSignOn*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__singleSignOn*)p->ptr);
		break;
	case SOAP_TYPE_ns1__singleSignOnResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__singleSignOnResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__singleSignOnResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__login:
		if (p->size < 0)
			SOAP_DELETE((ns1__login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__login*)p->ptr);
		break;
	case SOAP_TYPE_ns1__loginResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__loginResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__loginResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__DecoderException:
		if (p->size < 0)
			SOAP_DELETE((ns1__DecoderException*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__DecoderException*)p->ptr);
		break;
	case SOAP_TYPE_ns1__UnsupportedEncodingException:
		if (p->size < 0)
			SOAP_DELETE((ns1__UnsupportedEncodingException*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__UnsupportedEncodingException*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
	case SOAP_TYPE___ns1__login:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__login*)p->ptr);
		break;
	case SOAP_TYPE___ns1__logout:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__logout*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__logout*)p->ptr);
		break;
	case SOAP_TYPE___ns1__singleSignOn:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__singleSignOn*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__singleSignOn*)p->ptr);
		break;
	case SOAP_TYPE___ns1__sessionsByIp:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__sessionsByIp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__sessionsByIp*)p->ptr);
		break;
	case SOAP_TYPE___ns1__getUserNonce:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__getUserNonce*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__getUserNonce*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_xsd__integer:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__UnsupportedEncodingException::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__UnsupportedEncodingException::message = NULL;
	/* transient soap skipped */
}

void ns1__UnsupportedEncodingException::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__UnsupportedEncodingException::message);
	/* transient soap skipped */
}

int ns1__UnsupportedEncodingException::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__UnsupportedEncodingException(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UnsupportedEncodingException(struct soap *soap, const char *tag, int id, const ns1__UnsupportedEncodingException *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__UnsupportedEncodingException), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "message", -1, &(a->ns1__UnsupportedEncodingException::message), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__UnsupportedEncodingException::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__UnsupportedEncodingException(soap, tag, this, type);
}

SOAP_FMAC3 ns1__UnsupportedEncodingException * SOAP_FMAC4 soap_in_ns1__UnsupportedEncodingException(struct soap *soap, const char *tag, ns1__UnsupportedEncodingException *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__UnsupportedEncodingException *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__UnsupportedEncodingException, sizeof(ns1__UnsupportedEncodingException), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__UnsupportedEncodingException)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__UnsupportedEncodingException *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_message1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "message", &(a->ns1__UnsupportedEncodingException::message), "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__UnsupportedEncodingException *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__UnsupportedEncodingException, 0, sizeof(ns1__UnsupportedEncodingException), 0, soap_copy_ns1__UnsupportedEncodingException);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__UnsupportedEncodingException::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__UnsupportedEncodingException);
	if (this->soap_out(soap, tag?tag:"ns1:UnsupportedEncodingException", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__UnsupportedEncodingException::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__UnsupportedEncodingException(soap, this, tag, type);
}

SOAP_FMAC3 ns1__UnsupportedEncodingException * SOAP_FMAC4 soap_get_ns1__UnsupportedEncodingException(struct soap *soap, ns1__UnsupportedEncodingException *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__UnsupportedEncodingException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__UnsupportedEncodingException * SOAP_FMAC2 soap_instantiate_ns1__UnsupportedEncodingException(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__UnsupportedEncodingException(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__UnsupportedEncodingException, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__UnsupportedEncodingException);
		if (size)
			*size = sizeof(ns1__UnsupportedEncodingException);
		((ns1__UnsupportedEncodingException*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__UnsupportedEncodingException[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__UnsupportedEncodingException);
		for (int i = 0; i < n; i++)
			((ns1__UnsupportedEncodingException*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__UnsupportedEncodingException*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__UnsupportedEncodingException(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__UnsupportedEncodingException %p -> %p\n", q, p));
	*(ns1__UnsupportedEncodingException*)p = *(ns1__UnsupportedEncodingException*)q;
}

void ns1__DecoderException::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__DecoderException::message = NULL;
	/* transient soap skipped */
}

void ns1__DecoderException::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__DecoderException::message);
	/* transient soap skipped */
}

int ns1__DecoderException::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__DecoderException(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DecoderException(struct soap *soap, const char *tag, int id, const ns1__DecoderException *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__DecoderException), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "message", -1, &(a->ns1__DecoderException::message), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__DecoderException::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__DecoderException(soap, tag, this, type);
}

SOAP_FMAC3 ns1__DecoderException * SOAP_FMAC4 soap_in_ns1__DecoderException(struct soap *soap, const char *tag, ns1__DecoderException *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__DecoderException *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__DecoderException, sizeof(ns1__DecoderException), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__DecoderException)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__DecoderException *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_message1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "message", &(a->ns1__DecoderException::message), "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__DecoderException *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__DecoderException, 0, sizeof(ns1__DecoderException), 0, soap_copy_ns1__DecoderException);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__DecoderException::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__DecoderException);
	if (this->soap_out(soap, tag?tag:"ns1:DecoderException", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__DecoderException::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__DecoderException(soap, this, tag, type);
}

SOAP_FMAC3 ns1__DecoderException * SOAP_FMAC4 soap_get_ns1__DecoderException(struct soap *soap, ns1__DecoderException *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__DecoderException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__DecoderException * SOAP_FMAC2 soap_instantiate_ns1__DecoderException(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__DecoderException(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__DecoderException, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__DecoderException);
		if (size)
			*size = sizeof(ns1__DecoderException);
		((ns1__DecoderException*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__DecoderException[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__DecoderException);
		for (int i = 0; i < n; i++)
			((ns1__DecoderException*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__DecoderException*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DecoderException(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__DecoderException %p -> %p\n", q, p));
	*(ns1__DecoderException*)p = *(ns1__DecoderException*)q;
}

void ns1__loginResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__loginResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns1__loginResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__xfelSession(soap, &this->ns1__loginResponse::return_);
	/* transient soap skipped */
}

int ns1__loginResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__loginResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__loginResponse(struct soap *soap, const char *tag, int id, const ns1__loginResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__loginResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__xfelSession(soap, "return", -1, &(a->ns1__loginResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__loginResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__loginResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__loginResponse * SOAP_FMAC4 soap_in_ns1__loginResponse(struct soap *soap, const char *tag, ns1__loginResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__loginResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__loginResponse, sizeof(ns1__loginResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__loginResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__loginResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__xfelSession(soap, "return", &(a->ns1__loginResponse::return_), "ns1:xfelSession"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__loginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__loginResponse, 0, sizeof(ns1__loginResponse), 0, soap_copy_ns1__loginResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__loginResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__loginResponse);
	if (this->soap_out(soap, tag?tag:"ns1:loginResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__loginResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__loginResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__loginResponse * SOAP_FMAC4 soap_get_ns1__loginResponse(struct soap *soap, ns1__loginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__loginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__loginResponse * SOAP_FMAC2 soap_instantiate_ns1__loginResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__loginResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__loginResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__loginResponse);
		if (size)
			*size = sizeof(ns1__loginResponse);
		((ns1__loginResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__loginResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__loginResponse);
		for (int i = 0; i < n; i++)
			((ns1__loginResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__loginResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__loginResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__loginResponse %p -> %p\n", q, p));
	*(ns1__loginResponse*)p = *(ns1__loginResponse*)q;
}

void ns1__login::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__login::username = NULL;
	this->ns1__login::password = NULL;
	this->ns1__login::provider = NULL;
	this->ns1__login::ipAddress = NULL;
	this->ns1__login::hostname = NULL;
	this->ns1__login::portNumber = NULL;
	this->ns1__login::nonce = NULL;
	this->ns1__login::software = NULL;
	this->ns1__login::time = NULL;
	/* transient soap skipped */
}

void ns1__login::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__login::username);
	soap_serialize_PointerTostd__string(soap, &this->ns1__login::password);
	soap_serialize_PointerTostd__string(soap, &this->ns1__login::provider);
	soap_serialize_PointerTostd__string(soap, &this->ns1__login::ipAddress);
	soap_serialize_PointerTostd__string(soap, &this->ns1__login::hostname);
	soap_serialize_PointerTostd__string(soap, &this->ns1__login::portNumber);
	soap_serialize_PointerTostd__string(soap, &this->ns1__login::nonce);
	soap_serialize_PointerTostd__string(soap, &this->ns1__login::software);
	soap_serialize_PointerTostd__string(soap, &this->ns1__login::time);
	/* transient soap skipped */
}

int ns1__login::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__login(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__login(struct soap *soap, const char *tag, int id, const ns1__login *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__login), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "username", -1, &(a->ns1__login::username), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "password", -1, &(a->ns1__login::password), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "provider", -1, &(a->ns1__login::provider), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ipAddress", -1, &(a->ns1__login::ipAddress), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "hostname", -1, &(a->ns1__login::hostname), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "portNumber", -1, &(a->ns1__login::portNumber), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "nonce", -1, &(a->ns1__login::nonce), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "software", -1, &(a->ns1__login::software), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "time", -1, &(a->ns1__login::time), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__login::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__login(soap, tag, this, type);
}

SOAP_FMAC3 ns1__login * SOAP_FMAC4 soap_in_ns1__login(struct soap *soap, const char *tag, ns1__login *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__login *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__login, sizeof(ns1__login), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__login)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__login *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_username1 = 1;
	size_t soap_flag_password1 = 1;
	size_t soap_flag_provider1 = 1;
	size_t soap_flag_ipAddress1 = 1;
	size_t soap_flag_hostname1 = 1;
	size_t soap_flag_portNumber1 = 1;
	size_t soap_flag_nonce1 = 1;
	size_t soap_flag_software1 = 1;
	size_t soap_flag_time1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "username", &(a->ns1__login::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "password", &(a->ns1__login::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			if (soap_flag_provider1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "provider", &(a->ns1__login::provider), "xsd:string"))
				{	soap_flag_provider1--;
					continue;
				}
			if (soap_flag_ipAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ipAddress", &(a->ns1__login::ipAddress), "xsd:string"))
				{	soap_flag_ipAddress1--;
					continue;
				}
			if (soap_flag_hostname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "hostname", &(a->ns1__login::hostname), "xsd:string"))
				{	soap_flag_hostname1--;
					continue;
				}
			if (soap_flag_portNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "portNumber", &(a->ns1__login::portNumber), "xsd:string"))
				{	soap_flag_portNumber1--;
					continue;
				}
			if (soap_flag_nonce1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "nonce", &(a->ns1__login::nonce), "xsd:string"))
				{	soap_flag_nonce1--;
					continue;
				}
			if (soap_flag_software1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "software", &(a->ns1__login::software), "xsd:string"))
				{	soap_flag_software1--;
					continue;
				}
			if (soap_flag_time1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "time", &(a->ns1__login::time), "xsd:string"))
				{	soap_flag_time1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__login *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__login, 0, sizeof(ns1__login), 0, soap_copy_ns1__login);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__login::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__login);
	if (this->soap_out(soap, tag?tag:"ns1:login", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__login::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__login(soap, this, tag, type);
}

SOAP_FMAC3 ns1__login * SOAP_FMAC4 soap_get_ns1__login(struct soap *soap, ns1__login *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__login * SOAP_FMAC2 soap_instantiate_ns1__login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__login);
		if (size)
			*size = sizeof(ns1__login);
		((ns1__login*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__login[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__login);
		for (int i = 0; i < n; i++)
			((ns1__login*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__login %p -> %p\n", q, p));
	*(ns1__login*)p = *(ns1__login*)q;
}

void ns1__singleSignOnResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__singleSignOnResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns1__singleSignOnResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__xfelSession(soap, &this->ns1__singleSignOnResponse::return_);
	/* transient soap skipped */
}

int ns1__singleSignOnResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__singleSignOnResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__singleSignOnResponse(struct soap *soap, const char *tag, int id, const ns1__singleSignOnResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__singleSignOnResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__xfelSession(soap, "return", -1, &(a->ns1__singleSignOnResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__singleSignOnResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__singleSignOnResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__singleSignOnResponse * SOAP_FMAC4 soap_in_ns1__singleSignOnResponse(struct soap *soap, const char *tag, ns1__singleSignOnResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__singleSignOnResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__singleSignOnResponse, sizeof(ns1__singleSignOnResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__singleSignOnResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__singleSignOnResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__xfelSession(soap, "return", &(a->ns1__singleSignOnResponse::return_), "ns1:xfelSession"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__singleSignOnResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__singleSignOnResponse, 0, sizeof(ns1__singleSignOnResponse), 0, soap_copy_ns1__singleSignOnResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__singleSignOnResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__singleSignOnResponse);
	if (this->soap_out(soap, tag?tag:"ns1:singleSignOnResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__singleSignOnResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__singleSignOnResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__singleSignOnResponse * SOAP_FMAC4 soap_get_ns1__singleSignOnResponse(struct soap *soap, ns1__singleSignOnResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__singleSignOnResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__singleSignOnResponse * SOAP_FMAC2 soap_instantiate_ns1__singleSignOnResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__singleSignOnResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__singleSignOnResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__singleSignOnResponse);
		if (size)
			*size = sizeof(ns1__singleSignOnResponse);
		((ns1__singleSignOnResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__singleSignOnResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__singleSignOnResponse);
		for (int i = 0; i < n; i++)
			((ns1__singleSignOnResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__singleSignOnResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__singleSignOnResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__singleSignOnResponse %p -> %p\n", q, p));
	*(ns1__singleSignOnResponse*)p = *(ns1__singleSignOnResponse*)q;
}

void ns1__singleSignOn::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__singleSignOn::username = NULL;
	this->ns1__singleSignOn::provider = NULL;
	this->ns1__singleSignOn::ipAddress = NULL;
	/* transient soap skipped */
}

void ns1__singleSignOn::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__singleSignOn::username);
	soap_serialize_PointerTostd__string(soap, &this->ns1__singleSignOn::provider);
	soap_serialize_PointerTostd__string(soap, &this->ns1__singleSignOn::ipAddress);
	/* transient soap skipped */
}

int ns1__singleSignOn::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__singleSignOn(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__singleSignOn(struct soap *soap, const char *tag, int id, const ns1__singleSignOn *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__singleSignOn), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "username", -1, &(a->ns1__singleSignOn::username), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "provider", -1, &(a->ns1__singleSignOn::provider), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ipAddress", -1, &(a->ns1__singleSignOn::ipAddress), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__singleSignOn::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__singleSignOn(soap, tag, this, type);
}

SOAP_FMAC3 ns1__singleSignOn * SOAP_FMAC4 soap_in_ns1__singleSignOn(struct soap *soap, const char *tag, ns1__singleSignOn *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__singleSignOn *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__singleSignOn, sizeof(ns1__singleSignOn), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__singleSignOn)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__singleSignOn *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_username1 = 1;
	size_t soap_flag_provider1 = 1;
	size_t soap_flag_ipAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "username", &(a->ns1__singleSignOn::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			if (soap_flag_provider1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "provider", &(a->ns1__singleSignOn::provider), "xsd:string"))
				{	soap_flag_provider1--;
					continue;
				}
			if (soap_flag_ipAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ipAddress", &(a->ns1__singleSignOn::ipAddress), "xsd:string"))
				{	soap_flag_ipAddress1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__singleSignOn *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__singleSignOn, 0, sizeof(ns1__singleSignOn), 0, soap_copy_ns1__singleSignOn);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__singleSignOn::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__singleSignOn);
	if (this->soap_out(soap, tag?tag:"ns1:singleSignOn", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__singleSignOn::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__singleSignOn(soap, this, tag, type);
}

SOAP_FMAC3 ns1__singleSignOn * SOAP_FMAC4 soap_get_ns1__singleSignOn(struct soap *soap, ns1__singleSignOn *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__singleSignOn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__singleSignOn * SOAP_FMAC2 soap_instantiate_ns1__singleSignOn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__singleSignOn(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__singleSignOn, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__singleSignOn);
		if (size)
			*size = sizeof(ns1__singleSignOn);
		((ns1__singleSignOn*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__singleSignOn[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__singleSignOn);
		for (int i = 0; i < n; i++)
			((ns1__singleSignOn*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__singleSignOn*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__singleSignOn(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__singleSignOn %p -> %p\n", q, p));
	*(ns1__singleSignOn*)p = *(ns1__singleSignOn*)q;
}

void ns1__logoutResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__logoutResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns1__logoutResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTobool(soap, &this->ns1__logoutResponse::return_);
	/* transient soap skipped */
}

int ns1__logoutResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__logoutResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__logoutResponse(struct soap *soap, const char *tag, int id, const ns1__logoutResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__logoutResponse), type))
		return soap->error;
	if (soap_out_PointerTobool(soap, "return", -1, &(a->ns1__logoutResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__logoutResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__logoutResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__logoutResponse * SOAP_FMAC4 soap_in_ns1__logoutResponse(struct soap *soap, const char *tag, ns1__logoutResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__logoutResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__logoutResponse, sizeof(ns1__logoutResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__logoutResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__logoutResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "return", &(a->ns1__logoutResponse::return_), "xsd:boolean"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__logoutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__logoutResponse, 0, sizeof(ns1__logoutResponse), 0, soap_copy_ns1__logoutResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__logoutResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__logoutResponse);
	if (this->soap_out(soap, tag?tag:"ns1:logoutResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__logoutResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__logoutResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__logoutResponse * SOAP_FMAC4 soap_get_ns1__logoutResponse(struct soap *soap, ns1__logoutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__logoutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__logoutResponse * SOAP_FMAC2 soap_instantiate_ns1__logoutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__logoutResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__logoutResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__logoutResponse);
		if (size)
			*size = sizeof(ns1__logoutResponse);
		((ns1__logoutResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__logoutResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__logoutResponse);
		for (int i = 0; i < n; i++)
			((ns1__logoutResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__logoutResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__logoutResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__logoutResponse %p -> %p\n", q, p));
	*(ns1__logoutResponse*)p = *(ns1__logoutResponse*)q;
}

void ns1__logout::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__logout::username = NULL;
	this->ns1__logout::provider = NULL;
	this->ns1__logout::sessionToken = NULL;
	/* transient soap skipped */
}

void ns1__logout::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__logout::username);
	soap_serialize_PointerTostd__string(soap, &this->ns1__logout::provider);
	soap_serialize_PointerTostd__string(soap, &this->ns1__logout::sessionToken);
	/* transient soap skipped */
}

int ns1__logout::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__logout(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__logout(struct soap *soap, const char *tag, int id, const ns1__logout *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__logout), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "username", -1, &(a->ns1__logout::username), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "provider", -1, &(a->ns1__logout::provider), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "sessionToken", -1, &(a->ns1__logout::sessionToken), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__logout::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__logout(soap, tag, this, type);
}

SOAP_FMAC3 ns1__logout * SOAP_FMAC4 soap_in_ns1__logout(struct soap *soap, const char *tag, ns1__logout *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__logout *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__logout, sizeof(ns1__logout), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__logout)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__logout *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_username1 = 1;
	size_t soap_flag_provider1 = 1;
	size_t soap_flag_sessionToken1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "username", &(a->ns1__logout::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			if (soap_flag_provider1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "provider", &(a->ns1__logout::provider), "xsd:string"))
				{	soap_flag_provider1--;
					continue;
				}
			if (soap_flag_sessionToken1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "sessionToken", &(a->ns1__logout::sessionToken), "xsd:string"))
				{	soap_flag_sessionToken1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__logout *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__logout, 0, sizeof(ns1__logout), 0, soap_copy_ns1__logout);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__logout::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__logout);
	if (this->soap_out(soap, tag?tag:"ns1:logout", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__logout::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__logout(soap, this, tag, type);
}

SOAP_FMAC3 ns1__logout * SOAP_FMAC4 soap_get_ns1__logout(struct soap *soap, ns1__logout *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__logout * SOAP_FMAC2 soap_instantiate_ns1__logout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__logout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__logout, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__logout);
		if (size)
			*size = sizeof(ns1__logout);
		((ns1__logout*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__logout[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__logout);
		for (int i = 0; i < n; i++)
			((ns1__logout*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__logout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__logout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__logout %p -> %p\n", q, p));
	*(ns1__logout*)p = *(ns1__logout*)q;
}

void ns1__sessionsByIpResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__sessionsByIpResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns1__sessionsByIpResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__sessionsByIpResponse::return_);
	/* transient soap skipped */
}

int ns1__sessionsByIpResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__sessionsByIpResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sessionsByIpResponse(struct soap *soap, const char *tag, int id, const ns1__sessionsByIpResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__sessionsByIpResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "return", -1, &(a->ns1__sessionsByIpResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__sessionsByIpResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__sessionsByIpResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__sessionsByIpResponse * SOAP_FMAC4 soap_in_ns1__sessionsByIpResponse(struct soap *soap, const char *tag, ns1__sessionsByIpResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__sessionsByIpResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__sessionsByIpResponse, sizeof(ns1__sessionsByIpResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__sessionsByIpResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__sessionsByIpResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "return", &(a->ns1__sessionsByIpResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__sessionsByIpResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__sessionsByIpResponse, 0, sizeof(ns1__sessionsByIpResponse), 0, soap_copy_ns1__sessionsByIpResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__sessionsByIpResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__sessionsByIpResponse);
	if (this->soap_out(soap, tag?tag:"ns1:sessionsByIpResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__sessionsByIpResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__sessionsByIpResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__sessionsByIpResponse * SOAP_FMAC4 soap_get_ns1__sessionsByIpResponse(struct soap *soap, ns1__sessionsByIpResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__sessionsByIpResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__sessionsByIpResponse * SOAP_FMAC2 soap_instantiate_ns1__sessionsByIpResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__sessionsByIpResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__sessionsByIpResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__sessionsByIpResponse);
		if (size)
			*size = sizeof(ns1__sessionsByIpResponse);
		((ns1__sessionsByIpResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__sessionsByIpResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__sessionsByIpResponse);
		for (int i = 0; i < n; i++)
			((ns1__sessionsByIpResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__sessionsByIpResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__sessionsByIpResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__sessionsByIpResponse %p -> %p\n", q, p));
	*(ns1__sessionsByIpResponse*)p = *(ns1__sessionsByIpResponse*)q;
}

void ns1__sessionsByIp::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__sessionsByIp::ipAddress = NULL;
	/* transient soap skipped */
}

void ns1__sessionsByIp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__sessionsByIp::ipAddress);
	/* transient soap skipped */
}

int ns1__sessionsByIp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__sessionsByIp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sessionsByIp(struct soap *soap, const char *tag, int id, const ns1__sessionsByIp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__sessionsByIp), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ipAddress", -1, &(a->ns1__sessionsByIp::ipAddress), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__sessionsByIp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__sessionsByIp(soap, tag, this, type);
}

SOAP_FMAC3 ns1__sessionsByIp * SOAP_FMAC4 soap_in_ns1__sessionsByIp(struct soap *soap, const char *tag, ns1__sessionsByIp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__sessionsByIp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__sessionsByIp, sizeof(ns1__sessionsByIp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__sessionsByIp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__sessionsByIp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ipAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ipAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ipAddress", &(a->ns1__sessionsByIp::ipAddress), "xsd:string"))
				{	soap_flag_ipAddress1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__sessionsByIp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__sessionsByIp, 0, sizeof(ns1__sessionsByIp), 0, soap_copy_ns1__sessionsByIp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__sessionsByIp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__sessionsByIp);
	if (this->soap_out(soap, tag?tag:"ns1:sessionsByIp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__sessionsByIp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__sessionsByIp(soap, this, tag, type);
}

SOAP_FMAC3 ns1__sessionsByIp * SOAP_FMAC4 soap_get_ns1__sessionsByIp(struct soap *soap, ns1__sessionsByIp *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__sessionsByIp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__sessionsByIp * SOAP_FMAC2 soap_instantiate_ns1__sessionsByIp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__sessionsByIp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__sessionsByIp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__sessionsByIp);
		if (size)
			*size = sizeof(ns1__sessionsByIp);
		((ns1__sessionsByIp*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__sessionsByIp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__sessionsByIp);
		for (int i = 0; i < n; i++)
			((ns1__sessionsByIp*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__sessionsByIp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__sessionsByIp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__sessionsByIp %p -> %p\n", q, p));
	*(ns1__sessionsByIp*)p = *(ns1__sessionsByIp*)q;
}

void ns1__xfelSession::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__xfelSession::familyName = NULL;
	this->ns1__xfelSession::firstName = NULL;
	this->ns1__xfelSession::operationResultMsg = NULL;
	this->ns1__xfelSession::operationSuccess = NULL;
	this->ns1__xfelSession::provider = NULL;
	this->ns1__xfelSession::roleDesc = NULL;
	this->ns1__xfelSession::roleId = NULL;
	this->ns1__xfelSession::sessionToken = NULL;
	this->ns1__xfelSession::softwareDesc = NULL;
	this->ns1__xfelSession::softwareId = NULL;
	this->ns1__xfelSession::userId = NULL;
	this->ns1__xfelSession::username = NULL;
	this->ns1__xfelSession::welcomeMessage = NULL;
	/* transient soap skipped */
}

void ns1__xfelSession::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__xfelSession::familyName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__xfelSession::firstName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__xfelSession::operationResultMsg);
	soap_serialize_PointerToint(soap, &this->ns1__xfelSession::operationSuccess);
	soap_serialize_PointerTostd__string(soap, &this->ns1__xfelSession::provider);
	soap_serialize_PointerTostd__string(soap, &this->ns1__xfelSession::roleDesc);
	soap_serialize_PointerToxsd__integer(soap, &this->ns1__xfelSession::roleId);
	soap_serialize_PointerTostd__string(soap, &this->ns1__xfelSession::sessionToken);
	soap_serialize_PointerTostd__string(soap, &this->ns1__xfelSession::softwareDesc);
	soap_serialize_PointerToxsd__integer(soap, &this->ns1__xfelSession::softwareId);
	soap_serialize_PointerToxsd__integer(soap, &this->ns1__xfelSession::userId);
	soap_serialize_PointerTostd__string(soap, &this->ns1__xfelSession::username);
	soap_serialize_PointerTostd__string(soap, &this->ns1__xfelSession::welcomeMessage);
	/* transient soap skipped */
}

int ns1__xfelSession::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__xfelSession(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__xfelSession(struct soap *soap, const char *tag, int id, const ns1__xfelSession *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__xfelSession), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "familyName", -1, &(a->ns1__xfelSession::familyName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "firstName", -1, &(a->ns1__xfelSession::firstName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "operationResultMsg", -1, &(a->ns1__xfelSession::operationResultMsg), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "operationSuccess", -1, &(a->ns1__xfelSession::operationSuccess), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "provider", -1, &(a->ns1__xfelSession::provider), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "roleDesc", -1, &(a->ns1__xfelSession::roleDesc), ""))
		return soap->error;
	if (soap_out_PointerToxsd__integer(soap, "roleId", -1, &(a->ns1__xfelSession::roleId), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "sessionToken", -1, &(a->ns1__xfelSession::sessionToken), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "softwareDesc", -1, &(a->ns1__xfelSession::softwareDesc), ""))
		return soap->error;
	if (soap_out_PointerToxsd__integer(soap, "softwareId", -1, &(a->ns1__xfelSession::softwareId), ""))
		return soap->error;
	if (soap_out_PointerToxsd__integer(soap, "userId", -1, &(a->ns1__xfelSession::userId), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "username", -1, &(a->ns1__xfelSession::username), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "welcomeMessage", -1, &(a->ns1__xfelSession::welcomeMessage), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__xfelSession::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__xfelSession(soap, tag, this, type);
}

SOAP_FMAC3 ns1__xfelSession * SOAP_FMAC4 soap_in_ns1__xfelSession(struct soap *soap, const char *tag, ns1__xfelSession *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__xfelSession *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__xfelSession, sizeof(ns1__xfelSession), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__xfelSession)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__xfelSession *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_familyName1 = 1;
	size_t soap_flag_firstName1 = 1;
	size_t soap_flag_operationResultMsg1 = 1;
	size_t soap_flag_operationSuccess1 = 1;
	size_t soap_flag_provider1 = 1;
	size_t soap_flag_roleDesc1 = 1;
	size_t soap_flag_roleId1 = 1;
	size_t soap_flag_sessionToken1 = 1;
	size_t soap_flag_softwareDesc1 = 1;
	size_t soap_flag_softwareId1 = 1;
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_username1 = 1;
	size_t soap_flag_welcomeMessage1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_familyName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "familyName", &(a->ns1__xfelSession::familyName), "xsd:string"))
				{	soap_flag_familyName1--;
					continue;
				}
			if (soap_flag_firstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "firstName", &(a->ns1__xfelSession::firstName), "xsd:string"))
				{	soap_flag_firstName1--;
					continue;
				}
			if (soap_flag_operationResultMsg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "operationResultMsg", &(a->ns1__xfelSession::operationResultMsg), "xsd:string"))
				{	soap_flag_operationResultMsg1--;
					continue;
				}
			if (soap_flag_operationSuccess1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "operationSuccess", &(a->ns1__xfelSession::operationSuccess), "xsd:int"))
				{	soap_flag_operationSuccess1--;
					continue;
				}
			if (soap_flag_provider1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "provider", &(a->ns1__xfelSession::provider), "xsd:string"))
				{	soap_flag_provider1--;
					continue;
				}
			if (soap_flag_roleDesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "roleDesc", &(a->ns1__xfelSession::roleDesc), "xsd:string"))
				{	soap_flag_roleDesc1--;
					continue;
				}
			if (soap_flag_roleId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerToxsd__integer(soap, "roleId", &(a->ns1__xfelSession::roleId), "xsd:integer"))
				{	soap_flag_roleId1--;
					continue;
				}
			if (soap_flag_sessionToken1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "sessionToken", &(a->ns1__xfelSession::sessionToken), "xsd:string"))
				{	soap_flag_sessionToken1--;
					continue;
				}
			if (soap_flag_softwareDesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "softwareDesc", &(a->ns1__xfelSession::softwareDesc), "xsd:string"))
				{	soap_flag_softwareDesc1--;
					continue;
				}
			if (soap_flag_softwareId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerToxsd__integer(soap, "softwareId", &(a->ns1__xfelSession::softwareId), "xsd:integer"))
				{	soap_flag_softwareId1--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerToxsd__integer(soap, "userId", &(a->ns1__xfelSession::userId), "xsd:integer"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "username", &(a->ns1__xfelSession::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			if (soap_flag_welcomeMessage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "welcomeMessage", &(a->ns1__xfelSession::welcomeMessage), "xsd:string"))
				{	soap_flag_welcomeMessage1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__xfelSession *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__xfelSession, 0, sizeof(ns1__xfelSession), 0, soap_copy_ns1__xfelSession);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__xfelSession::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__xfelSession);
	if (this->soap_out(soap, tag?tag:"ns1:xfelSession", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__xfelSession::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__xfelSession(soap, this, tag, type);
}

SOAP_FMAC3 ns1__xfelSession * SOAP_FMAC4 soap_get_ns1__xfelSession(struct soap *soap, ns1__xfelSession *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__xfelSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__xfelSession * SOAP_FMAC2 soap_instantiate_ns1__xfelSession(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__xfelSession(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__xfelSession, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__xfelSession);
		if (size)
			*size = sizeof(ns1__xfelSession);
		((ns1__xfelSession*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__xfelSession[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__xfelSession);
		for (int i = 0; i < n; i++)
			((ns1__xfelSession*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__xfelSession*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__xfelSession(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__xfelSession %p -> %p\n", q, p));
	*(ns1__xfelSession*)p = *(ns1__xfelSession*)q;
}

void ns1__getUserNonceResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getUserNonceResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns1__getUserNonceResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__xfelSession(soap, &this->ns1__getUserNonceResponse::return_);
	/* transient soap skipped */
}

int ns1__getUserNonceResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getUserNonceResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserNonceResponse(struct soap *soap, const char *tag, int id, const ns1__getUserNonceResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getUserNonceResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__xfelSession(soap, "return", -1, &(a->ns1__getUserNonceResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__getUserNonceResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getUserNonceResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getUserNonceResponse * SOAP_FMAC4 soap_in_ns1__getUserNonceResponse(struct soap *soap, const char *tag, ns1__getUserNonceResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getUserNonceResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getUserNonceResponse, sizeof(ns1__getUserNonceResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__getUserNonceResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__getUserNonceResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__xfelSession(soap, "return", &(a->ns1__getUserNonceResponse::return_), "ns1:xfelSession"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getUserNonceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getUserNonceResponse, 0, sizeof(ns1__getUserNonceResponse), 0, soap_copy_ns1__getUserNonceResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__getUserNonceResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__getUserNonceResponse);
	if (this->soap_out(soap, tag?tag:"ns1:getUserNonceResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getUserNonceResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getUserNonceResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getUserNonceResponse * SOAP_FMAC4 soap_get_ns1__getUserNonceResponse(struct soap *soap, ns1__getUserNonceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getUserNonceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__getUserNonceResponse * SOAP_FMAC2 soap_instantiate_ns1__getUserNonceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getUserNonceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getUserNonceResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__getUserNonceResponse);
		if (size)
			*size = sizeof(ns1__getUserNonceResponse);
		((ns1__getUserNonceResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__getUserNonceResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__getUserNonceResponse);
		for (int i = 0; i < n; i++)
			((ns1__getUserNonceResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__getUserNonceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserNonceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__getUserNonceResponse %p -> %p\n", q, p));
	*(ns1__getUserNonceResponse*)p = *(ns1__getUserNonceResponse*)q;
}

void ns1__getUserNonce::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getUserNonce::username = NULL;
	this->ns1__getUserNonce::provider = NULL;
	this->ns1__getUserNonce::ipAddress = NULL;
	/* transient soap skipped */
}

void ns1__getUserNonce::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__getUserNonce::username);
	soap_serialize_PointerTostd__string(soap, &this->ns1__getUserNonce::provider);
	soap_serialize_PointerTostd__string(soap, &this->ns1__getUserNonce::ipAddress);
	/* transient soap skipped */
}

int ns1__getUserNonce::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getUserNonce(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserNonce(struct soap *soap, const char *tag, int id, const ns1__getUserNonce *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getUserNonce), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "username", -1, &(a->ns1__getUserNonce::username), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "provider", -1, &(a->ns1__getUserNonce::provider), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ipAddress", -1, &(a->ns1__getUserNonce::ipAddress), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__getUserNonce::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getUserNonce(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getUserNonce * SOAP_FMAC4 soap_in_ns1__getUserNonce(struct soap *soap, const char *tag, ns1__getUserNonce *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getUserNonce *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getUserNonce, sizeof(ns1__getUserNonce), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__getUserNonce)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__getUserNonce *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_username1 = 1;
	size_t soap_flag_provider1 = 1;
	size_t soap_flag_ipAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "username", &(a->ns1__getUserNonce::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			if (soap_flag_provider1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "provider", &(a->ns1__getUserNonce::provider), "xsd:string"))
				{	soap_flag_provider1--;
					continue;
				}
			if (soap_flag_ipAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ipAddress", &(a->ns1__getUserNonce::ipAddress), "xsd:string"))
				{	soap_flag_ipAddress1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getUserNonce *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getUserNonce, 0, sizeof(ns1__getUserNonce), 0, soap_copy_ns1__getUserNonce);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__getUserNonce::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__getUserNonce);
	if (this->soap_out(soap, tag?tag:"ns1:getUserNonce", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getUserNonce::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getUserNonce(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getUserNonce * SOAP_FMAC4 soap_get_ns1__getUserNonce(struct soap *soap, ns1__getUserNonce *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getUserNonce(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__getUserNonce * SOAP_FMAC2 soap_instantiate_ns1__getUserNonce(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getUserNonce(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getUserNonce, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__getUserNonce);
		if (size)
			*size = sizeof(ns1__getUserNonce);
		((ns1__getUserNonce*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__getUserNonce[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__getUserNonce);
		for (int i = 0; i < n; i++)
			((ns1__getUserNonce*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__getUserNonce*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserNonce(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__getUserNonce %p -> %p\n", q, p));
	*(ns1__getUserNonce*)p = *(ns1__getUserNonce*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__integer(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__integer), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__integer, 0, sizeof(std::string), 0, soap_copy_xsd__integer);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__integer);
	if (soap_out_xsd__integer(soap, tag?tag:"xsd:integer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__integer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getUserNonce(struct soap *soap, struct __ns1__getUserNonce *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getUserNonce_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getUserNonce(struct soap *soap, const struct __ns1__getUserNonce *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__getUserNonce(soap, &a->ns1__getUserNonce_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getUserNonce(struct soap *soap, const char *tag, int id, const struct __ns1__getUserNonce *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__getUserNonce(soap, "ns1:getUserNonce", -1, &a->ns1__getUserNonce_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getUserNonce * SOAP_FMAC4 soap_in___ns1__getUserNonce(struct soap *soap, const char *tag, struct __ns1__getUserNonce *a, const char *type)
{
	size_t soap_flag_ns1__getUserNonce_ = 1;
	short soap_flag;
	a = (struct __ns1__getUserNonce *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getUserNonce, sizeof(struct __ns1__getUserNonce), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getUserNonce(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getUserNonce_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__getUserNonce(soap, "ns1:getUserNonce", &a->ns1__getUserNonce_, "ns1:getUserNonce"))
				{	soap_flag_ns1__getUserNonce_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getUserNonce(struct soap *soap, const struct __ns1__getUserNonce *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__getUserNonce(soap, tag?tag:"-ns1:getUserNonce", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getUserNonce * SOAP_FMAC4 soap_get___ns1__getUserNonce(struct soap *soap, struct __ns1__getUserNonce *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getUserNonce(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getUserNonce * SOAP_FMAC2 soap_instantiate___ns1__getUserNonce(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getUserNonce(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getUserNonce, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getUserNonce);
		if (size)
			*size = sizeof(struct __ns1__getUserNonce);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getUserNonce[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__getUserNonce);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__getUserNonce*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getUserNonce(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getUserNonce %p -> %p\n", q, p));
	*(struct __ns1__getUserNonce*)p = *(struct __ns1__getUserNonce*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__sessionsByIp(struct soap *soap, struct __ns1__sessionsByIp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__sessionsByIp_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__sessionsByIp(struct soap *soap, const struct __ns1__sessionsByIp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__sessionsByIp(soap, &a->ns1__sessionsByIp_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__sessionsByIp(struct soap *soap, const char *tag, int id, const struct __ns1__sessionsByIp *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__sessionsByIp(soap, "ns1:sessionsByIp", -1, &a->ns1__sessionsByIp_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__sessionsByIp * SOAP_FMAC4 soap_in___ns1__sessionsByIp(struct soap *soap, const char *tag, struct __ns1__sessionsByIp *a, const char *type)
{
	size_t soap_flag_ns1__sessionsByIp_ = 1;
	short soap_flag;
	a = (struct __ns1__sessionsByIp *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__sessionsByIp, sizeof(struct __ns1__sessionsByIp), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__sessionsByIp(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__sessionsByIp_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__sessionsByIp(soap, "ns1:sessionsByIp", &a->ns1__sessionsByIp_, "ns1:sessionsByIp"))
				{	soap_flag_ns1__sessionsByIp_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__sessionsByIp(struct soap *soap, const struct __ns1__sessionsByIp *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__sessionsByIp(soap, tag?tag:"-ns1:sessionsByIp", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__sessionsByIp * SOAP_FMAC4 soap_get___ns1__sessionsByIp(struct soap *soap, struct __ns1__sessionsByIp *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__sessionsByIp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__sessionsByIp * SOAP_FMAC2 soap_instantiate___ns1__sessionsByIp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__sessionsByIp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__sessionsByIp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__sessionsByIp);
		if (size)
			*size = sizeof(struct __ns1__sessionsByIp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__sessionsByIp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__sessionsByIp);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__sessionsByIp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__sessionsByIp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__sessionsByIp %p -> %p\n", q, p));
	*(struct __ns1__sessionsByIp*)p = *(struct __ns1__sessionsByIp*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__singleSignOn(struct soap *soap, struct __ns1__singleSignOn *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__singleSignOn_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__singleSignOn(struct soap *soap, const struct __ns1__singleSignOn *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__singleSignOn(soap, &a->ns1__singleSignOn_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__singleSignOn(struct soap *soap, const char *tag, int id, const struct __ns1__singleSignOn *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__singleSignOn(soap, "ns1:singleSignOn", -1, &a->ns1__singleSignOn_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__singleSignOn * SOAP_FMAC4 soap_in___ns1__singleSignOn(struct soap *soap, const char *tag, struct __ns1__singleSignOn *a, const char *type)
{
	size_t soap_flag_ns1__singleSignOn_ = 1;
	short soap_flag;
	a = (struct __ns1__singleSignOn *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__singleSignOn, sizeof(struct __ns1__singleSignOn), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__singleSignOn(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__singleSignOn_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__singleSignOn(soap, "ns1:singleSignOn", &a->ns1__singleSignOn_, "ns1:singleSignOn"))
				{	soap_flag_ns1__singleSignOn_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__singleSignOn(struct soap *soap, const struct __ns1__singleSignOn *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__singleSignOn(soap, tag?tag:"-ns1:singleSignOn", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__singleSignOn * SOAP_FMAC4 soap_get___ns1__singleSignOn(struct soap *soap, struct __ns1__singleSignOn *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__singleSignOn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__singleSignOn * SOAP_FMAC2 soap_instantiate___ns1__singleSignOn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__singleSignOn(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__singleSignOn, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__singleSignOn);
		if (size)
			*size = sizeof(struct __ns1__singleSignOn);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__singleSignOn[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__singleSignOn);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__singleSignOn*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__singleSignOn(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__singleSignOn %p -> %p\n", q, p));
	*(struct __ns1__singleSignOn*)p = *(struct __ns1__singleSignOn*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__logout(struct soap *soap, struct __ns1__logout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__logout_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__logout(struct soap *soap, const struct __ns1__logout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__logout(soap, &a->ns1__logout_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__logout(struct soap *soap, const char *tag, int id, const struct __ns1__logout *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__logout(soap, "ns1:logout", -1, &a->ns1__logout_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__logout * SOAP_FMAC4 soap_in___ns1__logout(struct soap *soap, const char *tag, struct __ns1__logout *a, const char *type)
{
	size_t soap_flag_ns1__logout_ = 1;
	short soap_flag;
	a = (struct __ns1__logout *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__logout, sizeof(struct __ns1__logout), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__logout(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__logout_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__logout(soap, "ns1:logout", &a->ns1__logout_, "ns1:logout"))
				{	soap_flag_ns1__logout_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__logout(struct soap *soap, const struct __ns1__logout *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__logout(soap, tag?tag:"-ns1:logout", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__logout * SOAP_FMAC4 soap_get___ns1__logout(struct soap *soap, struct __ns1__logout *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__logout * SOAP_FMAC2 soap_instantiate___ns1__logout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__logout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__logout, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__logout);
		if (size)
			*size = sizeof(struct __ns1__logout);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__logout[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__logout);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__logout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__logout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__logout %p -> %p\n", q, p));
	*(struct __ns1__logout*)p = *(struct __ns1__logout*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__login(struct soap *soap, struct __ns1__login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__login_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__login(struct soap *soap, const struct __ns1__login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__login(soap, &a->ns1__login_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__login(struct soap *soap, const char *tag, int id, const struct __ns1__login *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__login(soap, "ns1:login", -1, &a->ns1__login_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__login * SOAP_FMAC4 soap_in___ns1__login(struct soap *soap, const char *tag, struct __ns1__login *a, const char *type)
{
	size_t soap_flag_ns1__login_ = 1;
	short soap_flag;
	a = (struct __ns1__login *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__login, sizeof(struct __ns1__login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__login(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__login_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__login(soap, "ns1:login", &a->ns1__login_, "ns1:login"))
				{	soap_flag_ns1__login_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__login(struct soap *soap, const struct __ns1__login *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__login(soap, tag?tag:"-ns1:login", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__login * SOAP_FMAC4 soap_get___ns1__login(struct soap *soap, struct __ns1__login *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__login * SOAP_FMAC2 soap_instantiate___ns1__login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__login);
		if (size)
			*size = sizeof(struct __ns1__login);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__login[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__login);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__login %p -> %p\n", q, p));
	*(struct __ns1__login*)p = *(struct __ns1__login*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->ns1__DecoderException_ = NULL;
	a->ns1__UnsupportedEncodingException_ = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__DecoderException(soap, &a->ns1__DecoderException_);
	soap_serialize_PointerTons1__UnsupportedEncodingException(soap, &a->ns1__UnsupportedEncodingException_);
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_out_PointerTons1__DecoderException(soap, "ns1:DecoderException", -1, &a->ns1__DecoderException_, ""))
		return soap->error;
	if (soap_out_PointerTons1__UnsupportedEncodingException(soap, "ns1:UnsupportedEncodingException", -1, &a->ns1__UnsupportedEncodingException_, ""))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_ns1__DecoderException_ = 1;
	size_t soap_flag_ns1__UnsupportedEncodingException_ = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DecoderException_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__DecoderException(soap, "ns1:DecoderException", &a->ns1__DecoderException_, "ns1:DecoderException"))
				{	soap_flag_ns1__DecoderException_--;
					continue;
				}
			if (soap_flag_ns1__UnsupportedEncodingException_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__UnsupportedEncodingException(soap, "ns1:UnsupportedEncodingException", &a->ns1__UnsupportedEncodingException_, "ns1:UnsupportedEncodingException"))
				{	soap_flag_ns1__UnsupportedEncodingException_--;
					continue;
				}
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_fault > 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getUserNonceResponse(struct soap *soap, ns1__getUserNonceResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getUserNonceResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getUserNonceResponse(struct soap *soap, const char *tag, int id, ns1__getUserNonceResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getUserNonceResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__getUserNonceResponse ** SOAP_FMAC4 soap_in_PointerTons1__getUserNonceResponse(struct soap *soap, const char *tag, ns1__getUserNonceResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getUserNonceResponse **)soap_malloc(soap, sizeof(ns1__getUserNonceResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getUserNonceResponse *)soap_instantiate_ns1__getUserNonceResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__getUserNonceResponse ** p = (ns1__getUserNonceResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getUserNonceResponse, sizeof(ns1__getUserNonceResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getUserNonceResponse(struct soap *soap, ns1__getUserNonceResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__getUserNonceResponse);
	if (soap_out_PointerTons1__getUserNonceResponse(soap, tag?tag:"ns1:getUserNonceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getUserNonceResponse ** SOAP_FMAC4 soap_get_PointerTons1__getUserNonceResponse(struct soap *soap, ns1__getUserNonceResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getUserNonceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getUserNonce(struct soap *soap, ns1__getUserNonce *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getUserNonce))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getUserNonce(struct soap *soap, const char *tag, int id, ns1__getUserNonce *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getUserNonce);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__getUserNonce ** SOAP_FMAC4 soap_in_PointerTons1__getUserNonce(struct soap *soap, const char *tag, ns1__getUserNonce **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getUserNonce **)soap_malloc(soap, sizeof(ns1__getUserNonce *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getUserNonce *)soap_instantiate_ns1__getUserNonce(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__getUserNonce ** p = (ns1__getUserNonce **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getUserNonce, sizeof(ns1__getUserNonce), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getUserNonce(struct soap *soap, ns1__getUserNonce *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__getUserNonce);
	if (soap_out_PointerTons1__getUserNonce(soap, tag?tag:"ns1:getUserNonce", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getUserNonce ** SOAP_FMAC4 soap_get_PointerTons1__getUserNonce(struct soap *soap, ns1__getUserNonce **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getUserNonce(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sessionsByIpResponse(struct soap *soap, ns1__sessionsByIpResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__sessionsByIpResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sessionsByIpResponse(struct soap *soap, const char *tag, int id, ns1__sessionsByIpResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__sessionsByIpResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__sessionsByIpResponse ** SOAP_FMAC4 soap_in_PointerTons1__sessionsByIpResponse(struct soap *soap, const char *tag, ns1__sessionsByIpResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__sessionsByIpResponse **)soap_malloc(soap, sizeof(ns1__sessionsByIpResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__sessionsByIpResponse *)soap_instantiate_ns1__sessionsByIpResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__sessionsByIpResponse ** p = (ns1__sessionsByIpResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__sessionsByIpResponse, sizeof(ns1__sessionsByIpResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sessionsByIpResponse(struct soap *soap, ns1__sessionsByIpResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__sessionsByIpResponse);
	if (soap_out_PointerTons1__sessionsByIpResponse(soap, tag?tag:"ns1:sessionsByIpResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__sessionsByIpResponse ** SOAP_FMAC4 soap_get_PointerTons1__sessionsByIpResponse(struct soap *soap, ns1__sessionsByIpResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__sessionsByIpResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sessionsByIp(struct soap *soap, ns1__sessionsByIp *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__sessionsByIp))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sessionsByIp(struct soap *soap, const char *tag, int id, ns1__sessionsByIp *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__sessionsByIp);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__sessionsByIp ** SOAP_FMAC4 soap_in_PointerTons1__sessionsByIp(struct soap *soap, const char *tag, ns1__sessionsByIp **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__sessionsByIp **)soap_malloc(soap, sizeof(ns1__sessionsByIp *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__sessionsByIp *)soap_instantiate_ns1__sessionsByIp(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__sessionsByIp ** p = (ns1__sessionsByIp **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__sessionsByIp, sizeof(ns1__sessionsByIp), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sessionsByIp(struct soap *soap, ns1__sessionsByIp *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__sessionsByIp);
	if (soap_out_PointerTons1__sessionsByIp(soap, tag?tag:"ns1:sessionsByIp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__sessionsByIp ** SOAP_FMAC4 soap_get_PointerTons1__sessionsByIp(struct soap *soap, ns1__sessionsByIp **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__sessionsByIp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__singleSignOnResponse(struct soap *soap, ns1__singleSignOnResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__singleSignOnResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__singleSignOnResponse(struct soap *soap, const char *tag, int id, ns1__singleSignOnResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__singleSignOnResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__singleSignOnResponse ** SOAP_FMAC4 soap_in_PointerTons1__singleSignOnResponse(struct soap *soap, const char *tag, ns1__singleSignOnResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__singleSignOnResponse **)soap_malloc(soap, sizeof(ns1__singleSignOnResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__singleSignOnResponse *)soap_instantiate_ns1__singleSignOnResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__singleSignOnResponse ** p = (ns1__singleSignOnResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__singleSignOnResponse, sizeof(ns1__singleSignOnResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__singleSignOnResponse(struct soap *soap, ns1__singleSignOnResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__singleSignOnResponse);
	if (soap_out_PointerTons1__singleSignOnResponse(soap, tag?tag:"ns1:singleSignOnResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__singleSignOnResponse ** SOAP_FMAC4 soap_get_PointerTons1__singleSignOnResponse(struct soap *soap, ns1__singleSignOnResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__singleSignOnResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__singleSignOn(struct soap *soap, ns1__singleSignOn *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__singleSignOn))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__singleSignOn(struct soap *soap, const char *tag, int id, ns1__singleSignOn *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__singleSignOn);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__singleSignOn ** SOAP_FMAC4 soap_in_PointerTons1__singleSignOn(struct soap *soap, const char *tag, ns1__singleSignOn **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__singleSignOn **)soap_malloc(soap, sizeof(ns1__singleSignOn *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__singleSignOn *)soap_instantiate_ns1__singleSignOn(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__singleSignOn ** p = (ns1__singleSignOn **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__singleSignOn, sizeof(ns1__singleSignOn), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__singleSignOn(struct soap *soap, ns1__singleSignOn *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__singleSignOn);
	if (soap_out_PointerTons1__singleSignOn(soap, tag?tag:"ns1:singleSignOn", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__singleSignOn ** SOAP_FMAC4 soap_get_PointerTons1__singleSignOn(struct soap *soap, ns1__singleSignOn **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__singleSignOn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__logoutResponse(struct soap *soap, ns1__logoutResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__logoutResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__logoutResponse(struct soap *soap, const char *tag, int id, ns1__logoutResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__logoutResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__logoutResponse ** SOAP_FMAC4 soap_in_PointerTons1__logoutResponse(struct soap *soap, const char *tag, ns1__logoutResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__logoutResponse **)soap_malloc(soap, sizeof(ns1__logoutResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__logoutResponse *)soap_instantiate_ns1__logoutResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__logoutResponse ** p = (ns1__logoutResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__logoutResponse, sizeof(ns1__logoutResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__logoutResponse(struct soap *soap, ns1__logoutResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__logoutResponse);
	if (soap_out_PointerTons1__logoutResponse(soap, tag?tag:"ns1:logoutResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__logoutResponse ** SOAP_FMAC4 soap_get_PointerTons1__logoutResponse(struct soap *soap, ns1__logoutResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__logoutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__logout(struct soap *soap, ns1__logout *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__logout))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__logout(struct soap *soap, const char *tag, int id, ns1__logout *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__logout);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__logout ** SOAP_FMAC4 soap_in_PointerTons1__logout(struct soap *soap, const char *tag, ns1__logout **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__logout **)soap_malloc(soap, sizeof(ns1__logout *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__logout *)soap_instantiate_ns1__logout(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__logout ** p = (ns1__logout **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__logout, sizeof(ns1__logout), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__logout(struct soap *soap, ns1__logout *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__logout);
	if (soap_out_PointerTons1__logout(soap, tag?tag:"ns1:logout", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__logout ** SOAP_FMAC4 soap_get_PointerTons1__logout(struct soap *soap, ns1__logout **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__loginResponse(struct soap *soap, ns1__loginResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__loginResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__loginResponse(struct soap *soap, const char *tag, int id, ns1__loginResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__loginResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__loginResponse ** SOAP_FMAC4 soap_in_PointerTons1__loginResponse(struct soap *soap, const char *tag, ns1__loginResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__loginResponse **)soap_malloc(soap, sizeof(ns1__loginResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__loginResponse *)soap_instantiate_ns1__loginResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__loginResponse ** p = (ns1__loginResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__loginResponse, sizeof(ns1__loginResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__loginResponse(struct soap *soap, ns1__loginResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__loginResponse);
	if (soap_out_PointerTons1__loginResponse(soap, tag?tag:"ns1:loginResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__loginResponse ** SOAP_FMAC4 soap_get_PointerTons1__loginResponse(struct soap *soap, ns1__loginResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__loginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__login(struct soap *soap, ns1__login *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__login))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__login(struct soap *soap, const char *tag, int id, ns1__login *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__login);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__login ** SOAP_FMAC4 soap_in_PointerTons1__login(struct soap *soap, const char *tag, ns1__login **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__login **)soap_malloc(soap, sizeof(ns1__login *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__login *)soap_instantiate_ns1__login(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__login ** p = (ns1__login **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__login, sizeof(ns1__login), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__login(struct soap *soap, ns1__login *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__login);
	if (soap_out_PointerTons1__login(soap, tag?tag:"ns1:login", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__login ** SOAP_FMAC4 soap_get_PointerTons1__login(struct soap *soap, ns1__login **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__UnsupportedEncodingException(struct soap *soap, ns1__UnsupportedEncodingException *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__UnsupportedEncodingException))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__UnsupportedEncodingException(struct soap *soap, const char *tag, int id, ns1__UnsupportedEncodingException *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__UnsupportedEncodingException);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__UnsupportedEncodingException ** SOAP_FMAC4 soap_in_PointerTons1__UnsupportedEncodingException(struct soap *soap, const char *tag, ns1__UnsupportedEncodingException **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__UnsupportedEncodingException **)soap_malloc(soap, sizeof(ns1__UnsupportedEncodingException *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__UnsupportedEncodingException *)soap_instantiate_ns1__UnsupportedEncodingException(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__UnsupportedEncodingException ** p = (ns1__UnsupportedEncodingException **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__UnsupportedEncodingException, sizeof(ns1__UnsupportedEncodingException), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__UnsupportedEncodingException(struct soap *soap, ns1__UnsupportedEncodingException *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__UnsupportedEncodingException);
	if (soap_out_PointerTons1__UnsupportedEncodingException(soap, tag?tag:"ns1:UnsupportedEncodingException", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__UnsupportedEncodingException ** SOAP_FMAC4 soap_get_PointerTons1__UnsupportedEncodingException(struct soap *soap, ns1__UnsupportedEncodingException **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__UnsupportedEncodingException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DecoderException(struct soap *soap, ns1__DecoderException *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__DecoderException))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DecoderException(struct soap *soap, const char *tag, int id, ns1__DecoderException *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__DecoderException);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__DecoderException ** SOAP_FMAC4 soap_in_PointerTons1__DecoderException(struct soap *soap, const char *tag, ns1__DecoderException **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__DecoderException **)soap_malloc(soap, sizeof(ns1__DecoderException *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__DecoderException *)soap_instantiate_ns1__DecoderException(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__DecoderException ** p = (ns1__DecoderException **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__DecoderException, sizeof(ns1__DecoderException), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DecoderException(struct soap *soap, ns1__DecoderException *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__DecoderException);
	if (soap_out_PointerTons1__DecoderException(soap, tag?tag:"ns1:DecoderException", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__DecoderException ** SOAP_FMAC4 soap_get_PointerTons1__DecoderException(struct soap *soap, ns1__DecoderException **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__DecoderException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_bool);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_bool);
	if (id < 0)
		return soap->error;
	return soap_out_bool(soap, tag, id, *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_bool(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_bool, sizeof(bool), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTobool);
	if (soap_out_PointerTobool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTobool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__integer))
		soap_serialize_xsd__integer(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__integer);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__integer(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__integer(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__integer, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__integer);
	if (soap_out_PointerToxsd__integer(soap, tag?tag:"xsd:integer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__integer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__xfelSession(struct soap *soap, ns1__xfelSession *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__xfelSession))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__xfelSession(struct soap *soap, const char *tag, int id, ns1__xfelSession *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__xfelSession);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__xfelSession ** SOAP_FMAC4 soap_in_PointerTons1__xfelSession(struct soap *soap, const char *tag, ns1__xfelSession **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__xfelSession **)soap_malloc(soap, sizeof(ns1__xfelSession *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__xfelSession *)soap_instantiate_ns1__xfelSession(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__xfelSession ** p = (ns1__xfelSession **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__xfelSession, sizeof(ns1__xfelSession), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__xfelSession(struct soap *soap, ns1__xfelSession *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__xfelSession);
	if (soap_out_PointerTons1__xfelSession(soap, tag?tag:"ns1:xfelSession", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__xfelSession ** SOAP_FMAC4 soap_get_PointerTons1__xfelSession(struct soap *soap, ns1__xfelSession **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__xfelSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE__QName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
        soap_fault(soap);
        if (soap->version == 2)
        {       if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
                        return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
                return NULL;
        }
        return soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
        soap_fault(soap);
        if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
                return soap->fault->SOAP_ENV__Detail->__any;
        if (soap->fault->detail)
                return soap->fault->detail->__any;
        return NULL;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
