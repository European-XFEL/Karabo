stages:
  - lint
  - build
  - test

.build_template: &build
  stage: build
  script:
    - source set_lsb_release_info.sh
    - source ci/prepare "$CI_BUILD_NAME"
    - source ci/build "$CI_BUILD_NAME"

.artifact_template: &artifacts-spec
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    when: always
    paths:
      - junit*.xml
      - coverage.xml
    reports:
      junit:
        - junit*.xml
      cobertura:
        - coverage.xml

.services_template: &services_template
  services:
    - name: europeanxfel/existdb:2.2
      alias: existdb_host
    - name: influxdb:1.8.0
      alias: influxdb_host
  variables:
    INFLUXDB_DB: "InfluxLogTest"
    INFLUXDB_HTTP_AUTH_ENABLED: "true"
    INFLUXDB_ADMIN_USER: "infadm"
    INFLUXDB_ADMIN_PASSWORD: "admpwd"
    INFLUXDB_USER: "infusr"
    INFLUXDB_USER_PASSWORD: "usrpwd"

.test_template: &test
  stage: test
  <<: *services_template
  script:
    - source set_lsb_release_info.sh
    - source ci/prepare "$CI_BUILD_NAME"
    - source ci/test "$CI_BUILD_NAME"
  <<: *artifacts-spec

.image_almalinux8_: &image_almalinux8
  image: europeanxfel/karabo-ci:almalinux-8-002
  tags:
    - KaraboFramework

.image_almalinux9_: &image_almalinux9
  image: europeanxfel/karabo-ci:almalinux-9-001
  tags:
    - KaraboFramework

.image_centos7_: &image_centos7
  image: europeanxfel/karabo-ci:centos-7-002
  tags:
    - KaraboFramework

.image_ubuntu20_: &image_ubuntu20
  image: europeanxfel/karabo-ci:ubuntu-20-002
  tags:
    - KaraboFramework

.image_ubuntu22_: &image_ubuntu22
  image: europeanxfel/karabo-ci:ubuntu-22-001
  tags:
    - KaraboFramework

.image_debian10_: &image_debian10
  image: europeanxfel/karabo-ci:debian-10-002
  tags:
    - KaraboFramework

.image_miniconda_: &image_miniconda
  image: europeanxfel/karabo-ci:miniconda-3-005
  tags:
    - KaraboFramework

# # TODO: remove this after reporting support for ctest is working
# .test_template_miniconda_cmake: &test-miniconda-cmake
#   stage: test
#   <<: *services_template
#   script:
#     - source ci/prepare "$CI_BUILD_NAME"
#     - source ci/test "$CI_BUILD_NAME"

.release_build: &release-build
  <<: *build
  only:
    - /^(\d+\.)(\d+\.)(\d+)$/
  except:
    - branches
    - schedules

.prerelease_build: &prerelease-build
  <<: *build
  only:
    - /^(\d+\.)(\d+\.)(\d+)((a|b|rc|\.)\d+)$/
  except:
    - branches
    - schedules

.release_build_conda: &release-build-conda
  stage: build
  script:
    - conda config --add channels $KARABO_CONDA_CHANNEL_URL
    - >
      python ci/miniconda pack karabogui
      --ci --clean --upload-env
      -E karaboEnvironments
      --upload-to-mirror
      -c $KARABO_CONDA_CHANNEL
      -P $KARABO_CONDA_CHANNEL_PATH
      -C $KARABO_CONDA_CHANNEL_PATH/mirror
      --index-mirror
  only:
    - /^(\d+\.)(\d+\.)(\d+)$/
  except:
    - branches
    - schedules

.prerelease_build_conda: &prerelease-build-conda
  stage: build
  script:
    - conda config --add channels $KARABO_CONDA_CHANNEL_URL
    - >
      python ci/miniconda pack karabogui
      --ci --clean --upload-env
      -E karaboEnvironments
      --upload-to-mirror
      -c $KARABO_CONDA_CHANNEL
      -P $KARABO_CONDA_CHANNEL_PATH/nightly
      -C $KARABO_CONDA_CHANNEL_PATH/mirror
      --index-mirror
  only:
    - /^(\d+\.)(\d+\.)(\d+)(a|b|rc)(\d+)$/
  except:
    - branches
    - schedules

.nightly_build_conda: &nightly-build-conda
  stage: build
  script:
    - conda config --add channels $KARABO_CONDA_CHANNEL_URL
    - >
      python ci/miniconda pack karabogui
      --ci --clean --upload-env
      -E karaboEnvironments
      --upload-to-mirror
      --nightly
      -c $KARABO_CONDA_CHANNEL
      -P $KARABO_CONDA_CHANNEL_PATH/nightly
      -C $KARABO_CONDA_CHANNEL_PATH/mirror
      --index-mirror
  only:
    - schedules

.manual_build_conda_dependency_update: &manual-build-conda-dependency-update
  stage: build
  script:
    - conda config --add channels conda-forge
    - >
      python ci/miniconda pack karabogui
      --ci --clean --test --upload-env
      -E karaboEnvironments
      --upload-to-mirror
      -c $KARABO_CONDA_CHANNEL
      -P $KARABO_CONDA_CHANNEL_PATH/nightly
      -C $KARABO_CONDA_CHANNEL_PATH/mirror
      --index-mirror
  only:
    variables:
      - $REFRESH_MIRROR
  when: manual

.nightly_build: &nightly-build
  <<: *build
  only:
    - schedules

.deps_build: &deps-build
  <<: *build
  only:
    refs:
      - /^deps-(add|update|remove)-.+$/
      - merge_requests
    changes:
      - "extern/**/*"
  except:
    - schedules

.except_main: &except-main
  except:
    refs:
      - /^(master)$/ # the changes check will default to true
      - /^(\d+\.)(\d+\.)(X-hotfix)$/ # the changes check will default to true
      - schedules
    changes:
      - "extern/**/*"

.integration_tests: &integration-tests
  <<: *test
  only:
    refs:
      - /^(master)$/ # the changes check will default to true
      - /^(\d+\.)(\d+\.)(X-hotfix)$/ # the changes check will default to true
      - merge_requests
    changes:
      - "src/karabo/devices/**/*"
      - "src/integrationTests/**/*"
      - "src/pythonKarabo/karabo/integration_tests/**/*"
      - "src/pythonKarabo/karabo/bound_devices/**/*"
      - "src/pythonKarabo/karabo/middlelayer_devices/**/*"
      - "src/pythonKarabo/karabo/influxdb/**/*"
  except:
    - schedules

.cpp_unit_tests: &cpp-unit-tests
  <<: *test
  only:
    refs:
      - merge_requests
    changes:
      - "src/karabo/**/*"
  <<: *except-main

.python_unit_tests: &python-unit-tests
  <<: *test
  only:
    refs:
      - merge_requests
    changes:
      - "src/karathon/**/*" # bound api depends on the c++ build
      - "src/karabo/**/*" # bound api depends on the c++ build
      - "src/pythonKarabo/**/*"
  <<: *except-main

# GUI tests to be executed in a Conda environment
.gui_unit_tests: &gui-unit-tests
  stage: test
  script:
    - conda config --add channels $KARABO_CONDA_CHANNEL_URL
    - >
      python ci/miniconda pack karabogui
      -c $KARABO_CONDA_CHANNEL
      --ci --clean --test
      --skip-build
  only:
    refs:
      - merge_requests
    changes:
      - "src/pythonGui/**/*"
      - "src/pythonKarabo/karabo/native/**/*"
      - "src/pythonKarabo/karabo/common/**/*"
      - "conda-recipes/karabo-native/**/*"
      - "conda-recipes/karabogui/**/*"
  <<: *artifacts-spec

.deps_tests: &deps-tests
  <<: *test
  only:
    refs:
      - merge_requests
    changes:
      - "extern/**/*"

.long_tests: &long-tests
  <<: *test
  only:
    refs:
      - schedules
      - merge_requests
    changes:
      - "src/cppLongTests/**/*"

### Jobs

# static source code analysis
lint:
  stage: lint
  image: europeanxfel/karabo-ci:miniconda-3lint
  script:
    - source ci/lint ALL
  only:
    refs:
      - merge_requests
    changes:
      - "src/**/*"

test_docs:
  stage: lint
  image: europeanxfel/karabo-ci:miniconda-3
  script:
    - pushd doc
    - pip install -r requirements.txt
    - conda config --add channels conda-forge
    - conda install doxygen
    - make doctest
  only:
    refs:
      - merge_requests
    changes:
      - "src/**/*"
      - "doc/**/*"

# release build

release build almalinux8:
  <<: *image_almalinux8
  <<: *release-build

release build almalinux9:
  <<: *image_almalinux9
  <<: *release-build

release build centos7:
  <<: *image_centos7
  <<: *release-build

release build debian10:
  <<: *image_debian10
  <<: *release-build

release build ubuntu20:
  <<: *image_ubuntu20
  <<: *release-build

release build ubuntu22:
  <<: *image_ubuntu22
  <<: *release-build

release build miniconda:
  <<: *image_miniconda
  <<: *release-build-conda

release build miniconda-osx64:
  before_script:
    - ci/miniconda/cleanup.sh
  tags:
    - macos
  <<: *release-build-conda

release build miniconda-win64:
  before_script:
    - ci/miniconda/cleanup.cmd
  tags:
    - Win10
  <<: *release-build-conda

# prerelease build

prerelease build almalinux8:
  <<: *image_almalinux8
  <<: *prerelease-build

prerelease build almalinux9:
  <<: *image_almalinux9
  <<: *prerelease-build

prerelease build centos7:
  <<: *image_centos7
  <<: *prerelease-build

prerelease build debian10:
  <<: *image_debian10
  <<: *prerelease-build

prerelease build ubuntu20:
  <<: *image_ubuntu20
  <<: *prerelease-build

prerelease build ubuntu22:
  <<: *image_ubuntu22
  <<: *prerelease-build

prerelease build miniconda:
  <<: *image_miniconda
  <<: *prerelease-build-conda

prerelease build miniconda-osx64:
  before_script:
    - ci/miniconda/cleanup.sh
  tags:
    - macos
  <<: *prerelease-build-conda

prerelease build miniconda-win64:
  before_script:
    - ci/miniconda/cleanup.cmd
  tags:
    - Win10
  <<: *prerelease-build-conda

# nightly release build

nightly build almalinux8:
  <<: *image_almalinux8
  <<: *nightly-build

nightly build almalinux9:
  <<: *image_almalinux9
  <<: *nightly-build

nightly build centos7:
  <<: *image_centos7
  <<: *nightly-build

nightly build debian10:
  <<: *image_debian10
  <<: *nightly-build

nightly build ubuntu20:
  <<: *image_ubuntu20
  <<: *nightly-build

nightly build ubuntu22:
  <<: *image_ubuntu22
  <<: *nightly-build

nightly build miniconda-osx64:
  before_script:
    - ci/miniconda/cleanup.sh
  tags:
    - macos
  <<: *nightly-build-conda

nightly build miniconda-win64:
  before_script:
    - ci/miniconda/cleanup.cmd
  tags:
    - Win10
  <<: *nightly-build-conda

nightly build miniconda:
  <<: *image_miniconda
  <<: *nightly-build-conda

# Dependencies build

deps build almalinux8:
  <<: *image_almalinux8
  <<: *deps-build

deps build almalinux9:
  <<: *image_almalinux9
  <<: *deps-build

deps build centos7:
  <<: *image_centos7
  <<: *deps-build

deps build debian10:
  <<: *image_debian10
  <<: *deps-build

deps build ubuntu20:
  <<: *image_ubuntu20
  <<: *deps-build

deps build ubuntu22:
  <<: *image_ubuntu22
  <<: *deps-build

# Dependencies build tests

cpp_deps tests almalinux8:
  <<: *image_almalinux8
  <<: *deps-tests

cpp_deps tests almalinux9:
  <<: *image_almalinux9
  <<: *deps-tests

cpp_deps tests centos7:
  <<: *image_centos7
  <<: *deps-tests

cpp_deps tests debian10:
  <<: *image_debian10
  <<: *deps-tests

cpp_deps tests ubuntu20:
  <<: *image_ubuntu20
  <<: *deps-tests

cpp_deps tests ubuntu22:
  <<: *image_ubuntu22
  <<: *deps-tests

python_deps tests almalinux8:
  <<: *image_almalinux8
  <<: *deps-tests

python_deps tests almalinux9:
  <<: *image_almalinux9
  <<: *deps-tests

python_deps tests centos7:
  <<: *image_centos7
  <<: *deps-tests

python_deps tests debian10:
  <<: *image_debian10
  <<: *deps-tests

python_deps tests ubuntu20:
  <<: *image_ubuntu20
  <<: *deps-tests

python_deps tests ubuntu22:
  <<: *image_ubuntu22
  <<: *deps-tests

# MR test builds

python_unit tests almalinux8:
  <<: *image_almalinux8
  <<: *python-unit-tests

python_unit tests almalinux9:
  <<: *image_almalinux9
  <<: *python-unit-tests

python_unit tests centos7:
  <<: *image_centos7
  <<: *python-unit-tests

python_unit tests debian10:
  <<: *image_debian10
  <<: *python-unit-tests

python_unit tests ubuntu20:
  <<: *image_ubuntu20
  <<: *python-unit-tests

python_unit tests ubuntu22:
  <<: *image_ubuntu22
  <<: *python-unit-tests

cpp_unit tests almalinux8:
  <<: *image_almalinux8
  <<: *cpp-unit-tests

cpp_unit tests almalinux9:
  <<: *image_almalinux9
  <<: *cpp-unit-tests

cpp_unit tests centos7:
  <<: *image_centos7
  <<: *cpp-unit-tests

cpp_unit tests debian10:
  <<: *image_debian10
  <<: *cpp-unit-tests

cpp_unit tests ubuntu20:
  <<: *image_ubuntu20
  <<: *cpp-unit-tests

cpp_unit tests ubuntu22:
  <<: *image_ubuntu22
  <<: *cpp-unit-tests

gui_unit tests miniconda:
  <<: *image_miniconda
  <<: *gui-unit-tests

gui_unit tests miniconda-osx64:
  before_script:
    - ci/miniconda/cleanup.sh
  tags:
    - macos
  <<: *gui-unit-tests

gui_unit tests miniconda-win64:
  before_script:
    - ci/miniconda/cleanup.cmd
  tags:
    - Win10
  <<: *gui-unit-tests

gui_dependency_updates build miniconda:
  <<: *image_miniconda
  <<: *manual-build-conda-dependency-update

gui_dependency_updates build miniconda-osx64:
  before_script:
    - ci/miniconda/cleanup.sh
  tags:
    - macos
  <<: *manual-build-conda-dependency-update

gui_dependency_updates build miniconda-win64:
  before_script:
    - ci/miniconda/cleanup.cmd
  tags:
    - Win10
  <<: *manual-build-conda-dependency-update

# Post-merge integration test builds

python_integration tests almalinux8:
  <<: *image_almalinux8
  <<: *integration-tests

python_integration tests almalinux9:
  <<: *image_almalinux9
  <<: *integration-tests

python_integration tests centos7:
  <<: *image_centos7
  <<: *integration-tests

python_integration tests debian10:
  <<: *image_debian10
  <<: *integration-tests

python_integration tests ubuntu20:
  <<: *image_ubuntu20
  <<: *integration-tests

python_integration tests ubuntu22:
  <<: *image_ubuntu22
  <<: *integration-tests

cpp_integration tests almalinux8:
  <<: *image_almalinux8
  <<: *integration-tests

cpp_integration tests almalinux9:
  <<: *image_almalinux9
  <<: *integration-tests

cpp_integration tests centos7:
  <<: *image_centos7
  <<: *integration-tests

cpp_integration tests ubuntu20:
  <<: *image_ubuntu20
  <<: *integration-tests

cpp_integration tests ubuntu22:
  <<: *image_ubuntu22
  <<: *integration-tests

# Scheduled coverage tests

coverage tests centos7:
  <<: *image_centos7
  <<: *test
  only:
    - schedules

# Scheduled long tests

long tests almalinux8:
  <<: *image_almalinux8
  <<: *long-tests

long tests almalinux9:
  <<: *image_almalinux9
  <<: *long-tests

long tests centos7:
  <<: *image_centos7
  <<: *long-tests

long tests debian10:
  <<: *image_debian10
  <<: *long-tests

long tests ubuntu20:
  <<: *image_ubuntu20
  <<: *long-tests

long tests ubuntu22:
  <<: *image_ubuntu22
  <<: *long-tests
